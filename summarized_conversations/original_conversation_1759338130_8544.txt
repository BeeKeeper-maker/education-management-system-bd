{'role': 'user', 'content': 'Excellent foundation! Now, let\'s bring the application to life by implementing the complete user authentication flow.\n\nHere is the plan:\n1.  **Connect to Database:** Ensure the server is correctly configured to connect to the PostgreSQL database using the credentials from the `.env` file.\n2.  **Run Database Migration:** Execute the database migration script (`migrate.ts`) to create all the tables defined in the schema files (`users.ts`, `academic.ts`, etc.) in the actual database.\n3.  **Seed a SuperAdmin:** Create and execute the seed script (`seed.ts`) to insert a default "SuperAdmin" user into the `users` table. Use a default email like "superadmin@edupro.com" and a password like "password123". Make sure to hash the password before saving.\n4.  **Implement Login API:** In the backend, complete the `auth.controller.ts`. The login function should:\n    a. Receive email and password from the request.\n    b. Find the user by email in the database.\n    c. Compare the provided password with the hashed password stored in the database.\n    d. If they match, generate a JWT (JSON Web Token) and send it back to the client along with user information.\n    e. If they don\'t match, send a clear error message.\n5.  **Connect Frontend to Backend:** In the `Login.tsx` component:\n    a. Make the login form fully functional.\n    b. When the user clicks the "Login" button, it should call the backend\'s Login API.\n    c. If the login is successful, save the received JWT and user data in the `AuthContext`, and automatically redirect the user to the `/dashboard` page.\n    d. If the login fails, display an error message on the login page (e.g., "Invalid email or password").\n\nPlease implement all these steps to make the user login fully functional from end to end.'}