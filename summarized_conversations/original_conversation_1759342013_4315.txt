{'role': 'assistant', 'content': 'Perfect! Now let me begin the implementation. I\'ll start with the database schema and migrations for all three modules, as this is the foundation everything else will build upon.\n\n## 🏗️ Starting with Database Schema\n\nLet me create the comprehensive database schema for all three modules:\n\n<function_calls>\n<create-file file_path="server/src/db/schema/attendance.ts">\nimport { pgTable, serial, integer, date, varchar, timestamp, boolean, text } from \'drizzle-orm/pg-core\';\nimport { relations } from \'drizzle-orm\';\nimport { students } from \'./students\';\nimport { classes } from \'./academic\';\nimport { sections } from \'./academic\';\n\n// Attendance records for individual students\nexport const attendance = pgTable(\'attendance\', {\n  id: serial(\'id\').primaryKey(),\n  studentId: integer(\'student_id\').notNull().references(() => students.id),\n  classId: integer(\'class_id\').notNull().references(() => classes.id),\n  sectionId: integer(\'section_id\').notNull().references(() => sections.id),\n  date: date(\'date\').notNull(),\n  status: varchar(\'status\', { length: 20 }).notNull().default(\'present\'), // present, absent, late, excused\n  remarks: text(\'remarks\'),\n  markedBy: integer(\'marked_by\').notNull(), // user_id of teacher who marked\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Class-level attendance tracking (for efficiency)\nexport const classAttendance = pgTable(\'class_attendance\', {\n  id: serial(\'id\').primaryKey(),\n  classId: integer(\'class_id\').notNull().references(() => classes.id),\n  sectionId: integer(\'section_id\').notNull().references(() => sections.id),\n  date: date(\'date\').notNull(),\n  totalStudents: integer(\'total_students\').notNull(),\n  presentCount: integer(\'present_count\').notNull().default(0),\n  absentCount: integer(\'absent_count\').notNull().default(0),\n  lateCount: integer(\'late_count\').notNull().default(0),\n  excusedCount: integer(\'excused_count\').notNull().default(0),\n  markedBy: integer(\'marked_by\').notNull(),\n  isFinalized: boolean(\'is_finalized\').default(false),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Leave applications from students\nexport const leaveApplications = pgTable(\'leave_applications\', {\n  id: serial(\'id\').primaryKey(),\n  studentId: integer(\'student_id\').notNull().references(() => students.id),\n  fromDate: date(\'from_date\').notNull(),\n  toDate: date(\'to_date\').notNull(),\n  reason: text(\'reason\').notNull(),\n  status: varchar(\'status\', { length: 20 }).notNull().default(\'pending\'), // pending, approved, rejected\n  appliedBy: integer(\'applied_by\').notNull(), // user_id (student or guardian)\n  reviewedBy: integer(\'reviewed_by\'),\n  reviewedAt: timestamp(\'reviewed_at\'),\n  remarks: text(\'remarks\'),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Relations\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  student: one(students, {\n    fields: [attendance.studentId],\n    references: [students.id],\n  }),\n  class: one(classes, {\n    fields: [attendance.classId],\n    references: [classes.id],\n  }),\n  section: one(sections, {\n    fields: [attendance.sectionId],\n    references: [sections.id],\n  }),\n}));\n\nexport const classAttendanceRelations = relations(classAttendance, ({ one }) => ({\n  class: one(classes, {\n    fields: [classAttendance.classId],\n    references: [classes.id],\n  }),\n  section: one(sections, {\n    fields: [classAttendance.sectionId],\n    references: [sections.id],\n  }),\n}));\n\nexport const leaveApplicationsRelations = relations(leaveApplications, ({ one }) => ({\n  student: one(students, {\n    fields: [leaveApplications.studentId],\n    references: [students.id],\n  }),\n}));\n</create-file>\n</function_calls>'}