{'role': 'assistant', 'content': 'Good! The backend is running. Now let me create the frontend pages for the Financial Management module. I\'ll start with the Fee Structure Management page:\n\n<function_calls>\n<create-file file_path="client/src/pages/FeeStructures.tsx">\nimport { useState, useEffect } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'../components/ui/card\';\nimport { Button } from \'../components/ui/button\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \'../components/ui/dialog\';\nimport { Input } from \'../components/ui/input\';\nimport { Label } from \'../components/ui/label\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'../components/ui/select\';\nimport { Textarea } from \'../components/ui/textarea\';\nimport { Badge } from \'../components/ui/badge\';\nimport { useToast } from \'../components/ui/use-toast\';\nimport { Plus, Edit, Eye, Trash2, DollarSign } from \'lucide-react\';\n\ninterface FeeCategory {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface FeeStructure {\n  id: string;\n  name: string;\n  description: string;\n  isActive: boolean;\n  academicSession: {\n    id: string;\n    name: string;\n  };\n  class?: {\n    id: string;\n    name: string;\n  };\n  createdAt: string;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n}\n\ninterface AcademicSession {\n  id: string;\n  name: string;\n  isCurrent: boolean;\n}\n\nexport default function FeeStructures() {\n  const { toast } = useToast();\n  const [structures, setStructures] = useState<FeeStructure[]>([]);\n  const [categories, setCategories] = useState<FeeCategory[]>([]);\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sessions, setSessions] = useState<AcademicSession[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \'\',\n    academicSessionId: \'\',\n    classId: \'\',\n    description: \'\',\n    items: [] as Array<{ feeCategoryId: string; amount: number; dueDate: string; isOptional: boolean }>,\n  });\n\n  useEffect(() => {\n    fetchStructures();\n    fetchCategories();\n    fetchClasses();\n    fetchSessions();\n  }, []);\n\n  const fetchStructures = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\'/api/fees/structures\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setStructures(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching fee structures:\', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCategories = async () => {\n    try {\n      const response = await fetch(\'/api/fees/categories\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setCategories(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching categories:\', error);\n    }\n  };\n\n  const fetchClasses = async () => {\n    try {\n      const response = await fetch(\'/api/academic/classes\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setClasses(data.data);\n    } catch (error) {\n      console.error(\'Error fetching classes:\', error);\n    }\n  };\n\n  const fetchSessions = async () => {\n    try {\n      const response = await fetch(\'/api/academic/sessions\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setSessions(data.data);\n        const currentSession = data.data.find((s: AcademicSession) => s.isCurrent);\n        if (currentSession) {\n          setFormData(prev => ({ ...prev, academicSessionId: currentSession.id }));\n        }\n      }\n    } catch (error) {\n      console.error(\'Error fetching sessions:\', error);\n    }\n  };\n\n  const addFeeItem = () => {\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, { feeCategoryId: \'\', amount: 0, dueDate: \'\', isOptional: false }],\n    }));\n  };\n\n  const updateFeeItem = (index: number, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      items: prev.items.map((item, i) => (i === index ? { ...item, [field]: value } : item)),\n    }));\n  };\n\n  const removeFeeItem = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      items: prev.items.filter((_, i) => i !== index),\n    }));\n  };\n\n  const createStructure = async () => {\n    try {\n      const response = await fetch(\'/api/fees/structures\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        toast({\n          title: \'Success\',\n          description: \'Fee structure created successfully\',\n        });\n        setDialogOpen(false);\n        resetForm();\n        fetchStructures();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to create fee structure\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const resetForm = () => {\n    const currentSession = sessions.find(s => s.isCurrent);\n    setFormData({\n      name: \'\',\n      academicSessionId: currentSession?.id || \'\',\n      classId: \'\',\n      description: \'\',\n      items: [],\n    });\n  };\n\n  const calculateTotal = () => {\n    return formData.items.reduce((sum, item) => sum + (item.amount || 0), 0);\n  };\n\n  return (\n    <div className="space-y-6">\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Fee Structures</h1>\n          <p className="text-muted-foreground">Manage fee structures and templates</p>\n        </div>\n        <Button onClick={() => setDialogOpen(true)}>\n          <Plus className="mr-2 h-4 w-4" />\n          Create Fee Structure\n        </Button>\n      </div>\n\n      {/* Statistics */}\n      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Total Structures</p>\n              <p className="text-3xl font-bold">{structures.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-green-600">Active</p>\n              <p className="text-3xl font-bold text-green-600">\n                {structures.filter(s => s.isActive).length}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Fee Categories</p>\n              <p className="text-3xl font-bold">{categories.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fee Structures List */}\n      {loading ? (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <p className="text-muted-foreground">Loading fee structures...</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : structures.length > 0 ? (\n        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">\n          {structures.map(structure => (\n            <Card key={structure.id} className="hover:shadow-lg transition-shadow">\n              <CardHeader>\n                <div className="flex items-start justify-between">\n                  <div className="flex-1">\n                    <CardTitle className="text-lg">{structure.name}</CardTitle>\n                    <CardDescription className="mt-1">\n                      {structure.academicSession.name}\n                      {structure.class && ` â€¢ ${structure.class.name}`}\n                    </CardDescription>\n                  </div>\n                  {structure.isActive && (\n                    <Badge className="bg-green-600">Active</Badge>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {structure.description && (\n                  <p className="text-sm text-muted-foreground mb-4 line-clamp-2">\n                    {structure.description}\n                  </p>\n                )}\n                <div className="flex gap-2">\n                  <Button size="sm" variant="outline" className="flex-1">\n                    <Eye className="mr-1 h-4 w-4" />\n                    View\n                  </Button>\n                  <Button size="sm" variant="outline" className="flex-1">\n                    <Edit className="mr-1 h-4 w-4" />\n                    Edit\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <DollarSign className="mx-auto h-12 w-12 text-muted-foreground mb-4" />\n              <p className="text-muted-foreground mb-4">No fee structures created yet</p>\n              <Button onClick={() => setDialogOpen(true)}>\n                <Plus className="mr-2 h-4 w-4" />\n                Create Your First Fee Structure\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Create Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">\n          <DialogHeader>\n            <DialogTitle>Create Fee Structure</DialogTitle>\n            <DialogDescription>Define a new fee structure template</DialogDescription>\n          </DialogHeader>\n          <div className="space-y-4">\n            <div className="space-y-2">\n              <Label>Structure Name *</Label>\n              <Input\n                placeholder="e.g., Class 1 Annual Fees 2024-25"\n                value={formData.name}\n                onChange={e => setFormData({ ...formData, name: e.target.value })}\n              />\n            </div>\n\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-2">\n                <Label>Academic Session *</Label>\n                <Select\n                  value={formData.academicSessionId}\n                  onValueChange={value => setFormData({ ...formData, academicSessionId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder="Select session" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {sessions.map(session => (\n                      <SelectItem key={session.id} value={session.id}>\n                        {session.name} {session.isCurrent && \'(Current)\'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className="space-y-2">\n                <Label>Class (Optional)</Label>\n                <Select\n                  value={formData.classId}\n                  onValueChange={value => setFormData({ ...formData, classId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder="All classes" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value="">All Classes</SelectItem>\n                    {classes.map(cls => (\n                      <SelectItem key={cls.id} value={cls.id}>\n                        {cls.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Description</Label>\n              <Textarea\n                placeholder="Brief description of this fee structure"\n                value={formData.description}\n                onChange={e => setFormData({ ...formData, description: e.target.value })}\n                rows={2}\n              />\n            </div>\n\n            <div className="border-t pt-4">\n              <div className="flex items-center justify-between mb-4">\n                <Label className="text-base">Fee Items</Label>\n                <Button size="sm" variant="outline" onClick={addFeeItem}>\n                  <Plus className="mr-1 h-4 w-4" />\n                  Add Item\n                </Button>\n              </div>\n\n              <div className="space-y-3">\n                {formData.items.map((item, index) => (\n                  <div key={index} className="flex gap-2 items-start p-3 border rounded-lg">\n                    <div className="flex-1 grid grid-cols-3 gap-2">\n                      <Select\n                        value={item.feeCategoryId}\n                        onValueChange={value => updateFeeItem(index, \'feeCategoryId\', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder="Category" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categories.map(cat => (\n                            <SelectItem key={cat.id} value={cat.id}>\n                              {cat.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n\n                      <Input\n                        type="number"\n                        placeholder="Amount"\n                        value={item.amount || \'\'}\n                        onChange={e => updateFeeItem(index, \'amount\', parseFloat(e.target.value) || 0)}\n                      />\n\n                      <Input\n                        type="date"\n                        placeholder="Due Date"\n                        value={item.dueDate}\n                        onChange={e => updateFeeItem(index, \'dueDate\', e.target.value)}\n                      />\n                    </div>\n                    <Button\n                      size="sm"\n                      variant="ghost"\n                      onClick={() => removeFeeItem(index)}\n                    >\n                      <Trash2 className="h-4 w-4 text-red-600" />\n                    </Button>\n                  </div>\n                ))}\n\n                {formData.items.length === 0 && (\n                  <div className="text-center py-8 text-muted-foreground">\n                    <p>No fee items added yet</p>\n                    <Button size="sm" variant="outline" onClick={addFeeItem} className="mt-2">\n                      <Plus className="mr-1 h-4 w-4" />\n                      Add First Item\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              {formData.items.length > 0 && (\n                <div className="mt-4 p-3 bg-muted rounded-lg">\n                  <div className="flex items-center justify-between">\n                    <span className="font-semibold">Total Amount:</span>\n                    <span className="text-2xl font-bold text-primary">\n                      ${calculateTotal().toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className="flex gap-2 justify-end pt-4">\n              <Button variant="outline" onClick={() => setDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={createStructure}\n                disabled={!formData.name || !formData.academicSessionId || formData.items.length === 0}\n              >\n                Create Structure\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}