{'role': 'assistant', 'content': 'Now let\'s create the hostel controller:\n\n<function_calls>\n<create-file file_path="server/src/controllers/hostel.controller.ts">\nimport { Request, Response } from \'express\';\nimport { db } from \'../db\';\nimport { hostels, rooms, roomAllocations } from \'../db/schema\';\nimport { eq, and, sql, desc, asc } from \'drizzle-orm\';\n\n// Get all hostels\nexport const getHostels = async (req: Request, res: Response) => {\n  try {\n    const { type, isActive } = req.query;\n\n    let query = db.select().from(hostels);\n\n    // Apply filters\n    const conditions = [];\n    if (type) conditions.push(eq(hostels.type, type as string));\n    if (isActive !== undefined) conditions.push(eq(hostels.isActive, isActive === \'true\'));\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    const hostelsList = await query.orderBy(asc(hostels.name));\n\n    res.json({\n      success: true,\n      hostels: hostelsList,\n    });\n  } catch (error) {\n    console.error(\'Get hostels error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch hostels\',\n    });\n  }\n};\n\n// Get hostel by ID with rooms\nexport const getHostelById = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    const hostel = await db.select().from(hostels).where(eq(hostels.id, id)).limit(1);\n\n    if (!hostel.length) {\n      return res.status(404).json({\n        success: false,\n        message: \'Hostel not found\',\n      });\n    }\n\n    // Get rooms for this hostel\n    const hostelRooms = await db.select().from(rooms).where(eq(rooms.hostelId, id));\n\n    res.json({\n      success: true,\n      hostel: {\n        ...hostel[0],\n        rooms: hostelRooms,\n      },\n    });\n  } catch (error) {\n    console.error(\'Get hostel error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch hostel\',\n    });\n  }\n};\n\n// Create hostel\nexport const createHostel = async (req: Request, res: Response) => {\n  try {\n    const {\n      name,\n      type,\n      totalCapacity,\n      address,\n      wardenId,\n      wardenName,\n      wardenPhone,\n      facilities,\n      description,\n    } = req.body;\n\n    const newHostel = await db\n      .insert(hostels)\n      .values({\n        name,\n        type,\n        totalCapacity,\n        address,\n        wardenId,\n        wardenName,\n        wardenPhone,\n        facilities: facilities ? JSON.stringify(facilities) : null,\n        description,\n      })\n      .returning();\n\n    res.status(201).json({\n      success: true,\n      message: \'Hostel created successfully\',\n      hostel: newHostel[0],\n    });\n  } catch (error) {\n    console.error(\'Create hostel error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to create hostel\',\n    });\n  }\n};\n\n// Update hostel\nexport const updateHostel = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    if (updateData.facilities) {\n      updateData.facilities = JSON.stringify(updateData.facilities);\n    }\n\n    const updated = await db\n      .update(hostels)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(hostels.id, id))\n      .returning();\n\n    if (!updated.length) {\n      return res.status(404).json({\n        success: false,\n        message: \'Hostel not found\',\n      });\n    }\n\n    res.json({\n      success: true,\n      message: \'Hostel updated successfully\',\n      hostel: updated[0],\n    });\n  } catch (error) {\n    console.error(\'Update hostel error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to update hostel\',\n    });\n  }\n};\n\n// Delete hostel\nexport const deleteHostel = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    // Check if hostel has active allocations\n    const activeAllocations = await db\n      .select()\n      .from(roomAllocations)\n      .innerJoin(rooms, eq(roomAllocations.roomId, rooms.id))\n      .where(and(eq(rooms.hostelId, id), eq(roomAllocations.status, \'active\')));\n\n    if (activeAllocations.length > 0) {\n      return res.status(400).json({\n        success: false,\n        message: \'Cannot delete hostel with active room allocations\',\n      });\n    }\n\n    await db.delete(hostels).where(eq(hostels.id, id));\n\n    res.json({\n      success: true,\n      message: \'Hostel deleted successfully\',\n    });\n  } catch (error) {\n    console.error(\'Delete hostel error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to delete hostel\',\n    });\n  }\n};\n\n// Get rooms by hostel\nexport const getRoomsByHostel = async (req: Request, res: Response) => {\n  try {\n    const { hostelId } = req.params;\n    const { isActive, type } = req.query;\n\n    let query = db.select().from(rooms).where(eq(rooms.hostelId, hostelId));\n\n    const conditions = [eq(rooms.hostelId, hostelId)];\n    if (isActive !== undefined) conditions.push(eq(rooms.isActive, isActive === \'true\'));\n    if (type) conditions.push(eq(rooms.type, type as string));\n\n    const roomsList = await db\n      .select()\n      .from(rooms)\n      .where(and(...conditions))\n      .orderBy(asc(rooms.floor), asc(rooms.roomNumber));\n\n    res.json({\n      success: true,\n      rooms: roomsList,\n    });\n  } catch (error) {\n    console.error(\'Get rooms error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch rooms\',\n    });\n  }\n};\n\n// Create room\nexport const createRoom = async (req: Request, res: Response) => {\n  try {\n    const { hostelId, roomNumber, floor, capacity, type, facilities, monthlyRent } = req.body;\n\n    const newRoom = await db\n      .insert(rooms)\n      .values({\n        hostelId,\n        roomNumber,\n        floor,\n        capacity,\n        type,\n        facilities: facilities ? JSON.stringify(facilities) : null,\n        monthlyRent,\n      })\n      .returning();\n\n    res.status(201).json({\n      success: true,\n      message: \'Room created successfully\',\n      room: newRoom[0],\n    });\n  } catch (error) {\n    console.error(\'Create room error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to create room\',\n    });\n  }\n};\n\n// Update room\nexport const updateRoom = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    if (updateData.facilities) {\n      updateData.facilities = JSON.stringify(updateData.facilities);\n    }\n\n    const updated = await db\n      .update(rooms)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(rooms.id, id))\n      .returning();\n\n    if (!updated.length) {\n      return res.status(404).json({\n        success: false,\n        message: \'Room not found\',\n      });\n    }\n\n    res.json({\n      success: true,\n      message: \'Room updated successfully\',\n      room: updated[0],\n    });\n  } catch (error) {\n    console.error(\'Update room error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to update room\',\n    });\n  }\n};\n\n// Delete room\nexport const deleteRoom = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    // Check if room has active allocations\n    const activeAllocations = await db\n      .select()\n      .from(roomAllocations)\n      .where(and(eq(roomAllocations.roomId, id), eq(roomAllocations.status, \'active\')));\n\n    if (activeAllocations.length > 0) {\n      return res.status(400).json({\n        success: false,\n        message: \'Cannot delete room with active allocations\',\n      });\n    }\n\n    await db.delete(rooms).where(eq(rooms.id, id));\n\n    res.json({\n      success: true,\n      message: \'Room deleted successfully\',\n    });\n  } catch (error) {\n    console.error(\'Delete room error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to delete room\',\n    });\n  }\n};\n\n// Allocate room to student\nexport const allocateRoom = async (req: Request, res: Response) => {\n  try {\n    const { roomId, studentId, allocationDate, bedNumber, monthlyRent, remarks } = req.body;\n    const userId = (req as any).user.id;\n\n    // Check if room exists and has capacity\n    const room = await db.select().from(rooms).where(eq(rooms.id, roomId)).limit(1);\n\n    if (!room.length) {\n      return res.status(404).json({\n        success: false,\n        message: \'Room not found\',\n      });\n    }\n\n    if (room[0].occupiedCapacity >= room[0].capacity) {\n      return res.status(400).json({\n        success: false,\n        message: \'Room is full\',\n      });\n    }\n\n    // Check if student already has active allocation\n    const existingAllocation = await db\n      .select()\n      .from(roomAllocations)\n      .where(and(eq(roomAllocations.studentId, studentId), eq(roomAllocations.status, \'active\')));\n\n    if (existingAllocation.length > 0) {\n      return res.status(400).json({\n        success: false,\n        message: \'Student already has an active room allocation\',\n      });\n    }\n\n    // Create allocation\n    const allocation = await db\n      .insert(roomAllocations)\n      .values({\n        roomId,\n        studentId,\n        allocationDate: new Date(allocationDate),\n        bedNumber,\n        monthlyRent: monthlyRent || room[0].monthlyRent,\n        remarks,\n        allocatedBy: userId,\n      })\n      .returning();\n\n    // Update room occupied capacity\n    await db\n      .update(rooms)\n      .set({\n        occupiedCapacity: room[0].occupiedCapacity + 1,\n        updatedAt: new Date(),\n      })\n      .where(eq(rooms.id, roomId));\n\n    // Update hostel occupied capacity\n    await db.execute(sql`\n      UPDATE hostels \n      SET occupied_capacity = occupied_capacity + 1,\n          updated_at = NOW()\n      WHERE id = ${room[0].hostelId}\n    `);\n\n    res.status(201).json({\n      success: true,\n      message: \'Room allocated successfully\',\n      allocation: allocation[0],\n    });\n  } catch (error) {\n    console.error(\'Allocate room error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to allocate room\',\n    });\n  }\n};\n\n// Vacate room\nexport const vacateRoom = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { vacateDate, remarks } = req.body;\n\n    const allocation = await db\n      .select()\n      .from(roomAllocations)\n      .where(eq(roomAllocations.id, id))\n      .limit(1);\n\n    if (!allocation.length) {\n      return res.status(404).json({\n        success: false,\n        message: \'Allocation not found\',\n      });\n    }\n\n    if (allocation[0].status !== \'active\') {\n      return res.status(400).json({\n        success: false,\n        message: \'Allocation is not active\',\n      });\n    }\n\n    // Update allocation\n    await db\n      .update(roomAllocations)\n      .set({\n        status: \'vacated\',\n        vacateDate: new Date(vacateDate),\n        remarks: remarks || allocation[0].remarks,\n        updatedAt: new Date(),\n      })\n      .where(eq(roomAllocations.id, id));\n\n    // Get room details\n    const room = await db.select().from(rooms).where(eq(rooms.id, allocation[0].roomId)).limit(1);\n\n    if (room.length) {\n      // Update room occupied capacity\n      await db\n        .update(rooms)\n        .set({\n          occupiedCapacity: Math.max(0, room[0].occupiedCapacity - 1),\n          updatedAt: new Date(),\n        })\n        .where(eq(rooms.id, allocation[0].roomId));\n\n      // Update hostel occupied capacity\n      await db.execute(sql`\n        UPDATE hostels \n        SET occupied_capacity = GREATEST(0, occupied_capacity - 1),\n            updated_at = NOW()\n        WHERE id = ${room[0].hostelId}\n      `);\n    }\n\n    res.json({\n      success: true,\n      message: \'Room vacated successfully\',\n    });\n  } catch (error) {\n    console.error(\'Vacate room error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to vacate room\',\n    });\n  }\n};\n\n// Get allocations with details\nexport const getAllocations = async (req: Request, res: Response) => {\n  try {\n    const { hostelId, roomId, studentId, status } = req.query;\n\n    const conditions = [];\n    if (status) conditions.push(eq(roomAllocations.status, status as string));\n    if (studentId) conditions.push(eq(roomAllocations.studentId, studentId as string));\n    if (roomId) conditions.push(eq(roomAllocations.roomId, roomId as string));\n\n    let query = db\n      .select({\n        allocation: roomAllocations,\n        room: rooms,\n        hostel: hostels,\n        student: {\n          id: sql`students.id`,\n          studentId: sql`students.student_id`,\n          firstName: sql`students.first_name`,\n          lastName: sql`students.last_name`,\n          email: sql`students.email`,\n        },\n      })\n      .from(roomAllocations)\n      .innerJoin(rooms, eq(roomAllocations.roomId, rooms.id))\n      .innerJoin(hostels, eq(rooms.hostelId, hostels.id))\n      .innerJoin(sql`students`, eq(roomAllocations.studentId, sql`students.id`));\n\n    if (hostelId) {\n      conditions.push(eq(rooms.hostelId, hostelId as string));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    const allocations = await query.orderBy(desc(roomAllocations.allocationDate));\n\n    res.json({\n      success: true,\n      allocations,\n    });\n  } catch (error) {\n    console.error(\'Get allocations error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch allocations\',\n    });\n  }\n};\n\n// Get student\'s hostel info\nexport const getStudentHostel = async (req: Request, res: Response) => {\n  try {\n    const { studentId } = req.params;\n\n    const allocation = await db\n      .select({\n        allocation: roomAllocations,\n        room: rooms,\n        hostel: hostels,\n      })\n      .from(roomAllocations)\n      .innerJoin(rooms, eq(roomAllocations.roomId, rooms.id))\n      .innerJoin(hostels, eq(rooms.hostelId, hostels.id))\n      .where(and(eq(roomAllocations.studentId, studentId), eq(roomAllocations.status, \'active\')))\n      .limit(1);\n\n    if (!allocation.length) {\n      return res.json({\n        success: true,\n        allocation: null,\n        message: \'No active hostel allocation found\',\n      });\n    }\n\n    res.json({\n      success: true,\n      allocation: allocation[0],\n    });\n  } catch (error) {\n    console.error(\'Get student hostel error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch student hostel info\',\n    });\n  }\n};\n\n// Get hostel statistics\nexport const getHostelStatistics = async (req: Request, res: Response) => {\n  try {\n    const stats = await db.execute(sql`\n      SELECT \n        COUNT(DISTINCT h.id) as total_hostels,\n        COUNT(DISTINCT r.id) as total_rooms,\n        SUM(h.total_capacity) as total_capacity,\n        SUM(h.occupied_capacity) as occupied_capacity,\n        COUNT(DISTINCT CASE WHEN ra.status = \'active\' THEN ra.id END) as active_allocations\n      FROM hostels h\n      LEFT JOIN rooms r ON h.id = r.hostel_id\n      LEFT JOIN room_allocations ra ON r.id = ra.room_id\n      WHERE h.is_active = true\n    `);\n\n    res.json({\n      success: true,\n      statistics: stats.rows[0],\n    });\n  } catch (error) {\n    console.error(\'Get statistics error:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch statistics\',\n    });\n  }\n};\n</create-file>\n</function_calls>'}