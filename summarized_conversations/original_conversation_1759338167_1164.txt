{'role': 'assistant', 'content': '## Step 8: Create User Management Page (Frontend)\n\n<function_calls>\n<create-file file_path="client/src/pages/Users.tsx">\nimport { useState } from \'react\';\nimport { useQuery, useMutation, useQueryClient } from \'@tanstack/react-query\';\nimport { apiClient } from \'@/lib/api\';\nimport { User, UserRole } from \'@/types\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \'@/components/ui/table\';\nimport { Badge } from \'@/components/ui/badge\';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \'@/components/ui/dialog\';\nimport { Label } from \'@/components/ui/label\';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \'@/components/ui/select\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { Plus, Search, Edit, Trash2, UserPlus } from \'lucide-react\';\nimport { useForm } from \'react-hook-form\';\nimport { zodResolver } from \'@hookform/resolvers/zod\';\nimport { z } from \'zod\';\n\nconst createUserSchema = z.object({\n  email: z.string().email(\'Invalid email address\'),\n  password: z.string().min(8, \'Password must be at least 8 characters\'),\n  firstName: z.string().min(1, \'First name is required\'),\n  lastName: z.string().min(1, \'Last name is required\'),\n  role: z.enum([\'student\', \'teacher\', \'guardian\', \'admin\', \'superadmin\', \'accountant\', \'hostel_manager\']),\n  phone: z.string().optional(),\n});\n\ntype CreateUserFormData = z.infer<typeof createUserSchema>;\n\nexport default function Users() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [roleFilter, setRoleFilter] = useState(\'\');\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [page, setPage] = useState(1);\n  const limit = 10;\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n    watch,\n  } = useForm<CreateUserFormData>({\n    resolver: zodResolver(createUserSchema),\n  });\n\n  const selectedRole = watch(\'role\');\n\n  // Fetch users\n  const { data: usersData, isLoading } = useQuery({\n    queryKey: [\'users\', page, searchQuery, roleFilter],\n    queryFn: async () => {\n      const response = await apiClient.get(\'/users\', {\n        page,\n        limit,\n        search: searchQuery,\n        role: roleFilter,\n      });\n      return response.data;\n    },\n  });\n\n  // Fetch user stats\n  const { data: statsData } = useQuery({\n    queryKey: [\'user-stats\'],\n    queryFn: async () => {\n      const response = await apiClient.get(\'/users/stats\');\n      return response.data;\n    },\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserFormData) => {\n      return await apiClient.post(\'/users\', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\'users\'] });\n      queryClient.invalidateQueries({ queryKey: [\'user-stats\'] });\n      toast({\n        title: \'Success\',\n        description: \'User created successfully\',\n      });\n      setIsCreateDialogOpen(false);\n      reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \'Error\',\n        description: error.response?.data?.error || \'Failed to create user\',\n        variant: \'destructive\',\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateUserFormData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \'superadmin\':\n        return \'destructive\';\n      case \'admin\':\n        return \'default\';\n      case \'teacher\':\n        return \'secondary\';\n      case \'student\':\n        return \'outline\';\n      default:\n        return \'outline\';\n    }\n  };\n\n  const stats = statsData || { total: 0, active: 0, inactive: 0, byRole: {} };\n  const users = usersData?.users || [];\n  const pagination = usersData?.pagination || { page: 1, totalPages: 1, total: 0 };\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">User Management</h1>\n          <p className="text-muted-foreground mt-2">\n            Manage all users in the system\n          </p>\n        </div>\n        <Button onClick={() => setIsCreateDialogOpen(true)}>\n          <Plus className="h-4 w-4 mr-2" />\n          Add User\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className="grid gap-4 md:grid-cols-4">\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Total Users</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{stats.total}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Active Users</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">{stats.active}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Teachers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{stats.byRole?.teacher || 0}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Students</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{stats.byRole?.student || 0}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Users List</CardTitle>\n          <CardDescription>View and manage all system users</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="flex items-center space-x-4 mb-4">\n            <div className="flex-1 relative">\n              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />\n              <Input\n                placeholder="Search by name or email..."\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className="pl-10"\n              />\n            </div>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className="w-[180px]">\n                <SelectValue placeholder="Filter by role" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value="">All Roles</SelectItem>\n                <SelectItem value="superadmin">SuperAdmin</SelectItem>\n                <SelectItem value="admin">Admin</SelectItem>\n                <SelectItem value="teacher">Teacher</SelectItem>\n                <SelectItem value="student">Student</SelectItem>\n                <SelectItem value="guardian">Guardian</SelectItem>\n                <SelectItem value="accountant">Accountant</SelectItem>\n                <SelectItem value="hostel_manager">Hostel Manager</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Users Table */}\n          <div className="border rounded-lg">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Phone</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className="text-right">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className="text-center py-8">\n                      Loading...\n                    </TableCell>\n                  </TableRow>\n                ) : users.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className="text-center py-8">\n                      No users found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  users.map((user: any) => (\n                    <TableRow key={user.id}>\n                      <TableCell className="font-medium">\n                        {user.firstName} {user.lastName}\n                      </TableCell>\n                      <TableCell>{user.email}</TableCell>\n                      <TableCell>\n                        <Badge variant={getRoleBadgeVariant(user.role)} className="capitalize">\n                          {user.role}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{user.phone || \'-\'}</TableCell>\n                      <TableCell>\n                        <Badge variant={user.isActive ? \'success\' : \'outline\'}>\n                          {user.isActive ? \'Active\' : \'Inactive\'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className="text-right">\n                        <div className="flex items-center justify-end space-x-2">\n                          <Button variant="ghost" size="icon">\n                            <Edit className="h-4 w-4" />\n                          </Button>\n                          <Button variant="ghost" size="icon">\n                            <Trash2 className="h-4 w-4 text-red-600" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className="flex items-center justify-between mt-4">\n            <p className="text-sm text-muted-foreground">\n              Showing {users.length} of {pagination.total} users\n            </p>\n            <div className="flex items-center space-x-2">\n              <Button\n                variant="outline"\n                size="sm"\n                onClick={() => setPage(page - 1)}\n                disabled={page === 1}\n              >\n                Previous\n              </Button>\n              <span className="text-sm">\n                Page {pagination.page} of {pagination.totalPages}\n              </span>\n              <Button\n                variant="outline"\n                size="sm"\n                onClick={() => setPage(page + 1)}\n                disabled={page === pagination.totalPages}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Create User Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className="max-w-md">\n          <DialogHeader>\n            <DialogTitle>Create New User</DialogTitle>\n            <DialogDescription>\n              Add a new user to the system. All fields are required.\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className="space-y-4 py-4">\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="firstName">First Name</Label>\n                  <Input\n                    id="firstName"\n                    {...register(\'firstName\')}\n                    placeholder="John"\n                  />\n                  {errors.firstName && (\n                    <p className="text-xs text-red-600">{errors.firstName.message}</p>\n                  )}\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="lastName">Last Name</Label>\n                  <Input\n                    id="lastName"\n                    {...register(\'lastName\')}\n                    placeholder="Doe"\n                  />\n                  {errors.lastName && (\n                    <p className="text-xs text-red-600">{errors.lastName.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="email">Email</Label>\n                <Input\n                  id="email"\n                  type="email"\n                  {...register(\'email\')}\n                  placeholder="john.doe@example.com"\n                />\n                {errors.email && (\n                  <p className="text-xs text-red-600">{errors.email.message}</p>\n                )}\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="password">Password</Label>\n                <Input\n                  id="password"\n                  type="password"\n                  {...register(\'password\')}\n                  placeholder="••••••••"\n                />\n                {errors.password && (\n                  <p className="text-xs text-red-600">{errors.password.message}</p>\n                )}\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="role">Role</Label>\n                <Select\n                  value={selectedRole}\n                  onValueChange={(value) => setValue(\'role\', value as UserRole)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder="Select role" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value="student">Student</SelectItem>\n                    <SelectItem value="teacher">Teacher</SelectItem>\n                    <SelectItem value="guardian">Guardian</SelectItem>\n                    <SelectItem value="accountant">Accountant</SelectItem>\n                    <SelectItem value="hostel_manager">Hostel Manager</SelectItem>\n                    <SelectItem value="admin">Admin</SelectItem>\n                    <SelectItem value="superadmin">SuperAdmin</SelectItem>\n                  </SelectContent>\n                </Select>\n                {errors.role && (\n                  <p className="text-xs text-red-600">{errors.role.message}</p>\n                )}\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="phone">Phone (Optional)</Label>\n                <Input\n                  id="phone"\n                  {...register(\'phone\')}\n                  placeholder="+1234567890"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type="button"\n                variant="outline"\n                onClick={() => {\n                  setIsCreateDialogOpen(false);\n                  reset();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button type="submit" disabled={createUserMutation.isPending}>\n                {createUserMutation.isPending ? \'Creating...\' : \'Create User\'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}