{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="client/src/i18n/index.ts">\nimport en from \'./locales/en.json\';\nimport bn from \'./locales/bn.json\';\nimport ar from \'./locales/ar.json\';\n\nexport type Language = \'en\' | \'bn\' | \'ar\';\n\nexport interface Translations {\n  [key: string]: string | Translations;\n}\n\nconst translations: Record<Language, Translations> = {\n  en,\n  bn,\n  ar,\n};\n\nlet currentLanguage: Language = \'en\';\n\nexport function setLanguage(lang: Language) {\n  currentLanguage = lang;\n  localStorage.setItem(\'language\', lang);\n  \n  // Set document direction for RTL languages\n  if (lang === \'ar\') {\n    document.documentElement.setAttribute(\'dir\', \'rtl\');\n  } else {\n    document.documentElement.setAttribute(\'dir\', \'ltr\');\n  }\n}\n\nexport function getLanguage(): Language {\n  const stored = localStorage.getItem(\'language\') as Language;\n  return stored || \'en\';\n}\n\nexport function t(key: string, params?: Record<string, string>): string {\n  const keys = key.split(\'.\');\n  let value: any = translations[currentLanguage];\n\n  for (const k of keys) {\n    if (value && typeof value === \'object\') {\n      value = value[k];\n    } else {\n      return key; // Return key if translation not found\n    }\n  }\n\n  if (typeof value !== \'string\') {\n    return key;\n  }\n\n  // Replace parameters\n  if (params) {\n    Object.keys(params).forEach((param) => {\n      value = value.replace(`{${param}}`, params[param]);\n    });\n  }\n\n  return value;\n}\n\n// Initialize language on load\nconst savedLang = getLanguage();\nsetLanguage(savedLang);\n</create-file>\n</function_calls>'}