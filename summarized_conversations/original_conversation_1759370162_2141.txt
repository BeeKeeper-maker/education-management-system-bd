{'role': 'assistant', 'content': 'Excellent! Now let\'s build the **Book Management Page**:\n\n<function_calls>\n<create-file file_path="client/src/pages/BookManagement.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \'@/components/ui/dialog\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { Plus, Edit, Trash2, Search, BookOpen, Library, TrendingUp } from \'lucide-react\';\n\ninterface Book {\n  id: string;\n  title: string;\n  author: string;\n  isbn: string;\n  publisher?: string;\n  publicationYear?: number;\n  category: string;\n  language: string;\n  edition?: string;\n  pages?: number;\n  totalQuantity: number;\n  availableQuantity: number;\n  shelfLocation?: string;\n  description?: string;\n  price: number;\n  isActive: boolean;\n}\n\ninterface Category {\n  category: string;\n  book_count: number;\n}\n\nexport default function BookManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const [books, setBooks] = useState<Book[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [statistics, setStatistics] = useState<any>(null);\n\n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [filterCategory, setFilterCategory] = useState(\'all\');\n  const [filterLanguage, setFilterLanguage] = useState(\'all\');\n\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingBook, setEditingBook] = useState<Book | null>(null);\n\n  const [bookForm, setBookForm] = useState({\n    title: \'\',\n    author: \'\',\n    isbn: \'\',\n    publisher: \'\',\n    publicationYear: \'\',\n    category: \'\',\n    language: \'English\',\n    edition: \'\',\n    pages: \'\',\n    totalQuantity: \'\',\n    shelfLocation: \'\',\n    description: \'\',\n    price: \'\',\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setIsLoading(true);\n    try {\n      const [booksRes, categoriesRes, statsRes] = await Promise.all([\n        fetch(\'/api/library/books\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(\'/api/library/books/categories\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(\'/api/library/books/statistics\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n      ]);\n\n      if (!booksRes.ok) throw new Error(\'Failed to load books\');\n\n      const booksData = await booksRes.json();\n      const categoriesData = categoriesRes.ok ? await categoriesRes.json() : { categories: [] };\n      const statsData = statsRes.ok ? await statsRes.json() : null;\n\n      setBooks(booksData.books || []);\n      setCategories(categoriesData.categories || []);\n      setStatistics(statsData?.statistics);\n    } catch (error) {\n      console.error(\'Load data error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load library data\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSaveBook = async () => {\n    if (!bookForm.title || !bookForm.author || !bookForm.category || !bookForm.totalQuantity) {\n      toast({\n        title: \'Validation Error\',\n        description: \'Please fill in all required fields\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const url = editingBook ? `/api/library/books/${editingBook.id}` : \'/api/library/books\';\n      const method = editingBook ? \'PUT\' : \'POST\';\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          ...bookForm,\n          publicationYear: bookForm.publicationYear ? parseInt(bookForm.publicationYear) : undefined,\n          pages: bookForm.pages ? parseInt(bookForm.pages) : undefined,\n          totalQuantity: parseInt(bookForm.totalQuantity),\n          price: parseInt(bookForm.price) || 0,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to save book\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: `Book ${editingBook ? \'updated\' : \'added\'} successfully`,\n      });\n\n      setIsDialogOpen(false);\n      resetForm();\n      loadData();\n    } catch (error: any) {\n      console.error(\'Save book error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to save book\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleDeleteBook = async (bookId: string) => {\n    if (!confirm(\'Are you sure you want to delete this book?\')) return;\n\n    try {\n      const response = await fetch(`/api/library/books/${bookId}`, {\n        method: \'DELETE\',\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to delete book\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Book deleted successfully\',\n      });\n\n      loadData();\n    } catch (error: any) {\n      console.error(\'Delete book error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to delete book\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const openEditBook = (book: Book) => {\n    setEditingBook(book);\n    setBookForm({\n      title: book.title,\n      author: book.author,\n      isbn: book.isbn || \'\',\n      publisher: book.publisher || \'\',\n      publicationYear: book.publicationYear?.toString() || \'\',\n      category: book.category,\n      language: book.language,\n      edition: book.edition || \'\',\n      pages: book.pages?.toString() || \'\',\n      totalQuantity: book.totalQuantity.toString(),\n      shelfLocation: book.shelfLocation || \'\',\n      description: book.description || \'\',\n      price: book.price.toString(),\n    });\n    setIsDialogOpen(true);\n  };\n\n  const resetForm = () => {\n    setBookForm({\n      title: \'\',\n      author: \'\',\n      isbn: \'\',\n      publisher: \'\',\n      publicationYear: \'\',\n      category: \'\',\n      language: \'English\',\n      edition: \'\',\n      pages: \'\',\n      totalQuantity: \'\',\n      shelfLocation: \'\',\n      description: \'\',\n      price: \'\',\n    });\n    setEditingBook(null);\n  };\n\n  // Filter books\n  const filteredBooks = books.filter((book) => {\n    if (filterCategory !== \'all\' && book.category !== filterCategory) return false;\n    if (filterLanguage !== \'all\' && book.language !== filterLanguage) return false;\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      return (\n        book.title.toLowerCase().includes(query) ||\n        book.author.toLowerCase().includes(query) ||\n        book.isbn?.toLowerCase().includes(query) ||\n        book.category.toLowerCase().includes(query)\n      );\n    }\n    return true;\n  });\n\n  if (isLoading) {\n    return (\n      <div className="container mx-auto p-6">\n        <div className="flex items-center justify-center h-96">\n          <div className="text-center">\n            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n            <p className="text-muted-foreground">Loading library catalog...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Book Management</h1>\n          <p className="text-muted-foreground">Manage library catalog</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className="h-4 w-4 mr-2" />\n              Add Book\n            </Button>\n          </DialogTrigger>\n          <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">\n            <DialogHeader>\n              <DialogTitle>{editingBook ? \'Edit\' : \'Add\'} Book</DialogTitle>\n              <DialogDescription>Enter book details</DialogDescription>\n            </DialogHeader>\n            <div className="space-y-4">\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="title">Title *</Label>\n                  <Input\n                    id="title"\n                    value={bookForm.title}\n                    onChange={(e) => setBookForm({ ...bookForm, title: e.target.value })}\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="author">Author *</Label>\n                  <Input\n                    id="author"\n                    value={bookForm.author}\n                    onChange={(e) => setBookForm({ ...bookForm, author: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="isbn">ISBN</Label>\n                  <Input\n                    id="isbn"\n                    value={bookForm.isbn}\n                    onChange={(e) => setBookForm({ ...bookForm, isbn: e.target.value })}\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="publisher">Publisher</Label>\n                  <Input\n                    id="publisher"\n                    value={bookForm.publisher}\n                    onChange={(e) => setBookForm({ ...bookForm, publisher: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className="grid grid-cols-3 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="category">Category *</Label>\n                  <Input\n                    id="category"\n                    value={bookForm.category}\n                    onChange={(e) => setBookForm({ ...bookForm, category: e.target.value })}\n                    placeholder="e.g., Fiction"\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="language">Language</Label>\n                  <Select\n                    value={bookForm.language}\n                    onValueChange={(value) => setBookForm({ ...bookForm, language: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value="English">English</SelectItem>\n                      <SelectItem value="Spanish">Spanish</SelectItem>\n                      <SelectItem value="French">French</SelectItem>\n                      <SelectItem value="German">German</SelectItem>\n                      <SelectItem value="Other">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="publicationYear">Publication Year</Label>\n                  <Input\n                    id="publicationYear"\n                    type="number"\n                    value={bookForm.publicationYear}\n                    onChange={(e) => setBookForm({ ...bookForm, publicationYear: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className="grid grid-cols-3 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="edition">Edition</Label>\n                  <Input\n                    id="edition"\n                    value={bookForm.edition}\n                    onChange={(e) => setBookForm({ ...bookForm, edition: e.target.value })}\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="pages">Pages</Label>\n                  <Input\n                    id="pages"\n                    type="number"\n                    value={bookForm.pages}\n                    onChange={(e) => setBookForm({ ...bookForm, pages: e.target.value })}\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="totalQuantity">Total Quantity *</Label>\n                  <Input\n                    id="totalQuantity"\n                    type="number"\n                    value={bookForm.totalQuantity}\n                    onChange={(e) => setBookForm({ ...bookForm, totalQuantity: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="shelfLocation">Shelf Location</Label>\n                  <Input\n                    id="shelfLocation"\n                    value={bookForm.shelfLocation}\n                    onChange={(e) => setBookForm({ ...bookForm, shelfLocation: e.target.value })}\n                    placeholder="e.g., A-101"\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="price">Price</Label>\n                  <Input\n                    id="price"\n                    type="number"\n                    value={bookForm.price}\n                    onChange={(e) => setBookForm({ ...bookForm, price: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="description">Description</Label>\n                <Input\n                  id="description"\n                  value={bookForm.description}\n                  onChange={(e) => setBookForm({ ...bookForm, description: e.target.value })}\n                />\n              </div>\n\n              <div className="flex gap-2 pt-4">\n                <Button onClick={handleSaveBook} disabled={isSubmitting} className="flex-1">\n                  {isSubmitting ? \'Saving...\' : editingBook ? \'Update\' : \'Add\'} Book\n                </Button>\n                <Button\n                  variant="outline"\n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    resetForm();\n                  }}\n                  disabled={isSubmitting}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics */}\n      {statistics && (\n        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Total Books</CardTitle>\n              <Library className="h-4 w-4 text-muted-foreground" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">{statistics.total_books || 0}</div>\n              <p className="text-xs text-muted-foreground">{statistics.total_copies || 0} copies</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Available</CardTitle>\n              <BookOpen className="h-4 w-4 text-green-600" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold text-green-600">\n                {statistics.available_copies || 0}\n              </div>\n              <p className="text-xs text-muted-foreground">Copies available</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Issued</CardTitle>\n              <TrendingUp className="h-4 w-4 text-orange-600" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold text-orange-600">\n                {statistics.issued_books || 0}\n              </div>\n              <p className="text-xs text-muted-foreground">Currently issued</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Categories</CardTitle>\n              <Library className="h-4 w-4 text-muted-foreground" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">{categories.length}</div>\n              <p className="text-xs text-muted-foreground">Book categories</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">\n            <div>\n              <Label htmlFor="search">Search</Label>\n              <div className="relative">\n                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />\n                <Input\n                  id="search"\n                  placeholder="Search books..."\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className="pl-8"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor="category">Category</Label>\n              <Select value={filterCategory} onValueChange={setFilterCategory}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value="all">All Categories</SelectItem>\n                  {categories.map((cat) => (\n                    <SelectItem key={cat.category} value={cat.category}>\n                      {cat.category} ({cat.book_count})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor="language">Language</Label>\n              <Select value={filterLanguage} onValueChange={setFilterLanguage}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value="all">All Languages</SelectItem>\n                  <SelectItem value="English">English</SelectItem>\n                  <SelectItem value="Spanish">Spanish</SelectItem>\n                  <SelectItem value="French">French</SelectItem>\n                  <SelectItem value="German">German</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <Button\n            variant="outline"\n            size="sm"\n            className="mt-4"\n            onClick={() => {\n              setSearchQuery(\'\');\n              setFilterCategory(\'all\');\n              setFilterLanguage(\'all\');\n            }}\n          >\n            Clear Filters\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Books List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Library Catalog</CardTitle>\n          <CardDescription>\n            Showing {filteredBooks.length} of {books.length} books\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {filteredBooks.length === 0 ? (\n            <div className="text-center py-12 text-muted-foreground">\n              <BookOpen className="h-16 w-16 mx-auto mb-4 opacity-50" />\n              <p className="font-medium">No books found</p>\n              <p className="text-sm">Try adjusting your filters or add a new book</p>\n            </div>\n          ) : (\n            <div className="overflow-x-auto">\n              <table className="w-full text-sm">\n                <thead>\n                  <tr className="border-b">\n                    <th className="text-left p-2">Title</th>\n                    <th className="text-left p-2">Author</th>\n                    <th className="text-left p-2">Category</th>\n                    <th className="text-left p-2">ISBN</th>\n                    <th className="text-center p-2">Total</th>\n                    <th className="text-center p-2">Available</th>\n                    <th className="text-left p-2">Location</th>\n                    <th className="text-center p-2">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredBooks.map((book) => (\n                    <tr key={book.id} className="border-b hover:bg-muted/50">\n                      <td className="p-2 font-medium">{book.title}</td>\n                      <td className="p-2">{book.author}</td>\n                      <td className="p-2">\n                        <Badge variant="outline">{book.category}</Badge>\n                      </td>\n                      <td className="p-2 text-muted-foreground">{book.isbn || \'-\'}</td>\n                      <td className="text-center p-2">{book.totalQuantity}</td>\n                      <td className="text-center p-2">\n                        <Badge\n                          variant={book.availableQuantity > 0 ? \'default\' : \'destructive\'}\n                        >\n                          {book.availableQuantity}\n                        </Badge>\n                      </td>\n                      <td className="p-2">{book.shelfLocation || \'-\'}</td>\n                      <td className="text-center p-2">\n                        <div className="flex items-center justify-center gap-2">\n                          <Button variant="ghost" size="sm" onClick={() => openEditBook(book)}>\n                            <Edit className="h-4 w-4" />\n                          </Button>\n                          <Button\n                            variant="ghost"\n                            size="sm"\n                            onClick={() => handleDeleteBook(book.id)}\n                          >\n                            <Trash2 className="h-4 w-4 text-red-600" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}