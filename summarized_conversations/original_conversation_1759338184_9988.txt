{'role': 'user', 'content': 'The Dashboard and User Management system is fantastic and exceeds expectations. The application feels truly professional now.\n\nLet\'s proceed with the next core module from our EduPro roadmap: **Comprehensive Student Management**.\n\nOur goal is to build the complete lifecycle for managing students within the institution.\n\nHere\'s the high-level plan:\n1.  **Student Admission Form:**\n    a. Create a new page, "Student Admission", accessible from the sidebar for `Admin` and `SuperAdmin`.\n    b. Design a beautiful, multi-step or well-organized form using Shadcn UI components. The form should capture all necessary student information as defined in our database schema (`students.ts` and related tables). This includes:\n        *   Personal Details (Name, DoB, Gender, etc.)\n        *   Guardian Information\n        *   Academic Information (Class, Section to enroll in)\n        *   Contact Information\n    c. Use `react-hook-form` and `zod` for robust validation.\n    d. Upon successful submission, a new student should be created in the `users` table with the \'student\' role, and their detailed information should be saved in the `students` table.\n\n2.  **All Students List Page:**\n    a. Create a new page, "Students List", to display all students in a data table.\n    b. The table should be powerful, featuring **searching** (by name, student ID), **filtering** (by class, section), and **pagination**.\n    c. Each row should have action buttons (e.g., View Details, Edit, Deactivate).\n\n3.  **Student Profile/Details Page:**\n    a. Clicking "View Details" on a student should navigate to a dedicated profile page for that student (`/students/[studentId]`).\n    b. This page should provide a comprehensive 360-degree view of the student, including their personal details, academic history, attendance summary, and fee status. Design it with clear sections or tabs.\n\n4.  **Backend API Support:**\n    a. Develop all necessary backend APIs (routes and controllers) to support these features: creating a new student, fetching a list of all students (with search/filter), and fetching the details of a single student.\n    b. Ensure all these new API endpoints are protected and only accessible by authorized roles (`Admin`, `SuperAdmin`, and in some cases, `Teacher` for read-only access).\n\nPlease implement this entire module following our established high standards of code quality, UI design, and security.'}