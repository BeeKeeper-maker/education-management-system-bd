{'role': 'user', 'content': 'This is a phenomenal achievement! The "Core Academic Operations" phase is robust and well-documented. We are ready to complete the final UI pieces and immediately proceed to the next major phase of EduPro in a single, powerful session.\n\nYour mission is twofold: first, to build the remaining masterpiece UIs for the Examination System, and then, to seamlessly transition into building the entire **"Financial Management"** module.\n\n---\n\n### **Part 1: Complete the Examination System UI**\n\nUsing the powerful backend APIs you\'ve already created, build the following user interfaces with a "masterpiece" philosophy:\n\n1.  **The "Excel-Like" Marks Entry Grid:**\n    *   Create a dedicated "Marks Entry" page. It must function like a spreadsheet, allowing teachers to navigate with keyboard arrows and Tab. Implement real-time, background saving and validation as marks are entered. This is a top-priority feature.\n\n2.  **The Visual Exam Scheduler:**\n    *   Enhance the "Exam Management" page with a simple, calendar-based interface for scheduling each subject\'s exam date, time, and room.\n\n3.  **The "Beautiful & Insightful" Digital Report Card:**\n    *   Design a visually stunning, printable report card component. Use charts to visualize performance. This component must integrate into the `StudentProfile.tsx` page, fetching and displaying all relevant data (grades, GPA, merit position, comments).\n\n---\n\n### **Part 2: Build the Comprehensive "Financial Management" Module**\n\nAs soon as the Examination UI is complete, your next task is to build the entire financial module from the ground up (database, backend, and frontend).\n\n**Vision:** A complete, secure, and easy-to-use system for managing all financial activities of the institution.\n\n**Implementation Plan:**\n1.  **Fee Structure Management (Admin):**\n    *   Create an interface to define various fee categories (e.g., Tuition Fee, Exam Fee, Admission Fee).\n    *   Allow admins to create fee templates and assign them to different classes.\n\n2.  **Fee Collection (Admin/Accountant):**\n    *   A powerful page to collect fees from students. It should allow for partial payments, waivers, and discounts.\n    *   Automatically generate and print/download PDF receipts for each payment.\n\n3.  **Student & Guardian Fee View:**\n    *   On the Student/Guardian portal, display a clear history of all payments made and a list of outstanding dues.\n\n4.  **Expense Management (Admin):**\n    *   A simple interface to record all institutional expenses under different categories (e.g., Salaries, Utilities, Maintenance).\n\n5.  **Financial Reporting (Admin):**\n    *   A dashboard with key financial reports:\n        *   Daily/Monthly Fee Collection Report.\n        *   Outstanding Dues Report (filterable by class/section).\n        *   Income vs. Expense Statement.\n\n---\n\n### **Critical Guardrails & Technical Constraints (Non-Negotiable)**\n\nTo ensure consistency and prevent any conflicts, you MUST strictly adhere to these rules for ALL parts of this mission:\n\n1.  **Technological Consistency:** Continue using our existing tech stack: **Vite + React + TypeScript** (Frontend), **Node.js + Express.js** (Backend), **Drizzle ORM** with **PostgreSQL** (Database).\n2.  **Database Integrity:** Any new tables (for fees, expenses, etc.) must be created within the existing Drizzle schema, maintaining proper relationships with tables like `students` and `classes`.\n3.  **Code Organization:** Maintain the established modular folder structure.\n4.  **UI/UX Consistency:** All new interfaces MUST use our **Shadcn UI** component library and follow the established design language.\n5.  **End-to-End Implementation:** Implement the complete flow for all new features: frontend UI, backend API, and database interactions.\n\n---\n\n**Final Instruction:**\n\nYour task is to bring this entire vision to life. First, complete the Examination UI, and then, without stopping, build the complete Financial Management module. I trust your expertise to deliver a fully functional, integrated, and polished result. Begin implementation now.'}