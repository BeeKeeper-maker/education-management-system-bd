{'role': 'assistant', 'content': 'Great! Dependencies installed successfully. Now let me create a Docker Compose file for local PostgreSQL setup:\n\n<function_calls>\n<create-file file_path="docker-compose.yml">\nversion: \'3.8\'\n\nservices:\n  # PostgreSQL Database\n  postgres:\n    image: postgres:14-alpine\n    container_name: edupro_postgres\n    restart: unless-stopped\n    environment:\n      POSTGRES_USER: edupro\n      POSTGRES_PASSWORD: edupro123\n      POSTGRES_DB: edupro\n    ports:\n      - "5432:5432"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U edupro"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  # Application (for production deployment)\n  app:\n    build: .\n    container_name: edupro_app\n    restart: unless-stopped\n    ports:\n      - "3000:3000"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://edupro:edupro123@postgres:5432/edupro\n      - JWT_SECRET=production-jwt-secret-change-this\n      - SESSION_SECRET=production-session-secret-change-this\n    depends_on:\n      postgres:\n        condition: service_healthy\n    profiles:\n      - production\n\nvolumes:\n  postgres_data:\n</create-file>\n</function_calls>'}