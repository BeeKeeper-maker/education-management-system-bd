{'role': 'assistant', 'content': 'Perfect! Now let\'s start with **MODULE 1: HOSTEL MANAGEMENT**. First, I\'ll create the database schema:\n\n<function_calls>\n<create-file file_path="server/src/db/schema/hostel.ts">\nimport { pgTable, uuid, varchar, integer, timestamp, text, boolean } from \'drizzle-orm/pg-core\';\nimport { relations } from \'drizzle-orm\';\nimport { students } from \'./students\';\nimport { users } from \'./users\';\n\n// Hostels table\nexport const hostels = pgTable(\'hostels\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  name: varchar(\'name\', { length: 100 }).notNull(),\n  type: varchar(\'type\', { length: 20 }).notNull(), // \'boys\', \'girls\', \'mixed\'\n  totalCapacity: integer(\'total_capacity\').notNull(),\n  occupiedCapacity: integer(\'occupied_capacity\').default(0).notNull(),\n  address: text(\'address\'),\n  wardenId: uuid(\'warden_id\').references(() => users.id),\n  wardenName: varchar(\'warden_name\', { length: 100 }),\n  wardenPhone: varchar(\'warden_phone\', { length: 20 }),\n  facilities: text(\'facilities\'), // JSON string of facilities\n  description: text(\'description\'),\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Rooms table\nexport const rooms = pgTable(\'rooms\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  hostelId: uuid(\'hostel_id\').references(() => hostels.id, { onDelete: \'cascade\' }).notNull(),\n  roomNumber: varchar(\'room_number\', { length: 20 }).notNull(),\n  floor: integer(\'floor\').notNull(),\n  capacity: integer(\'capacity\').notNull(),\n  occupiedCapacity: integer(\'occupied_capacity\').default(0).notNull(),\n  type: varchar(\'type\', { length: 20 }).notNull(), // \'single\', \'double\', \'triple\', \'dormitory\'\n  facilities: text(\'facilities\'), // JSON string of facilities (AC, attached bathroom, etc.)\n  monthlyRent: integer(\'monthly_rent\').default(0),\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Room Allocations table\nexport const roomAllocations = pgTable(\'room_allocations\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  roomId: uuid(\'room_id\').references(() => rooms.id, { onDelete: \'cascade\' }).notNull(),\n  studentId: uuid(\'student_id\').references(() => students.id, { onDelete: \'cascade\' }).notNull(),\n  allocationDate: timestamp(\'allocation_date\').notNull(),\n  vacateDate: timestamp(\'vacate_date\'),\n  status: varchar(\'status\', { length: 20 }).default(\'active\').notNull(), // \'active\', \'vacated\', \'transferred\'\n  bedNumber: varchar(\'bed_number\', { length: 10 }),\n  monthlyRent: integer(\'monthly_rent\').default(0),\n  remarks: text(\'remarks\'),\n  allocatedBy: uuid(\'allocated_by\').references(() => users.id),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Relations\nexport const hostelsRelations = relations(hostels, ({ many, one }) => ({\n  rooms: many(rooms),\n  warden: one(users, {\n    fields: [hostels.wardenId],\n    references: [users.id],\n  }),\n}));\n\nexport const roomsRelations = relations(rooms, ({ one, many }) => ({\n  hostel: one(hostels, {\n    fields: [rooms.hostelId],\n    references: [hostels.id],\n  }),\n  allocations: many(roomAllocations),\n}));\n\nexport const roomAllocationsRelations = relations(roomAllocations, ({ one }) => ({\n  room: one(rooms, {\n    fields: [roomAllocations.roomId],\n    references: [rooms.id],\n  }),\n  student: one(students, {\n    fields: [roomAllocations.studentId],\n    references: [students.id],\n  }),\n  allocatedByUser: one(users, {\n    fields: [roomAllocations.allocatedBy],\n    references: [users.id],\n  }),\n}));\n</create-file>\n</function_calls>'}