{'role': 'assistant', 'content': 'Excellent! All the base data is seeded. Now let me start building the backend controllers. I\'ll begin with the Attendance module:\n\n<function_calls>\n<create-file file_path="server/src/controllers/attendance.controller.ts">\nimport { Request, Response } from \'express\';\nimport { db } from \'../db\';\nimport { attendance, classAttendance, students, enrollments, users } from \'../db/schema\';\nimport { eq, and, gte, lte, desc, sql } from \'drizzle-orm\';\n\n// Mark attendance for a class\nexport const markAttendance = async (req: Request, res: Response) => {\n  try {\n    const { classId, sectionId, date, attendanceRecords } = req.body;\n    const markedBy = req.user!.id;\n\n    // Validate required fields\n    if (!classId || !sectionId || !date || !attendanceRecords || !Array.isArray(attendanceRecords)) {\n      return res.status(400).json({ \n        success: false, \n        message: \'Missing required fields\' \n      });\n    }\n\n    // Check if attendance already exists for this date\n    const existingAttendance = await db\n      .select()\n      .from(classAttendance)\n      .where(\n        and(\n          eq(classAttendance.classId, classId),\n          eq(classAttendance.sectionId, sectionId),\n          eq(classAttendance.date, date)\n        )\n      );\n\n    if (existingAttendance.length > 0 && existingAttendance[0].isFinalized) {\n      return res.status(400).json({\n        success: false,\n        message: \'Attendance for this date is already finalized\'\n      });\n    }\n\n    // Delete existing attendance records for this date if updating\n    if (existingAttendance.length > 0) {\n      await db\n        .delete(attendance)\n        .where(\n          and(\n            eq(attendance.classId, classId),\n            eq(attendance.sectionId, sectionId),\n            eq(attendance.date, date)\n          )\n        );\n    }\n\n    // Insert new attendance records\n    const attendanceData = attendanceRecords.map((record: any) => ({\n      studentId: record.studentId,\n      classId,\n      sectionId,\n      date,\n      status: record.status || \'present\',\n      remarks: record.remarks || null,\n      markedBy,\n    }));\n\n    await db.insert(attendance).values(attendanceData);\n\n    // Calculate statistics\n    const presentCount = attendanceRecords.filter((r: any) => r.status === \'present\').length;\n    const absentCount = attendanceRecords.filter((r: any) => r.status === \'absent\').length;\n    const lateCount = attendanceRecords.filter((r: any) => r.status === \'late\').length;\n    const excusedCount = attendanceRecords.filter((r: any) => r.status === \'excused\').length;\n\n    // Update or create class attendance summary\n    if (existingAttendance.length > 0) {\n      await db\n        .update(classAttendance)\n        .set({\n          totalStudents: attendanceRecords.length,\n          presentCount,\n          absentCount,\n          lateCount,\n          excusedCount,\n          markedBy,\n          updatedAt: new Date(),\n        })\n        .where(eq(classAttendance.id, existingAttendance[0].id));\n    } else {\n      await db.insert(classAttendance).values({\n        classId,\n        sectionId,\n        date,\n        totalStudents: attendanceRecords.length,\n        presentCount,\n        absentCount,\n        lateCount,\n        excusedCount,\n        markedBy,\n        isFinalized: false,\n      });\n    }\n\n    res.status(200).json({\n      success: true,\n      message: \'Attendance marked successfully\',\n      data: {\n        totalStudents: attendanceRecords.length,\n        presentCount,\n        absentCount,\n        lateCount,\n        excusedCount,\n      },\n    });\n  } catch (error) {\n    console.error(\'Error marking attendance:\', error);\n    res.status(500).json({ \n      success: false, \n      message: \'Failed to mark attendance\' \n    });\n  }\n};\n\n// Get attendance for a specific date and class\nexport const getAttendanceByDate = async (req: Request, res: Response) => {\n  try {\n    const { classId, sectionId, date } = req.query;\n\n    if (!classId || !sectionId || !date) {\n      return res.status(400).json({\n        success: false,\n        message: \'Missing required parameters\'\n      });\n    }\n\n    const attendanceRecords = await db\n      .select({\n        id: attendance.id,\n        studentId: attendance.studentId,\n        studentName: sql<string>`${users.firstName} || \' \' || ${users.lastName}`,\n        status: attendance.status,\n        remarks: attendance.remarks,\n        markedBy: attendance.markedBy,\n        createdAt: attendance.createdAt,\n      })\n      .from(attendance)\n      .leftJoin(students, eq(attendance.studentId, students.id))\n      .leftJoin(users, eq(students.userId, users.id))\n      .where(\n        and(\n          eq(attendance.classId, classId as string),\n          eq(attendance.sectionId, sectionId as string),\n          eq(attendance.date, date as string)\n        )\n      )\n      .orderBy(sql`${users.firstName}`);\n\n    res.status(200).json({\n      success: true,\n      data: attendanceRecords,\n    });\n  } catch (error) {\n    console.error(\'Error fetching attendance:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch attendance\'\n    });\n  }\n};\n\n// Get attendance statistics for a class/section\nexport const getAttendanceStats = async (req: Request, res: Response) => {\n  try {\n    const { classId, sectionId, startDate, endDate } = req.query;\n\n    if (!classId || !sectionId) {\n      return res.status(400).json({\n        success: false,\n        message: \'Missing required parameters\'\n      });\n    }\n\n    let query = db\n      .select()\n      .from(classAttendance)\n      .where(\n        and(\n          eq(classAttendance.classId, classId as string),\n          eq(classAttendance.sectionId, sectionId as string)\n        )\n      );\n\n    if (startDate && endDate) {\n      query = query.where(\n        and(\n          eq(classAttendance.classId, classId as string),\n          eq(classAttendance.sectionId, sectionId as string),\n          gte(classAttendance.date, startDate as string),\n          lte(classAttendance.date, endDate as string)\n        )\n      );\n    }\n\n    const stats = await query.orderBy(desc(classAttendance.date));\n\n    // Calculate overall statistics\n    const totalDays = stats.length;\n    const totalPresent = stats.reduce((sum, s) => sum + s.presentCount, 0);\n    const totalAbsent = stats.reduce((sum, s) => sum + s.absentCount, 0);\n    const totalLate = stats.reduce((sum, s) => sum + s.lateCount, 0);\n    const totalExcused = stats.reduce((sum, s) => sum + s.excusedCount, 0);\n    const totalStudents = stats.length > 0 ? stats[0].totalStudents : 0;\n\n    const averageAttendance = totalDays > 0 \n      ? ((totalPresent / (totalDays * totalStudents)) * 100).toFixed(2)\n      : 0;\n\n    res.status(200).json({\n      success: true,\n      data: {\n        totalDays,\n        totalPresent,\n        totalAbsent,\n        totalLate,\n        totalExcused,\n        totalStudents,\n        averageAttendance: parseFloat(averageAttendance as string),\n        dailyStats: stats,\n      },\n    });\n  } catch (error) {\n    console.error(\'Error fetching attendance stats:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch attendance statistics\'\n    });\n  }\n};\n\n// Get student-specific attendance\nexport const getStudentAttendance = async (req: Request, res: Response) => {\n  try {\n    const { studentId } = req.params;\n    const { startDate, endDate } = req.query;\n\n    let query = db\n      .select({\n        id: attendance.id,\n        date: attendance.date,\n        status: attendance.status,\n        remarks: attendance.remarks,\n        className: sql<string>`classes.name`,\n        sectionName: sql<string>`sections.name`,\n      })\n      .from(attendance)\n      .leftJoin(sql`classes`, eq(attendance.classId, sql`classes.id`))\n      .leftJoin(sql`sections`, eq(attendance.sectionId, sql`sections.id`))\n      .where(eq(attendance.studentId, studentId));\n\n    if (startDate && endDate) {\n      query = query.where(\n        and(\n          eq(attendance.studentId, studentId),\n          gte(attendance.date, startDate as string),\n          lte(attendance.date, endDate as string)\n        )\n      );\n    }\n\n    const records = await query.orderBy(desc(attendance.date));\n\n    // Calculate statistics\n    const totalDays = records.length;\n    const presentDays = records.filter(r => r.status === \'present\').length;\n    const absentDays = records.filter(r => r.status === \'absent\').length;\n    const lateDays = records.filter(r => r.status === \'late\').length;\n    const excusedDays = records.filter(r => r.status === \'excused\').length;\n\n    const attendancePercentage = totalDays > 0 \n      ? ((presentDays / totalDays) * 100).toFixed(2)\n      : 0;\n\n    res.status(200).json({\n      success: true,\n      data: {\n        totalDays,\n        presentDays,\n        absentDays,\n        lateDays,\n        excusedDays,\n        attendancePercentage: parseFloat(attendancePercentage as string),\n        records,\n      },\n    });\n  } catch (error) {\n    console.error(\'Error fetching student attendance:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to fetch student attendance\'\n    });\n  }\n};\n\n// Finalize attendance (prevent further edits)\nexport const finalizeAttendance = async (req: Request, res: Response) => {\n  try {\n    const { classId, sectionId, date } = req.body;\n\n    await db\n      .update(classAttendance)\n      .set({ isFinalized: true, updatedAt: new Date() })\n      .where(\n        and(\n          eq(classAttendance.classId, classId),\n          eq(classAttendance.sectionId, sectionId),\n          eq(classAttendance.date, date)\n        )\n      );\n\n    res.status(200).json({\n      success: true,\n      message: \'Attendance finalized successfully\',\n    });\n  } catch (error) {\n    console.error(\'Error finalizing attendance:\', error);\n    res.status(500).json({\n      success: false,\n      message: \'Failed to finalize attendance\'\n    });\n  }\n};\n</create-file>\n</function_calls>'}