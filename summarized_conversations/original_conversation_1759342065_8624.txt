{'role': 'user', 'content': '<tool_result> <execute-command> ToolResult(success=True, output=\'{\\n  "output": "   import { Route, Switch, Redirect } from \\\'wouter\\\';\\\\n   import { QueryClient, QueryClientProvider } from \\\'@tanstack/react-query\\\';\\\\n   import { AuthProvider, useAuth } from \\\'./contexts/AuthContext\\\';\\\\n   import { Toaster } from \\\'./components/ui/toaster\\\';\\\\n   import MainLayout from \\\'./components/layout/MainLayout\\\';\\\\n   import Login from \\\'./pages/Login\\\';\\\\n   import Dashboard from \\\'./pages/Dashboard\\\';\\\\n   import Users from \\\'./pages/Users\\\';\\\\n   import StudentAdmission from \\\'./pages/StudentAdmission\\\';\\\\n   import StudentsList from \\\'./pages/StudentsList\\\';\\\\n   import StudentProfile from \\\'./pages/StudentProfile\\\';\\\\n   \\\\n   // Create a client\\\\n   const queryClient = new QueryClient({\\\\n     defaultOptions: {\\\\n       queries: {\\\\n         refetchOnWindowFocus: false,\\\\n         retry: 1,\\\\n       },\\\\n     },\\\\n   });\\\\n   \\\\n   // Protected Route Component\\\\n   function ProtectedRoute({ \\\\n     component: Component,\\\\n     allowedRoles,\\\\n   }: { \\\\n     component: React.ComponentType;\\\\n     allowedRoles?: string[];\\\\n   }) {\\\\n     const { isAuthenticated, isLoading, user } = useAuth();\\\\n   \\\\n     if (isLoading) {\\\\n       return (\\\\n         <div className=\\\\"flex items-center justify-center min-h-screen\\\\">\\\\n           <div className=\\\\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\\\\"></div>\\\\n         </div>\\\\n       );\\\\n     }\\\\n   \\\\n     if (!isAuthenticated) {\\\\n       return <Redirect to=\\\\"/login\\\\" />;\\\\n     }\\\\n   \\\\n     // Check role-based access\\\\n     if (allowedRoles && user && !allowedRoles.includes(user.role)) {\\\\n       return (\\\\n         <MainLayout>\\\\n           <div className=\\\\"flex items-center justify-center min-h-[60vh]\\\\">\\\\n             <div className=\\\\"text-center\\\\">\\\\n               <h1 className=\\\\"text-4xl font-bold mb-4\\\\">403</h1>\\\\n               <p className=\\\\"text-muted-foreground\\\\">You don\\\'t have permission to access this page</p>\\\\n             </div>\\\\n           </div>\\\\n         </MainLayout>\\\\n       );\\\\n     }\\\\n   \\\\n     return (\\\\n       <MainLayout>\\\\n         <Component />\\\\n       </MainLayout>\\\\n     );\\\\n   }\\\\n   \\\\n   // Public Route Component\\\\n   function PublicRoute({ component: Component }: { component: React.ComponentType }) {\\\\n     const { isAuthenticated, isLoading } = useAuth();\\\\n   \\\\n     if (isLoading) {\\\\n       return (\\\\n         <div className=\\\\"flex items-center justify-center min-h-screen\\\\">\\\\n           <div className=\\\\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\\\\"></div>\\\\n         </div>\\\\n       );\\\\n     }\\\\n   \\\\n     if (isAuthenticated) {\\\\n       return <Redirect to=\\\\"/dashboard\\\\" />;\\\\n     }\\\\n   \\\\n     return <Component />;\\\\n   }\\\\n   \\\\n   function AppRoutes() {\\\\n     return (\\\\n       <Switch>\\\\n         <Route path=\\\\"/login\\\\">\\\\n           <PublicRoute component={Login} />\\\\n         </Route>\\\\n         \\\\n         <Route path=\\\\"/dashboard\\\\">\\\\n           <ProtectedRoute component={Dashboard} />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/users\\\\">\\\\n           <ProtectedRoute \\\\n             component={Users} \\\\n             allowedRoles={[\\\'superadmin\\\', \\\'admin\\\']}\\\\n           />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/students\\\\">\\\\n           <ProtectedRoute \\\\n             component={StudentsList}\\\\n             allowedRoles={[\\\'superadmin\\\', \\\'admin\\\', \\\'teacher\\\']}\\\\n           />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/students/admission\\\\">\\\\n           <ProtectedRoute \\\\n             component={StudentAdmission}\\\\n             allowedRoles={[\\\'superadmin\\\', \\\'admin\\\']}\\\\n           />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/students/:id\\\\">\\\\n           <ProtectedRoute \\\\n             component={StudentProfile}\\\\n             allowedRoles={[\\\'superadmin\\\', \\\'admin\\\', \\\'teacher\\\']}\\\\n           />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/teachers\\\\">\\\\n           <ProtectedRoute component={() => <div>Teachers Page (Coming Soon)</div>} />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/classes\\\\">\\\\n           <ProtectedRoute component={() => <div>Classes Page (Coming Soon)</div>} />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/attendance\\\\">\\\\n           <ProtectedRoute component={() => <div>Attendance Page (Coming Soon)</div>} />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/timetable\\\\">\\\\n           <ProtectedRoute component={() => <div>Timetable Page (Coming Soon)</div>} />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/notifications\\\\">\\\\n           <ProtectedRoute component={() => <div>Notifications Page (Coming Soon)</div>} />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/settings\\\\">\\\\n           <ProtectedRoute component={() => <div>Settings Page (Coming Soon)</div>} />\\\\n         </Route>\\\\n   \\\\n         <Route path=\\\\"/\\\\">\\\\n           <Redirect to=\\\\"/dashboard\\\\" />\\\\n         </Route>\\\\n   \\\\n         <Route>\\\\n           <div className=\\\\"flex items-center justify-center min-h-screen\\\\">\\\\n             <div className=\\\\"text-center\\\\">\\\\n               <h1 className=\\\\"text-4xl font-bold mb-4\\\\">404</h1>\\\\n               <p className=\\\\"text-muted-foreground\\\\">Page not found</p>\\\\n             </div>\\\\n           </div>\\\\n         </Route>\\\\n       </Switch>\\\\n     );\\\\n   }\\\\n   \\\\n   function App() {\\\\n     return (\\\\n       <QueryClientProvider client={queryClient}>\\\\n         <AuthProvider>\\\\n           <AppRoutes />\\\\n           <Toaster />\\\\n         </AuthProvider>\\\\n       </QueryClientProvider>\\\\n     );\\\\n   }\\\\n   \\\\n   export default App;\\\\n",\\n  "exit_code": 0,\\n  "cwd": "/workspace"\\n}\') </execute-command> </tool_result>'}