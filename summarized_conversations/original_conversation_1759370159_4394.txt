{'role': 'assistant', 'content': 'Now let\'s create the Hostel Management frontend page. Due to the length, I\'ll create a comprehensive page that handles both hostel and room management:\n\n<function_calls>\n<create-file file_path="client/src/pages/HostelManagement.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \'@/components/ui/dialog\';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \'@/components/ui/tabs\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { Plus, Edit, Trash2, Building, Bed, Users, DoorOpen } from \'lucide-react\';\n\ninterface Hostel {\n  id: string;\n  name: string;\n  type: string;\n  totalCapacity: number;\n  occupiedCapacity: number;\n  address: string;\n  wardenName: string;\n  wardenPhone: string;\n  facilities: string;\n  description: string;\n  isActive: boolean;\n}\n\ninterface Room {\n  id: string;\n  hostelId: string;\n  roomNumber: string;\n  floor: number;\n  capacity: number;\n  occupiedCapacity: number;\n  type: string;\n  facilities: string;\n  monthlyRent: number;\n  isActive: boolean;\n}\n\nexport default function HostelManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const [hostels, setHostels] = useState<Hostel[]>([]);\n  const [rooms, setRooms] = useState<Room[]>([]);\n  const [selectedHostel, setSelectedHostel] = useState<Hostel | null>(null);\n  const [statistics, setStatistics] = useState<any>(null);\n\n  const [isHostelDialogOpen, setIsHostelDialogOpen] = useState(false);\n  const [isRoomDialogOpen, setIsRoomDialogOpen] = useState(false);\n  const [editingHostel, setEditingHostel] = useState<Hostel | null>(null);\n  const [editingRoom, setEditingRoom] = useState<Room | null>(null);\n\n  const [hostelForm, setHostelForm] = useState({\n    name: \'\',\n    type: \'boys\',\n    totalCapacity: \'\',\n    address: \'\',\n    wardenName: \'\',\n    wardenPhone: \'\',\n    facilities: \'\',\n    description: \'\',\n  });\n\n  const [roomForm, setRoomForm] = useState({\n    hostelId: \'\',\n    roomNumber: \'\',\n    floor: \'\',\n    capacity: \'\',\n    type: \'double\',\n    facilities: \'\',\n    monthlyRent: \'\',\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    if (selectedHostel) {\n      loadRooms(selectedHostel.id);\n    }\n  }, [selectedHostel]);\n\n  const loadData = async () => {\n    setIsLoading(true);\n    try {\n      const [hostelsRes, statsRes] = await Promise.all([\n        fetch(\'/api/hostel/hostels\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(\'/api/hostel/hostels/statistics\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n      ]);\n\n      if (!hostelsRes.ok) throw new Error(\'Failed to load hostels\');\n\n      const hostelsData = await hostelsRes.json();\n      const statsData = statsRes.ok ? await statsRes.json() : null;\n\n      setHostels(hostelsData.hostels || []);\n      setStatistics(statsData?.statistics);\n\n      if (hostelsData.hostels?.length > 0) {\n        setSelectedHostel(hostelsData.hostels[0]);\n      }\n    } catch (error) {\n      console.error(\'Load data error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load hostel data\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadRooms = async (hostelId: string) => {\n    try {\n      const response = await fetch(`/api/hostel/hostels/${hostelId}/rooms`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) throw new Error(\'Failed to load rooms\');\n\n      const data = await response.json();\n      setRooms(data.rooms || []);\n    } catch (error) {\n      console.error(\'Load rooms error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load rooms\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const handleCreateHostel = async () => {\n    if (!hostelForm.name || !hostelForm.totalCapacity) {\n      toast({\n        title: \'Validation Error\',\n        description: \'Please fill in all required fields\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const url = editingHostel\n        ? `/api/hostel/hostels/${editingHostel.id}`\n        : \'/api/hostel/hostels\';\n      const method = editingHostel ? \'PUT\' : \'POST\';\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          ...hostelForm,\n          totalCapacity: parseInt(hostelForm.totalCapacity),\n          facilities: hostelForm.facilities ? hostelForm.facilities.split(\',\').map(f => f.trim()) : [],\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to save hostel\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: `Hostel ${editingHostel ? \'updated\' : \'created\'} successfully`,\n      });\n\n      setIsHostelDialogOpen(false);\n      resetHostelForm();\n      loadData();\n    } catch (error: any) {\n      console.error(\'Save hostel error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to save hostel\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleCreateRoom = async () => {\n    if (!roomForm.roomNumber || !roomForm.capacity || !roomForm.floor) {\n      toast({\n        title: \'Validation Error\',\n        description: \'Please fill in all required fields\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const url = editingRoom ? `/api/hostel/rooms/${editingRoom.id}` : \'/api/hostel/rooms\';\n      const method = editingRoom ? \'PUT\' : \'POST\';\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          ...roomForm,\n          hostelId: selectedHostel?.id,\n          floor: parseInt(roomForm.floor),\n          capacity: parseInt(roomForm.capacity),\n          monthlyRent: parseInt(roomForm.monthlyRent) || 0,\n          facilities: roomForm.facilities ? roomForm.facilities.split(\',\').map(f => f.trim()) : [],\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to save room\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: `Room ${editingRoom ? \'updated\' : \'created\'} successfully`,\n      });\n\n      setIsRoomDialogOpen(false);\n      resetRoomForm();\n      if (selectedHostel) loadRooms(selectedHostel.id);\n    } catch (error: any) {\n      console.error(\'Save room error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to save room\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleDeleteHostel = async (hostelId: string) => {\n    if (!confirm(\'Are you sure you want to delete this hostel?\')) return;\n\n    try {\n      const response = await fetch(`/api/hostel/hostels/${hostelId}`, {\n        method: \'DELETE\',\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to delete hostel\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Hostel deleted successfully\',\n      });\n\n      loadData();\n    } catch (error: any) {\n      console.error(\'Delete hostel error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to delete hostel\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const handleDeleteRoom = async (roomId: string) => {\n    if (!confirm(\'Are you sure you want to delete this room?\')) return;\n\n    try {\n      const response = await fetch(`/api/hostel/rooms/${roomId}`, {\n        method: \'DELETE\',\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to delete room\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Room deleted successfully\',\n      });\n\n      if (selectedHostel) loadRooms(selectedHostel.id);\n    } catch (error: any) {\n      console.error(\'Delete room error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to delete room\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const openEditHostel = (hostel: Hostel) => {\n    setEditingHostel(hostel);\n    setHostelForm({\n      name: hostel.name,\n      type: hostel.type,\n      totalCapacity: hostel.totalCapacity.toString(),\n      address: hostel.address || \'\',\n      wardenName: hostel.wardenName || \'\',\n      wardenPhone: hostel.wardenPhone || \'\',\n      facilities: hostel.facilities ? JSON.parse(hostel.facilities).join(\', \') : \'\',\n      description: hostel.description || \'\',\n    });\n    setIsHostelDialogOpen(true);\n  };\n\n  const openEditRoom = (room: Room) => {\n    setEditingRoom(room);\n    setRoomForm({\n      hostelId: room.hostelId,\n      roomNumber: room.roomNumber,\n      floor: room.floor.toString(),\n      capacity: room.capacity.toString(),\n      type: room.type,\n      facilities: room.facilities ? JSON.parse(room.facilities).join(\', \') : \'\',\n      monthlyRent: room.monthlyRent.toString(),\n    });\n    setIsRoomDialogOpen(true);\n  };\n\n  const resetHostelForm = () => {\n    setHostelForm({\n      name: \'\',\n      type: \'boys\',\n      totalCapacity: \'\',\n      address: \'\',\n      wardenName: \'\',\n      wardenPhone: \'\',\n      facilities: \'\',\n      description: \'\',\n    });\n    setEditingHostel(null);\n  };\n\n  const resetRoomForm = () => {\n    setRoomForm({\n      hostelId: \'\',\n      roomNumber: \'\',\n      floor: \'\',\n      capacity: \'\',\n      type: \'double\',\n      facilities: \'\',\n      monthlyRent: \'\',\n    });\n    setEditingRoom(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className="container mx-auto p-6">\n        <div className="flex items-center justify-center h-96">\n          <div className="text-center">\n            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n            <p className="text-muted-foreground">Loading hostel data...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Hostel Management</h1>\n          <p className="text-muted-foreground">Manage hostels and rooms</p>\n        </div>\n        <Dialog open={isHostelDialogOpen} onOpenChange={setIsHostelDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetHostelForm}>\n              <Plus className="h-4 w-4 mr-2" />\n              Add Hostel\n            </Button>\n          </DialogTrigger>\n          <DialogContent className="max-w-2xl">\n            <DialogHeader>\n              <DialogTitle>{editingHostel ? \'Edit\' : \'Add\'} Hostel</DialogTitle>\n              <DialogDescription>Enter hostel details</DialogDescription>\n            </DialogHeader>\n            <div className="space-y-4">\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="name">Hostel Name *</Label>\n                  <Input\n                    id="name"\n                    value={hostelForm.name}\n                    onChange={(e) => setHostelForm({ ...hostelForm, name: e.target.value })}\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="type">Type *</Label>\n                  <Select value={hostelForm.type} onValueChange={(value) => setHostelForm({ ...hostelForm, type: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value="boys">Boys</SelectItem>\n                      <SelectItem value="girls">Girls</SelectItem>\n                      <SelectItem value="mixed">Mixed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="capacity">Total Capacity *</Label>\n                  <Input\n                    id="capacity"\n                    type="number"\n                    value={hostelForm.totalCapacity}\n                    onChange={(e) => setHostelForm({ ...hostelForm, totalCapacity: e.target.value })}\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="address">Address</Label>\n                  <Input\n                    id="address"\n                    value={hostelForm.address}\n                    onChange={(e) => setHostelForm({ ...hostelForm, address: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label htmlFor="wardenName">Warden Name</Label>\n                  <Input\n                    id="wardenName"\n                    value={hostelForm.wardenName}\n                    onChange={(e) => setHostelForm({ ...hostelForm, wardenName: e.target.value })}\n                  />\n                </div>\n                <div className="space-y-2">\n                  <Label htmlFor="wardenPhone">Warden Phone</Label>\n                  <Input\n                    id="wardenPhone"\n                    value={hostelForm.wardenPhone}\n                    onChange={(e) => setHostelForm({ ...hostelForm, wardenPhone: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="facilities">Facilities (comma-separated)</Label>\n                <Input\n                  id="facilities"\n                  placeholder="WiFi, Gym, Laundry"\n                  value={hostelForm.facilities}\n                  onChange={(e) => setHostelForm({ ...hostelForm, facilities: e.target.value })}\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="description">Description</Label>\n                <Input\n                  id="description"\n                  value={hostelForm.description}\n                  onChange={(e) => setHostelForm({ ...hostelForm, description: e.target.value })}\n                />\n              </div>\n\n              <div className="flex gap-2 pt-4">\n                <Button onClick={handleCreateHostel} disabled={isSubmitting} className="flex-1">\n                  {isSubmitting ? \'Saving...\' : editingHostel ? \'Update\' : \'Create\'} Hostel\n                </Button>\n                <Button\n                  variant="outline"\n                  onClick={() => {\n                    setIsHostelDialogOpen(false);\n                    resetHostelForm();\n                  }}\n                  disabled={isSubmitting}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics */}\n      {statistics && (\n        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Total Hostels</CardTitle>\n              <Building className="h-4 w-4 text-muted-foreground" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">{statistics.total_hostels || 0}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Total Rooms</CardTitle>\n              <DoorOpen className="h-4 w-4 text-muted-foreground" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">{statistics.total_rooms || 0}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Total Capacity</CardTitle>\n              <Users className="h-4 w-4 text-muted-foreground" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">{statistics.total_capacity || 0}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n              <CardTitle className="text-sm font-medium">Occupied</CardTitle>\n              <Bed className="h-4 w-4 text-muted-foreground" />\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">{statistics.occupied_capacity || 0}</div>\n              <p className="text-xs text-muted-foreground">\n                {statistics.total_capacity > 0\n                  ? `${((statistics.occupied_capacity / statistics.total_capacity) * 100).toFixed(1)}% occupancy`\n                  : \'0% occupancy\'}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">\n        {/* Hostels List */}\n        <Card className="lg:col-span-1">\n          <CardHeader>\n            <CardTitle>Hostels</CardTitle>\n            <CardDescription>{hostels.length} hostels</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className="space-y-2">\n              {hostels.map((hostel) => (\n                <Card\n                  key={hostel.id}\n                  className={`cursor-pointer transition-all ${\n                    selectedHostel?.id === hostel.id ? \'border-primary shadow-md\' : \'hover:border-accent\'\n                  }`}\n                  onClick={() => setSelectedHostel(hostel)}\n                >\n                  <CardContent className="p-4">\n                    <div className="flex items-center justify-between mb-2">\n                      <h4 className="font-semibold">{hostel.name}</h4>\n                      <Badge variant={hostel.type === \'boys\' ? \'default\' : hostel.type === \'girls\' ? \'secondary\' : \'outline\'}>\n                        {hostel.type}\n                      </Badge>\n                    </div>\n                    <div className="text-sm text-muted-foreground space-y-1">\n                      <div>Capacity: {hostel.occupiedCapacity}/{hostel.totalCapacity}</div>\n                      <div className="w-full bg-muted rounded-full h-2">\n                        <div\n                          className="bg-primary h-2 rounded-full"\n                          style={{ width: `${(hostel.occupiedCapacity / hostel.totalCapacity) * 100}%` }}\n                        />\n                      </div>\n                    </div>\n                    <div className="flex gap-2 mt-3">\n                      <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); openEditHostel(hostel); }}>\n                        <Edit className="h-4 w-4" />\n                      </Button>\n                      <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); handleDeleteHostel(hostel.id); }}>\n                        <Trash2 className="h-4 w-4 text-red-600" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Rooms List */}\n        <Card className="lg:col-span-2">\n          <CardHeader>\n            <div className="flex items-center justify-between">\n              <div>\n                <CardTitle>{selectedHostel?.name || \'Select a Hostel\'}</CardTitle>\n                <CardDescription>{rooms.length} rooms</CardDescription>\n              </div>\n              {selectedHostel && (\n                <Dialog open={isRoomDialogOpen} onOpenChange={setIsRoomDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button onClick={resetRoomForm}>\n                      <Plus className="h-4 w-4 mr-2" />\n                      Add Room\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>{editingRoom ? \'Edit\' : \'Add\'} Room</DialogTitle>\n                      <DialogDescription>Enter room details for {selectedHostel.name}</DialogDescription>\n                    </DialogHeader>\n                    <div className="space-y-4">\n                      <div className="grid grid-cols-2 gap-4">\n                        <div className="space-y-2">\n                          <Label htmlFor="roomNumber">Room Number *</Label>\n                          <Input\n                            id="roomNumber"\n                            value={roomForm.roomNumber}\n                            onChange={(e) => setRoomForm({ ...roomForm, roomNumber: e.target.value })}\n                          />\n                        </div>\n                        <div className="space-y-2">\n                          <Label htmlFor="floor">Floor *</Label>\n                          <Input\n                            id="floor"\n                            type="number"\n                            value={roomForm.floor}\n                            onChange={(e) => setRoomForm({ ...roomForm, floor: e.target.value })}\n                          />\n                        </div>\n                      </div>\n\n                      <div className="grid grid-cols-2 gap-4">\n                        <div className="space-y-2">\n                          <Label htmlFor="capacity">Capacity *</Label>\n                          <Input\n                            id="capacity"\n                            type="number"\n                            value={roomForm.capacity}\n                            onChange={(e) => setRoomForm({ ...roomForm, capacity: e.target.value })}\n                          />\n                        </div>\n                        <div className="space-y-2">\n                          <Label htmlFor="roomType">Room Type *</Label>\n                          <Select value={roomForm.type} onValueChange={(value) => setRoomForm({ ...roomForm, type: value })}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value="single">Single</SelectItem>\n                              <SelectItem value="double">Double</SelectItem>\n                              <SelectItem value="triple">Triple</SelectItem>\n                              <SelectItem value="dormitory">Dormitory</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label htmlFor="monthlyRent">Monthly Rent</Label>\n                        <Input\n                          id="monthlyRent"\n                          type="number"\n                          value={roomForm.monthlyRent}\n                          onChange={(e) => setRoomForm({ ...roomForm, monthlyRent: e.target.value })}\n                        />\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label htmlFor="roomFacilities">Facilities (comma-separated)</Label>\n                        <Input\n                          id="roomFacilities"\n                          placeholder="AC, Attached Bathroom"\n                          value={roomForm.facilities}\n                          onChange={(e) => setRoomForm({ ...roomForm, facilities: e.target.value })}\n                        />\n                      </div>\n\n                      <div className="flex gap-2 pt-4">\n                        <Button onClick={handleCreateRoom} disabled={isSubmitting} className="flex-1">\n                          {isSubmitting ? \'Saving...\' : editingRoom ? \'Update\' : \'Create\'} Room\n                        </Button>\n                        <Button\n                          variant="outline"\n                          onClick={() => {\n                            setIsRoomDialogOpen(false);\n                            resetRoomForm();\n                          }}\n                          disabled={isSubmitting}\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            {!selectedHostel ? (\n              <div className="text-center py-12 text-muted-foreground">\n                <Building className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                <p>Select a hostel to view rooms</p>\n              </div>\n            ) : rooms.length === 0 ? (\n              <div className="text-center py-12 text-muted-foreground">\n                <DoorOpen className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                <p>No rooms found</p>\n                <p className="text-sm">Click "Add Room" to create one</p>\n              </div>\n            ) : (\n              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n                {rooms.map((room) => (\n                  <Card key={room.id}>\n                    <CardContent className="p-4">\n                      <div className="flex items-center justify-between mb-2">\n                        <h4 className="font-semibold">Room {room.roomNumber}</h4>\n                        <Badge variant="outline">{room.type}</Badge>\n                      </div>\n                      <div className="text-sm space-y-1">\n                        <div className="flex justify-between">\n                          <span className="text-muted-foreground">Floor:</span>\n                          <span>{room.floor}</span>\n                        </div>\n                        <div className="flex justify-between">\n                          <span className="text-muted-foreground">Capacity:</span>\n                          <span>{room.occupiedCapacity}/{room.capacity}</span>\n                        </div>\n                        <div className="flex justify-between">\n                          <span className="text-muted-foreground">Rent:</span>\n                          <span>${room.monthlyRent}/month</span>\n                        </div>\n                      </div>\n                      <div className="flex gap-2 mt-3">\n                        <Button variant="ghost" size="sm" onClick={() => openEditRoom(room)}>\n                          <Edit className="h-4 w-4" />\n                        </Button>\n                        <Button variant="ghost" size="sm" onClick={() => handleDeleteRoom(room.id)}>\n                          <Trash2 className="h-4 w-4 text-red-600" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}