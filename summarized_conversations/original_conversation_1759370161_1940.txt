{'role': 'assistant', 'content': '# üéØ Mission Accepted: Build 3 Critical Frontend Pages\n\nPerfect! I\'ll build these three essential pages to make both modules fully operational. Let\'s start!\n\n## üìã Building Order:\n1. **RoomAllocation.tsx** - Allocate students to rooms\n2. **BookManagement.tsx** - Complete library catalog management\n3. **IssueReturn.tsx** - Daily book issue/return operations\n\nLet\'s begin!\n\n---\n\n## 1Ô∏è‚É£ Room Allocation Page\n\n<function_calls>\n<create-file file_path="client/src/pages/RoomAllocation.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \'@/components/ui/dialog\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { Search, UserPlus, Building, DoorOpen, Users, CheckCircle } from \'lucide-react\';\n\ninterface Student {\n  id: string;\n  studentId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  currentClass?: string;\n  currentSection?: string;\n}\n\ninterface Hostel {\n  id: string;\n  name: string;\n  type: string;\n  totalCapacity: number;\n  occupiedCapacity: number;\n}\n\ninterface Room {\n  id: string;\n  hostelId: string;\n  roomNumber: string;\n  floor: number;\n  capacity: number;\n  occupiedCapacity: number;\n  type: string;\n  monthlyRent: number;\n}\n\ninterface Allocation {\n  id: string;\n  allocation: any;\n  room: Room;\n  hostel: Hostel;\n  student: Student;\n}\n\nexport default function RoomAllocation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const [students, setStudents] = useState<Student[]>([]);\n  const [hostels, setHostels] = useState<Hostel[]>([]);\n  const [rooms, setRooms] = useState<Room[]>([]);\n  const [allocations, setAllocations] = useState<Allocation[]>([]);\n\n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [selectedHostel, setSelectedHostel] = useState<string>(\'all\');\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [selectedRoom, setSelectedRoom] = useState<Room | null>(null);\n\n  const [isAllocateDialogOpen, setIsAllocateDialogOpen] = useState(false);\n  const [allocationForm, setAllocationForm] = useState({\n    allocationDate: new Date().toISOString().split(\'T\')[0],\n    bedNumber: \'\',\n    monthlyRent: \'\',\n    remarks: \'\',\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    if (selectedHostel && selectedHostel !== \'all\') {\n      loadRooms(selectedHostel);\n    } else {\n      setRooms([]);\n    }\n  }, [selectedHostel]);\n\n  const loadData = async () => {\n    setIsLoading(true);\n    try {\n      const [studentsRes, hostelsRes, allocationsRes] = await Promise.all([\n        fetch(\'/api/students\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(\'/api/hostel/hostels\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(\'/api/hostel/allocations?status=active\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n      ]);\n\n      if (!studentsRes.ok || !hostelsRes.ok) throw new Error(\'Failed to load data\');\n\n      const studentsData = await studentsRes.json();\n      const hostelsData = await hostelsRes.json();\n      const allocationsData = allocationsRes.ok ? await allocationsRes.json() : { allocations: [] };\n\n      setStudents(studentsData.students || []);\n      setHostels(hostelsData.hostels || []);\n      setAllocations(allocationsData.allocations || []);\n    } catch (error) {\n      console.error(\'Load data error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load data\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadRooms = async (hostelId: string) => {\n    try {\n      const response = await fetch(`/api/hostel/hostels/${hostelId}/rooms?isActive=true`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) throw new Error(\'Failed to load rooms\');\n\n      const data = await response.json();\n      // Filter only rooms with available capacity\n      const availableRooms = (data.rooms || []).filter((room: Room) => room.occupiedCapacity < room.capacity);\n      setRooms(availableRooms);\n    } catch (error) {\n      console.error(\'Load rooms error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load rooms\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const handleAllocateRoom = async () => {\n    if (!selectedStudent || !selectedRoom) {\n      toast({\n        title: \'Validation Error\',\n        description: \'Please select both a student and a room\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\'/api/hostel/allocations\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          roomId: selectedRoom.id,\n          studentId: selectedStudent.id,\n          allocationDate: allocationForm.allocationDate,\n          bedNumber: allocationForm.bedNumber || undefined,\n          monthlyRent: allocationForm.monthlyRent ? parseInt(allocationForm.monthlyRent) : undefined,\n          remarks: allocationForm.remarks || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to allocate room\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Room allocated successfully\',\n      });\n\n      setIsAllocateDialogOpen(false);\n      resetAllocationForm();\n      loadData();\n      if (selectedHostel !== \'all\') loadRooms(selectedHostel);\n    } catch (error: any) {\n      console.error(\'Allocate room error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to allocate room\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleVacateRoom = async (allocationId: string) => {\n    if (!confirm(\'Are you sure you want to vacate this room?\')) return;\n\n    try {\n      const response = await fetch(`/api/hostel/allocations/${allocationId}/vacate`, {\n        method: \'PATCH\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          vacateDate: new Date().toISOString().split(\'T\')[0],\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to vacate room\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Room vacated successfully\',\n      });\n\n      loadData();\n      if (selectedHostel !== \'all\') loadRooms(selectedHostel);\n    } catch (error: any) {\n      console.error(\'Vacate room error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to vacate room\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const openAllocateDialog = (student: Student, room: Room) => {\n    setSelectedStudent(student);\n    setSelectedRoom(room);\n    setAllocationForm({\n      ...allocationForm,\n      monthlyRent: room.monthlyRent.toString(),\n    });\n    setIsAllocateDialogOpen(true);\n  };\n\n  const resetAllocationForm = () => {\n    setAllocationForm({\n      allocationDate: new Date().toISOString().split(\'T\')[0],\n      bedNumber: \'\',\n      monthlyRent: \'\',\n      remarks: \'\',\n    });\n    setSelectedStudent(null);\n    setSelectedRoom(null);\n  };\n\n  // Get allocated student IDs\n  const allocatedStudentIds = new Set(allocations.map((a) => a.student.id));\n\n  // Filter unallocated students\n  const unallocatedStudents = students.filter((s) => !allocatedStudentIds.has(s.id));\n\n  // Filter students by search\n  const filteredStudents = unallocatedStudents.filter((student) => {\n    if (!searchQuery) return true;\n    const query = searchQuery.toLowerCase();\n    return (\n      student.firstName.toLowerCase().includes(query) ||\n      student.lastName.toLowerCase().includes(query) ||\n      student.studentId.toLowerCase().includes(query) ||\n      student.email.toLowerCase().includes(query)\n    );\n  });\n\n  if (isLoading) {\n    return (\n      <div className="container mx-auto p-6">\n        <div className="flex items-center justify-center h-96">\n          <div className="text-center">\n            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n            <p className="text-muted-foreground">Loading allocation data...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div>\n        <h1 className="text-3xl font-bold">Room Allocation</h1>\n        <p className="text-muted-foreground">Allocate rooms to students</p>\n      </div>\n\n      {/* Statistics */}\n      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Total Students</CardTitle>\n            <Users className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{students.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Allocated</CardTitle>\n            <CheckCircle className="h-4 w-4 text-green-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">{allocations.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Unallocated</CardTitle>\n            <UserPlus className="h-4 w-4 text-orange-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-orange-600">{unallocatedStudents.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Available Rooms</CardTitle>\n            <DoorOpen className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{rooms.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n        {/* Unallocated Students */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Unallocated Students</CardTitle>\n            <CardDescription>{filteredStudents.length} students without rooms</CardDescription>\n            <div className="pt-4">\n              <div className="relative">\n                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />\n                <Input\n                  placeholder="Search students..."\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className="pl-8"\n                />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {filteredStudents.length === 0 ? (\n              <div className="text-center py-12 text-muted-foreground">\n                <Users className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                <p>No unallocated students found</p>\n              </div>\n            ) : (\n              <div className="space-y-2 max-h-96 overflow-y-auto">\n                {filteredStudents.map((student) => (\n                  <Card key={student.id} className="hover:border-primary transition-colors">\n                    <CardContent className="p-4">\n                      <div className="flex items-center justify-between">\n                        <div>\n                          <div className="font-medium">\n                            {student.firstName} {student.lastName}\n                          </div>\n                          <div className="text-sm text-muted-foreground">{student.studentId}</div>\n                          {student.currentClass && (\n                            <div className="text-sm text-muted-foreground">\n                              Class {student.currentClass} - {student.currentSection}\n                            </div>\n                          )}\n                        </div>\n                        <Badge variant="outline">Unallocated</Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Available Rooms */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Available Rooms</CardTitle>\n            <CardDescription>Select hostel to view available rooms</CardDescription>\n            <div className="pt-4">\n              <Select value={selectedHostel} onValueChange={setSelectedHostel}>\n                <SelectTrigger>\n                  <SelectValue placeholder="Select hostel" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value="all">All Hostels</SelectItem>\n                  {hostels.map((hostel) => (\n                    <SelectItem key={hostel.id} value={hostel.id}>\n                      {hostel.name} ({hostel.totalCapacity - hostel.occupiedCapacity} available)\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {selectedHostel === \'all\' ? (\n              <div className="text-center py-12 text-muted-foreground">\n                <Building className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                <p>Select a hostel to view available rooms</p>\n              </div>\n            ) : rooms.length === 0 ? (\n              <div className="text-center py-12 text-muted-foreground">\n                <DoorOpen className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                <p>No available rooms in this hostel</p>\n              </div>\n            ) : (\n              <div className="space-y-2 max-h-96 overflow-y-auto">\n                {rooms.map((room) => (\n                  <Card key={room.id} className="hover:border-primary transition-colors">\n                    <CardContent className="p-4">\n                      <div className="flex items-center justify-between mb-2">\n                        <div>\n                          <div className="font-medium">Room {room.roomNumber}</div>\n                          <div className="text-sm text-muted-foreground">Floor {room.floor}</div>\n                        </div>\n                        <Badge variant="outline">{room.type}</Badge>\n                      </div>\n                      <div className="flex items-center justify-between text-sm">\n                        <span className="text-muted-foreground">\n                          Available: {room.capacity - room.occupiedCapacity}/{room.capacity}\n                        </span>\n                        <span className="font-medium">${room.monthlyRent}/mo</span>\n                      </div>\n                      {selectedStudent && (\n                        <Button\n                          size="sm"\n                          className="w-full mt-3"\n                          onClick={() => openAllocateDialog(selectedStudent, room)}\n                        >\n                          <UserPlus className="h-4 w-4 mr-2" />\n                          Allocate to {selectedStudent.firstName}\n                        </Button>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Current Allocations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Allocations</CardTitle>\n          <CardDescription>{allocations.length} active allocations</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {allocations.length === 0 ? (\n            <div className="text-center py-12 text-muted-foreground">\n              <CheckCircle className="h-16 w-16 mx-auto mb-4 opacity-50" />\n              <p>No active allocations</p>\n            </div>\n          ) : (\n            <div className="overflow-x-auto">\n              <table className="w-full text-sm">\n                <thead>\n                  <tr className="border-b">\n                    <th className="text-left p-2">Student</th>\n                    <th className="text-left p-2">Student ID</th>\n                    <th className="text-left p-2">Hostel</th>\n                    <th className="text-left p-2">Room</th>\n                    <th className="text-left p-2">Bed</th>\n                    <th className="text-right p-2">Rent</th>\n                    <th className="text-center p-2">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {allocations.map((allocation) => (\n                    <tr key={allocation.id} className="border-b hover:bg-muted/50">\n                      <td className="p-2">\n                        {allocation.student.firstName} {allocation.student.lastName}\n                      </td>\n                      <td className="p-2">{allocation.student.studentId}</td>\n                      <td className="p-2">{allocation.hostel.name}</td>\n                      <td className="p-2">Room {allocation.room.roomNumber}</td>\n                      <td className="p-2">{allocation.allocation.bedNumber || \'-\'}</td>\n                      <td className="text-right p-2">${allocation.allocation.monthlyRent}/mo</td>\n                      <td className="text-center p-2">\n                        <Button\n                          variant="outline"\n                          size="sm"\n                          onClick={() => handleVacateRoom(allocation.allocation.id)}\n                        >\n                          Vacate\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Allocation Dialog */}\n      <Dialog open={isAllocateDialogOpen} onOpenChange={setIsAllocateDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Allocate Room</DialogTitle>\n            <DialogDescription>\n              Allocate Room {selectedRoom?.roomNumber} to {selectedStudent?.firstName}{\' \'}\n              {selectedStudent?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className="space-y-4">\n            <div className="space-y-2">\n              <Label htmlFor="allocationDate">Allocation Date *</Label>\n              <Input\n                id="allocationDate"\n                type="date"\n                value={allocationForm.allocationDate}\n                onChange={(e) =>\n                  setAllocationForm({ ...allocationForm, allocationDate: e.target.value })\n                }\n              />\n            </div>\n\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-2">\n                <Label htmlFor="bedNumber">Bed Number</Label>\n                <Input\n                  id="bedNumber"\n                  placeholder="e.g., A1"\n                  value={allocationForm.bedNumber}\n                  onChange={(e) =>\n                    setAllocationForm({ ...allocationForm, bedNumber: e.target.value })\n                  }\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="monthlyRent">Monthly Rent</Label>\n                <Input\n                  id="monthlyRent"\n                  type="number"\n                  value={allocationForm.monthlyRent}\n                  onChange={(e) =>\n                    setAllocationForm({ ...allocationForm, monthlyRent: e.target.value })\n                  }\n                />\n              </div>\n            </div>\n\n            <div className="space-y-2">\n              <Label htmlFor="remarks">Remarks</Label>\n              <Input\n                id="remarks"\n                placeholder="Additional notes..."\n                value={allocationForm.remarks}\n                onChange={(e) => setAllocationForm({ ...allocationForm, remarks: e.target.value })}\n              />\n            </div>\n\n            <div className="flex gap-2 pt-4">\n              <Button onClick={handleAllocateRoom} disabled={isSubmitting} className="flex-1">\n                {isSubmitting ? \'Allocating...\' : \'Allocate Room\'}\n              </Button>\n              <Button\n                variant="outline"\n                onClick={() => {\n                  setIsAllocateDialogOpen(false);\n                  resetAllocationForm();\n                }}\n                disabled={isSubmitting}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}