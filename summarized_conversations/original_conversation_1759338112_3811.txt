{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/controllers/auth.controller.ts">\nimport { Request, Response } from \'express\';\nimport { eq } from \'drizzle-orm\';\nimport { db } from \'../db\';\nimport { users } from \'../db/schema\';\nimport { hashPassword, comparePassword } from \'../utils/password\';\nimport { generateToken } from \'../utils/jwt\';\nimport { successResponse, errorResponse, unauthorizedResponse } from \'../utils/response\';\n\nexport class AuthController {\n  // Register new user\n  async register(req: Request, res: Response) {\n    try {\n      const { email, password, firstName, lastName, role, phone } = req.body;\n\n      // Check if user already exists\n      const existingUser = await db.query.users.findFirst({\n        where: eq(users.email, email),\n      });\n\n      if (existingUser) {\n        return errorResponse(res, \'User with this email already exists\', 409);\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(password);\n\n      // Create user\n      const [newUser] = await db\n        .insert(users)\n        .values({\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          role: role || \'student\',\n          phone,\n          isActive: true,\n        })\n        .returning();\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = newUser;\n\n      // Generate token\n      const token = generateToken({\n        userId: newUser.id,\n        email: newUser.email,\n        role: newUser.role,\n      });\n\n      return successResponse(\n        res,\n        {\n          user: userWithoutPassword,\n          token,\n        },\n        \'User registered successfully\',\n        201\n      );\n    } catch (error) {\n      console.error(\'Registration error:\', error);\n      return errorResponse(res, \'Registration failed\', 500);\n    }\n  }\n\n  // Login user\n  async login(req: Request, res: Response) {\n    try {\n      const { email, password } = req.body;\n\n      // Find user by email\n      const user = await db.query.users.findFirst({\n        where: eq(users.email, email),\n      });\n\n      if (!user) {\n        return unauthorizedResponse(res, \'Invalid email or password\');\n      }\n\n      // Check if user is active\n      if (!user.isActive) {\n        return unauthorizedResponse(res, \'Your account has been deactivated\');\n      }\n\n      // Verify password\n      const isPasswordValid = await comparePassword(password, user.password);\n\n      if (!isPasswordValid) {\n        return unauthorizedResponse(res, \'Invalid email or password\');\n      }\n\n      // Generate token\n      const token = generateToken({\n        userId: user.id,\n        email: user.email,\n        role: user.role,\n      });\n\n      // Set session\n      if (req.session) {\n        req.session.userId = user.id;\n        req.session.email = user.email;\n        req.session.role = user.role;\n      }\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n\n      return successResponse(res, {\n        user: userWithoutPassword,\n        token,\n      }, \'Login successful\');\n    } catch (error) {\n      console.error(\'Login error:\', error);\n      return errorResponse(res, \'Login failed\', 500);\n    }\n  }\n\n  // Logout user\n  async logout(req: Request, res: Response) {\n    try {\n      if (req.session) {\n        req.session.destroy((err) => {\n          if (err) {\n            return errorResponse(res, \'Logout failed\', 500);\n          }\n          return successResponse(res, null, \'Logout successful\');\n        });\n      } else {\n        return successResponse(res, null, \'Logout successful\');\n      }\n    } catch (error) {\n      console.error(\'Logout error:\', error);\n      return errorResponse(res, \'Logout failed\', 500);\n    }\n  }\n\n  // Get current user\n  async getCurrentUser(req: Request, res: Response) {\n    try {\n      if (!req.user) {\n        return unauthorizedResponse(res, \'Not authenticated\');\n      }\n\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, req.user.userId),\n      });\n\n      if (!user) {\n        return unauthorizedResponse(res, \'User not found\');\n      }\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n\n      return successResponse(res, userWithoutPassword);\n    } catch (error) {\n      console.error(\'Get current user error:\', error);\n      return errorResponse(res, \'Failed to get user\', 500);\n    }\n  }\n\n  // Change password\n  async changePassword(req: Request, res: Response) {\n    try {\n      const { currentPassword, newPassword } = req.body;\n\n      if (!req.user) {\n        return unauthorizedResponse(res, \'Not authenticated\');\n      }\n\n      // Get user\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, req.user.userId),\n      });\n\n      if (!user) {\n        return errorResponse(res, \'User not found\', 404);\n      }\n\n      // Verify current password\n      const isPasswordValid = await comparePassword(currentPassword, user.password);\n\n      if (!isPasswordValid) {\n        return errorResponse(res, \'Current password is incorrect\', 400);\n      }\n\n      // Hash new password\n      const hashedPassword = await hashPassword(newPassword);\n\n      // Update password\n      await db\n        .update(users)\n        .set({ password: hashedPassword, updatedAt: new Date() })\n        .where(eq(users.id, user.id));\n\n      return successResponse(res, null, \'Password changed successfully\');\n    } catch (error) {\n      console.error(\'Change password error:\', error);\n      return errorResponse(res, \'Failed to change password\', 500);\n    }\n  }\n}\n</create-file>\n</function_calls>'}