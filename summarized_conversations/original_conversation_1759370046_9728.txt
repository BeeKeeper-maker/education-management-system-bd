{'role': 'assistant', 'content': 'Perfect! Now let\'s begin building the Financial Management frontend pages. I\'ll start with **Page 1: Fee Collection Interface** - the most critical page for the financial workflow.\n\n## ðŸŽ¯ Building Fee Collection Page\n\nThis will be a comprehensive interface for admins/accountants to collect fees, manage payments, and generate receipts.\n\n<function_calls>\n<create-file file_path="client/src/pages/FeeCollection.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \'@/components/ui/dialog\';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \'@/components/ui/tabs\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { Search, DollarSign, Receipt, Printer, CheckCircle, AlertCircle, Calendar, User } from \'lucide-react\';\n\ninterface Student {\n  id: string;\n  studentId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  currentClass?: string;\n  currentSection?: string;\n}\n\ninterface FeeStructure {\n  id: string;\n  name: string;\n  totalAmount: number;\n  items: FeeStructureItem[];\n}\n\ninterface FeeStructureItem {\n  id: string;\n  categoryName: string;\n  amount: number;\n  dueDate: string;\n}\n\ninterface StudentFee {\n  id: string;\n  feeStructure: FeeStructure;\n  totalAmount: number;\n  paidAmount: number;\n  dueAmount: number;\n  status: string;\n  dueDate: string;\n}\n\ninterface PaymentHistory {\n  id: string;\n  receiptNumber: string;\n  amount: number;\n  paymentDate: string;\n  paymentMethod: string;\n  collectedBy: string;\n}\n\nexport default function FeeCollection() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [searchResults, setSearchResults] = useState<Student[]>([]);\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [studentFees, setStudentFees] = useState<StudentFee[]>([]);\n  const [selectedFee, setSelectedFee] = useState<StudentFee | null>(null);\n  const [paymentHistory, setPaymentHistory] = useState<PaymentHistory[]>([]);\n  \n  const [paymentAmount, setPaymentAmount] = useState(\'\');\n  const [paymentMethod, setPaymentMethod] = useState(\'cash\');\n  const [discountAmount, setDiscountAmount] = useState(\'\');\n  const [discountReason, setDiscountReason] = useState(\'\');\n  const [remarks, setRemarks] = useState(\'\');\n  \n  const [isSearching, setIsSearching] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showReceipt, setShowReceipt] = useState(false);\n  const [receiptData, setReceiptData] = useState<any>(null);\n\n  // Search students\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) {\n      toast({\n        title: \'Search Required\',\n        description: \'Please enter a student name, ID, or admission number\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      const response = await fetch(`/api/students?search=${encodeURIComponent(searchQuery)}`, {\n        headers: {\n          \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n      });\n\n      if (!response.ok) throw new Error(\'Failed to search students\');\n\n      const data = await response.json();\n      setSearchResults(data.students || []);\n\n      if (data.students.length === 0) {\n        toast({\n          title: \'No Results\',\n          description: \'No students found matching your search\',\n        });\n      }\n    } catch (error) {\n      console.error(\'Search error:\', error);\n      toast({\n        title: \'Search Failed\',\n        description: \'Failed to search students. Please try again.\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Select student and load their fees\n  const handleSelectStudent = async (student: Student) => {\n    setSelectedStudent(student);\n    setSearchResults([]);\n    setSearchQuery(\'\');\n    \n    // Load student fees\n    try {\n      const [feesResponse, paymentsResponse] = await Promise.all([\n        fetch(`/api/fees/student/${student.id}`, {\n          headers: {\n            \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n          },\n        }),\n        fetch(`/api/fees/payments/${student.id}`, {\n          headers: {\n            \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n          },\n        }),\n      ]);\n\n      if (!feesResponse.ok) throw new Error(\'Failed to load fees\');\n\n      const feesData = await feesResponse.json();\n      const paymentsData = paymentsResponse.ok ? await paymentsResponse.json() : { payments: [] };\n\n      setStudentFees(feesData.fees || []);\n      setPaymentHistory(paymentsData.payments || []);\n\n      // Auto-select first pending fee\n      const pendingFee = feesData.fees?.find((f: StudentFee) => f.status !== \'paid\');\n      if (pendingFee) {\n        setSelectedFee(pendingFee);\n        setPaymentAmount(pendingFee.dueAmount.toString());\n      }\n    } catch (error) {\n      console.error(\'Load fees error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load student fees\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  // Process payment\n  const handleProcessPayment = async () => {\n    if (!selectedStudent || !selectedFee) return;\n\n    const amount = parseFloat(paymentAmount);\n    const discount = parseFloat(discountAmount) || 0;\n\n    if (isNaN(amount) || amount <= 0) {\n      toast({\n        title: \'Invalid Amount\',\n        description: \'Please enter a valid payment amount\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    if (amount > selectedFee.dueAmount) {\n      toast({\n        title: \'Amount Exceeds Due\',\n        description: \'Payment amount cannot exceed due amount\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    if (discount > 0 && !discountReason.trim()) {\n      toast({\n        title: \'Discount Reason Required\',\n        description: \'Please provide a reason for the discount\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      const response = await fetch(\'/api/fees/payments\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          studentFeeId: selectedFee.id,\n          amount,\n          paymentMethod,\n          discountAmount: discount,\n          discountReason: discount > 0 ? discountReason : undefined,\n          remarks: remarks || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Payment failed\');\n      }\n\n      const data = await response.json();\n      \n      // Show receipt\n      setReceiptData(data.payment);\n      setShowReceipt(true);\n\n      // Refresh student fees\n      handleSelectStudent(selectedStudent);\n\n      // Reset form\n      setPaymentAmount(\'\');\n      setDiscountAmount(\'\');\n      setDiscountReason(\'\');\n      setRemarks(\'\');\n\n      toast({\n        title: \'Payment Successful\',\n        description: `Receipt #${data.payment.receiptNumber} generated`,\n      });\n    } catch (error: any) {\n      console.error(\'Payment error:\', error);\n      toast({\n        title: \'Payment Failed\',\n        description: error.message || \'Failed to process payment\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Print receipt\n  const handlePrintReceipt = () => {\n    window.print();\n  };\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Fee Collection</h1>\n          <p className="text-muted-foreground">Collect fees and generate receipts</p>\n        </div>\n        <Badge variant="outline" className="text-lg px-4 py-2">\n          <User className="h-4 w-4 mr-2" />\n          {user?.firstName} {user?.lastName}\n        </Badge>\n      </div>\n\n      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">\n        {/* Left Column - Student Search & Selection */}\n        <div className="lg:col-span-1 space-y-6">\n          {/* Search Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Search Student</CardTitle>\n              <CardDescription>Find student by name, ID, or admission number</CardDescription>\n            </CardHeader>\n            <CardContent className="space-y-4">\n              <div className="flex gap-2">\n                <Input\n                  placeholder="Enter student name or ID..."\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyPress={(e) => e.key === \'Enter\' && handleSearch()}\n                />\n                <Button onClick={handleSearch} disabled={isSearching}>\n                  <Search className="h-4 w-4" />\n                </Button>\n              </div>\n\n              {/* Search Results */}\n              {searchResults.length > 0 && (\n                <div className="space-y-2 max-h-96 overflow-y-auto">\n                  {searchResults.map((student) => (\n                    <Card\n                      key={student.id}\n                      className="cursor-pointer hover:bg-accent transition-colors"\n                      onClick={() => handleSelectStudent(student)}\n                    >\n                      <CardContent className="p-4">\n                        <div className="font-medium">{student.firstName} {student.lastName}</div>\n                        <div className="text-sm text-muted-foreground">{student.studentId}</div>\n                        {student.currentClass && (\n                          <div className="text-sm text-muted-foreground">\n                            Class {student.currentClass} - {student.currentSection}\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Selected Student Card */}\n          {selectedStudent && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Selected Student</CardTitle>\n              </CardHeader>\n              <CardContent className="space-y-2">\n                <div className="flex items-center justify-between">\n                  <span className="text-sm text-muted-foreground">Name:</span>\n                  <span className="font-medium">{selectedStudent.firstName} {selectedStudent.lastName}</span>\n                </div>\n                <div className="flex items-center justify-between">\n                  <span className="text-sm text-muted-foreground">Student ID:</span>\n                  <span className="font-medium">{selectedStudent.studentId}</span>\n                </div>\n                {selectedStudent.currentClass && (\n                  <div className="flex items-center justify-between">\n                    <span className="text-sm text-muted-foreground">Class:</span>\n                    <span className="font-medium">\n                      {selectedStudent.currentClass} - {selectedStudent.currentSection}\n                    </span>\n                  </div>\n                )}\n                <div className="flex items-center justify-between">\n                  <span className="text-sm text-muted-foreground">Email:</span>\n                  <span className="font-medium text-sm">{selectedStudent.email}</span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Right Column - Fee Details & Payment */}\n        <div className="lg:col-span-2 space-y-6">\n          {selectedStudent ? (\n            <Tabs defaultValue="payment" className="w-full">\n              <TabsList className="grid w-full grid-cols-2">\n                <TabsTrigger value="payment">Payment</TabsTrigger>\n                <TabsTrigger value="history">Payment History</TabsTrigger>\n              </TabsList>\n\n              {/* Payment Tab */}\n              <TabsContent value="payment" className="space-y-6">\n                {/* Fee Structures */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Fee Structures</CardTitle>\n                    <CardDescription>Select a fee structure to collect payment</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {studentFees.length === 0 ? (\n                      <div className="text-center py-8 text-muted-foreground">\n                        <AlertCircle className="h-12 w-12 mx-auto mb-4 opacity-50" />\n                        <p>No fee structures assigned to this student</p>\n                      </div>\n                    ) : (\n                      <div className="space-y-3">\n                        {studentFees.map((fee) => (\n                          <Card\n                            key={fee.id}\n                            className={`cursor-pointer transition-all ${\n                              selectedFee?.id === fee.id\n                                ? \'border-primary shadow-md\'\n                                : \'hover:border-accent\'\n                            }`}\n                            onClick={() => {\n                              setSelectedFee(fee);\n                              setPaymentAmount(fee.dueAmount.toString());\n                            }}\n                          >\n                            <CardContent className="p-4">\n                              <div className="flex items-center justify-between mb-2">\n                                <h4 className="font-semibold">{fee.feeStructure.name}</h4>\n                                <Badge\n                                  variant={\n                                    fee.status === \'paid\'\n                                      ? \'default\'\n                                      : fee.status === \'partial\'\n                                      ? \'secondary\'\n                                      : \'destructive\'\n                                  }\n                                >\n                                  {fee.status}\n                                </Badge>\n                              </div>\n                              <div className="grid grid-cols-3 gap-4 text-sm">\n                                <div>\n                                  <span className="text-muted-foreground">Total:</span>\n                                  <div className="font-medium">${fee.totalAmount.toFixed(2)}</div>\n                                </div>\n                                <div>\n                                  <span className="text-muted-foreground">Paid:</span>\n                                  <div className="font-medium text-green-600">${fee.paidAmount.toFixed(2)}</div>\n                                </div>\n                                <div>\n                                  <span className="text-muted-foreground">Due:</span>\n                                  <div className="font-medium text-red-600">${fee.dueAmount.toFixed(2)}</div>\n                                </div>\n                              </div>\n                              <div className="mt-2 text-sm text-muted-foreground flex items-center">\n                                <Calendar className="h-3 w-3 mr-1" />\n                                Due: {new Date(fee.dueDate).toLocaleDateString()}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Payment Form */}\n                {selectedFee && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Collect Payment</CardTitle>\n                      <CardDescription>Enter payment details</CardDescription>\n                    </CardHeader>\n                    <CardContent className="space-y-4">\n                      <div className="grid grid-cols-2 gap-4">\n                        <div className="space-y-2">\n                          <Label htmlFor="amount">Payment Amount *</Label>\n                          <Input\n                            id="amount"\n                            type="number"\n                            step="0.01"\n                            placeholder="0.00"\n                            value={paymentAmount}\n                            onChange={(e) => setPaymentAmount(e.target.value)}\n                          />\n                          <p className="text-xs text-muted-foreground">\n                            Maximum: ${selectedFee.dueAmount.toFixed(2)}\n                          </p>\n                        </div>\n\n                        <div className="space-y-2">\n                          <Label htmlFor="method">Payment Method *</Label>\n                          <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value="cash">Cash</SelectItem>\n                              <SelectItem value="card">Card</SelectItem>\n                              <SelectItem value="bank_transfer">Bank Transfer</SelectItem>\n                              <SelectItem value="cheque">Cheque</SelectItem>\n                              <SelectItem value="online">Online Payment</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      <div className="grid grid-cols-2 gap-4">\n                        <div className="space-y-2">\n                          <Label htmlFor="discount">Discount Amount</Label>\n                          <Input\n                            id="discount"\n                            type="number"\n                            step="0.01"\n                            placeholder="0.00"\n                            value={discountAmount}\n                            onChange={(e) => setDiscountAmount(e.target.value)}\n                          />\n                        </div>\n\n                        <div className="space-y-2">\n                          <Label htmlFor="discountReason">Discount Reason</Label>\n                          <Input\n                            id="discountReason"\n                            placeholder="e.g., Sibling discount"\n                            value={discountReason}\n                            onChange={(e) => setDiscountReason(e.target.value)}\n                            disabled={!discountAmount || parseFloat(discountAmount) === 0}\n                          />\n                        </div>\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label htmlFor="remarks">Remarks (Optional)</Label>\n                        <Input\n                          id="remarks"\n                          placeholder="Additional notes..."\n                          value={remarks}\n                          onChange={(e) => setRemarks(e.target.value)}\n                        />\n                      </div>\n\n                      <div className="flex items-center justify-between pt-4 border-t">\n                        <div>\n                          <div className="text-sm text-muted-foreground">Amount to Pay</div>\n                          <div className="text-2xl font-bold text-primary">\n                            ${(parseFloat(paymentAmount) || 0).toFixed(2)}\n                          </div>\n                        </div>\n                        <Button\n                          size="lg"\n                          onClick={handleProcessPayment}\n                          disabled={isProcessing || !paymentAmount}\n                        >\n                          <DollarSign className="h-4 w-4 mr-2" />\n                          {isProcessing ? \'Processing...\' : \'Process Payment\'}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              {/* Payment History Tab */}\n              <TabsContent value="history">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Payment History</CardTitle>\n                    <CardDescription>All payments made by this student</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {paymentHistory.length === 0 ? (\n                      <div className="text-center py-8 text-muted-foreground">\n                        <Receipt className="h-12 w-12 mx-auto mb-4 opacity-50" />\n                        <p>No payment history available</p>\n                      </div>\n                    ) : (\n                      <div className="space-y-3">\n                        {paymentHistory.map((payment) => (\n                          <Card key={payment.id}>\n                            <CardContent className="p-4">\n                              <div className="flex items-center justify-between mb-2">\n                                <div className="flex items-center gap-2">\n                                  <Receipt className="h-4 w-4 text-primary" />\n                                  <span className="font-medium">{payment.receiptNumber}</span>\n                                </div>\n                                <Badge variant="outline">{payment.paymentMethod}</Badge>\n                              </div>\n                              <div className="grid grid-cols-3 gap-4 text-sm">\n                                <div>\n                                  <span className="text-muted-foreground">Amount:</span>\n                                  <div className="font-medium text-green-600">\n                                    ${payment.amount.toFixed(2)}\n                                  </div>\n                                </div>\n                                <div>\n                                  <span className="text-muted-foreground">Date:</span>\n                                  <div className="font-medium">\n                                    {new Date(payment.paymentDate).toLocaleDateString()}\n                                  </div>\n                                </div>\n                                <div>\n                                  <span className="text-muted-foreground">Collected By:</span>\n                                  <div className="font-medium text-sm">{payment.collectedBy}</div>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          ) : (\n            <Card>\n              <CardContent className="py-16">\n                <div className="text-center text-muted-foreground">\n                  <Search className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                  <h3 className="text-lg font-semibold mb-2">No Student Selected</h3>\n                  <p>Search and select a student to collect fees</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Receipt Dialog */}\n      <Dialog open={showReceipt} onOpenChange={setShowReceipt}>\n        <DialogContent className="max-w-2xl">\n          <DialogHeader>\n            <DialogTitle>Payment Receipt</DialogTitle>\n            <DialogDescription>Payment processed successfully</DialogDescription>\n          </DialogHeader>\n          \n          {receiptData && (\n            <div className="space-y-6 print:p-8">\n              {/* Receipt Header */}\n              <div className="text-center border-b pb-4">\n                <h2 className="text-2xl font-bold">EduPro</h2>\n                <p className="text-sm text-muted-foreground">Fee Payment Receipt</p>\n              </div>\n\n              {/* Receipt Details */}\n              <div className="grid grid-cols-2 gap-4 text-sm">\n                <div>\n                  <span className="text-muted-foreground">Receipt Number:</span>\n                  <div className="font-medium">{receiptData.receiptNumber}</div>\n                </div>\n                <div>\n                  <span className="text-muted-foreground">Date:</span>\n                  <div className="font-medium">\n                    {new Date(receiptData.paymentDate).toLocaleDateString()}\n                  </div>\n                </div>\n                <div>\n                  <span className="text-muted-foreground">Student Name:</span>\n                  <div className="font-medium">\n                    {selectedStudent?.firstName} {selectedStudent?.lastName}\n                  </div>\n                </div>\n                <div>\n                  <span className="text-muted-foreground">Student ID:</span>\n                  <div className="font-medium">{selectedStudent?.studentId}</div>\n                </div>\n                <div>\n                  <span className="text-muted-foreground">Payment Method:</span>\n                  <div className="font-medium capitalize">{receiptData.paymentMethod}</div>\n                </div>\n                <div>\n                  <span className="text-muted-foreground">Collected By:</span>\n                  <div className="font-medium">{user?.firstName} {user?.lastName}</div>\n                </div>\n              </div>\n\n              {/* Amount */}\n              <div className="border-t border-b py-4">\n                <div className="flex items-center justify-between text-lg">\n                  <span className="font-semibold">Amount Paid:</span>\n                  <span className="text-2xl font-bold text-green-600">\n                    ${receiptData.amount.toFixed(2)}\n                  </span>\n                </div>\n                {receiptData.discountAmount > 0 && (\n                  <div className="flex items-center justify-between text-sm mt-2">\n                    <span className="text-muted-foreground">Discount Applied:</span>\n                    <span className="text-red-600">-${receiptData.discountAmount.toFixed(2)}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Success Message */}\n              <div className="flex items-center justify-center gap-2 text-green-600">\n                <CheckCircle className="h-5 w-5" />\n                <span className="font-medium">Payment Successful</span>\n              </div>\n\n              {/* Actions */}\n              <div className="flex gap-2 print:hidden">\n                <Button onClick={handlePrintReceipt} className="flex-1">\n                  <Printer className="h-4 w-4 mr-2" />\n                  Print Receipt\n                </Button>\n                <Button variant="outline" onClick={() => setShowReceipt(false)} className="flex-1">\n                  Close\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}