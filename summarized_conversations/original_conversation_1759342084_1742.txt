{'role': 'assistant', 'content': 'Now let me create the Exam Schedule Builder page:\n\n<function_calls>\n<create-file file_path="client/src/pages/ExamSchedule.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useParams, useLocation } from \'wouter\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'../components/ui/card\';\nimport { Button } from \'../components/ui/button\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \'../components/ui/dialog\';\nimport { Input } from \'../components/ui/input\';\nimport { Label } from \'../components/ui/label\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'../components/ui/select\';\nimport { Textarea } from \'../components/ui/textarea\';\nimport { Badge } from \'../components/ui/badge\';\nimport { useToast } from \'../components/ui/use-toast\';\nimport { Calendar, Plus, Edit, Trash2, ArrowLeft, Clock, MapPin, FileText } from \'lucide-react\';\n\ninterface Exam {\n  id: string;\n  name: string;\n  startDate: string;\n  endDate: string;\n  examType: {\n    name: string;\n  };\n}\n\ninterface ExamSubject {\n  id: string;\n  examDate: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  totalMarks: number;\n  passingMarks: number;\n  roomNumber?: string;\n  instructions?: string;\n  class: {\n    id: string;\n    name: string;\n  };\n  section?: {\n    id: string;\n    name: string;\n  };\n  subject: {\n    id: string;\n    name: string;\n    code: string;\n  };\n}\n\ninterface Class {\n  id: string;\n  name: string;\n}\n\ninterface Section {\n  id: string;\n  name: string;\n}\n\ninterface Subject {\n  id: string;\n  name: string;\n  code: string;\n}\n\nexport default function ExamSchedule() {\n  const { examId } = useParams<{ examId: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const [exam, setExam] = useState<Exam | null>(null);\n  const [examSubjects, setExamSubjects] = useState<ExamSubject[]>([]);\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [subjects, setSubjects] = useState<Subject[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingSubject, setEditingSubject] = useState<ExamSubject | null>(null);\n  const [formData, setFormData] = useState({\n    classId: \'\',\n    sectionId: \'\',\n    subjectId: \'\',\n    examDate: \'\',\n    startTime: \'\',\n    endTime: \'\',\n    duration: 60,\n    totalMarks: 100,\n    passingMarks: 40,\n    roomNumber: \'\',\n    instructions: \'\',\n  });\n\n  useEffect(() => {\n    if (examId) {\n      fetchExam();\n      fetchExamSubjects();\n      fetchClasses();\n      fetchSubjects();\n    }\n  }, [examId]);\n\n  useEffect(() => {\n    if (formData.classId) {\n      fetchSections(formData.classId);\n    }\n  }, [formData.classId]);\n\n  const fetchExam = async () => {\n    try {\n      const response = await fetch(`/api/examinations/${examId}`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setExam(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching exam:\', error);\n    }\n  };\n\n  const fetchExamSubjects = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/examinations/${examId}`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setExamSubjects(data.data.subjects || []);\n      }\n    } catch (error) {\n      console.error(\'Error fetching exam subjects:\', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchClasses = async () => {\n    try {\n      const response = await fetch(\'/api/academic/classes\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setClasses(data.data);\n    } catch (error) {\n      console.error(\'Error fetching classes:\', error);\n    }\n  };\n\n  const fetchSections = async (classId: string) => {\n    try {\n      const response = await fetch(`/api/academic/classes/${classId}/sections`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setSections(data.data);\n    } catch (error) {\n      console.error(\'Error fetching sections:\', error);\n    }\n  };\n\n  const fetchSubjects = async () => {\n    try {\n      const response = await fetch(\'/api/academic/subjects\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setSubjects(data.data);\n    } catch (error) {\n      console.error(\'Error fetching subjects:\', error);\n    }\n  };\n\n  const openDialog = (subject?: ExamSubject) => {\n    if (subject) {\n      setEditingSubject(subject);\n      setFormData({\n        classId: subject.class.id,\n        sectionId: subject.section?.id || \'\',\n        subjectId: subject.subject.id,\n        examDate: subject.examDate,\n        startTime: subject.startTime,\n        endTime: subject.endTime,\n        duration: subject.duration,\n        totalMarks: subject.totalMarks,\n        passingMarks: subject.passingMarks,\n        roomNumber: subject.roomNumber || \'\',\n        instructions: subject.instructions || \'\',\n      });\n    } else {\n      setEditingSubject(null);\n      setFormData({\n        classId: \'\',\n        sectionId: \'\',\n        subjectId: \'\',\n        examDate: \'\',\n        startTime: \'\',\n        endTime: \'\',\n        duration: 60,\n        totalMarks: 100,\n        passingMarks: 40,\n        roomNumber: \'\',\n        instructions: \'\',\n      });\n    }\n    setDialogOpen(true);\n  };\n\n  const saveExamSubject = async () => {\n    try {\n      const response = await fetch(\'/api/examinations/subjects\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          examId,\n          ...formData,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        toast({\n          title: \'Success\',\n          description: \'Exam subject scheduled successfully\',\n        });\n        setDialogOpen(false);\n        fetchExamSubjects();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to schedule exam subject\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\'en-US\', {\n      weekday: \'short\',\n      year: \'numeric\',\n      month: \'short\',\n      day: \'numeric\',\n    });\n  };\n\n  const groupByDate = () => {\n    const grouped: { [key: string]: ExamSubject[] } = {};\n    examSubjects.forEach(subject => {\n      if (!grouped[subject.examDate]) {\n        grouped[subject.examDate] = [];\n      }\n      grouped[subject.examDate].push(subject);\n    });\n    return Object.entries(grouped).sort(([a], [b]) => a.localeCompare(b));\n  };\n\n  const groupedSubjects = groupByDate();\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <div className="flex items-center gap-2 mb-2">\n            <Button variant="ghost" size="sm" onClick={() => navigate(\'/exams\')}>\n              <ArrowLeft className="h-4 w-4 mr-2" />\n              Back to Exams\n            </Button>\n          </div>\n          <h1 className="text-3xl font-bold">{exam?.name}</h1>\n          <p className="text-muted-foreground">\n            {exam?.examType.name} | {exam && formatDate(exam.startDate)} - {exam && formatDate(exam.endDate)}\n          </p>\n        </div>\n        <Button onClick={() => openDialog()}>\n          <Plus className="mr-2 h-4 w-4" />\n          Schedule Subject\n        </Button>\n      </div>\n\n      {/* Statistics */}\n      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Total Subjects</p>\n              <p className="text-3xl font-bold">{examSubjects.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Exam Days</p>\n              <p className="text-3xl font-bold">{groupedSubjects.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Total Marks</p>\n              <p className="text-3xl font-bold">\n                {examSubjects.reduce((sum, s) => sum + s.totalMarks, 0)}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Classes</p>\n              <p className="text-3xl font-bold">\n                {new Set(examSubjects.map(s => s.class.id)).size}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Exam Schedule */}\n      {loading ? (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <p className="text-muted-foreground">Loading schedule...</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : groupedSubjects.length > 0 ? (\n        <div className="space-y-6">\n          {groupedSubjects.map(([date, subjects]) => (\n            <Card key={date}>\n              <CardHeader>\n                <CardTitle className="flex items-center gap-2">\n                  <Calendar className="h-5 w-5" />\n                  {formatDate(date)}\n                </CardTitle>\n                <CardDescription>{subjects.length} subject(s) scheduled</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className="space-y-3">\n                  {subjects.map(subject => (\n                    <div\n                      key={subject.id}\n                      className="flex items-start justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors"\n                    >\n                      <div className="flex-1">\n                        <div className="flex items-center gap-3 mb-2">\n                          <h3 className="text-lg font-semibold">{subject.subject.name}</h3>\n                          <Badge variant="outline">{subject.subject.code}</Badge>\n                          <Badge>{subject.class.name} - {subject.section?.name}</Badge>\n                        </div>\n                        <div className="flex flex-wrap gap-4 text-sm text-muted-foreground">\n                          <div className="flex items-center gap-1">\n                            <Clock className="h-4 w-4" />\n                            <span>{subject.startTime} - {subject.endTime} ({subject.duration} min)</span>\n                          </div>\n                          {subject.roomNumber && (\n                            <div className="flex items-center gap-1">\n                              <MapPin className="h-4 w-4" />\n                              <span>Room {subject.roomNumber}</span>\n                            </div>\n                          )}\n                          <div className="flex items-center gap-1">\n                            <FileText className="h-4 w-4" />\n                            <span>Total: {subject.totalMarks} | Passing: {subject.passingMarks}</span>\n                          </div>\n                        </div>\n                        {subject.instructions && (\n                          <p className="mt-2 text-sm text-muted-foreground">{subject.instructions}</p>\n                        )}\n                      </div>\n                      <div className="flex gap-2">\n                        <Button\n                          size="sm"\n                          variant="outline"\n                          onClick={() => navigate(`/exams/marks/${subject.id}`)}\n                        >\n                          <Edit className="h-4 w-4 mr-1" />\n                          Enter Marks\n                        </Button>\n                        <Button\n                          size="sm"\n                          variant="ghost"\n                          onClick={() => openDialog(subject)}\n                        >\n                          <Edit className="h-4 w-4" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <Calendar className="mx-auto h-12 w-12 text-muted-foreground mb-4" />\n              <p className="text-muted-foreground mb-4">No subjects scheduled yet</p>\n              <Button onClick={() => openDialog()}>\n                <Plus className="mr-2 h-4 w-4" />\n                Schedule First Subject\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Schedule Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">\n          <DialogHeader>\n            <DialogTitle>{editingSubject ? \'Edit\' : \'Schedule\'} Exam Subject</DialogTitle>\n            <DialogDescription>Fill in the details to schedule an exam subject</DialogDescription>\n          </DialogHeader>\n          <div className="space-y-4">\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-2">\n                <Label>Class *</Label>\n                <Select value={formData.classId} onValueChange={value => setFormData({ ...formData, classId: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder="Select class" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {classes.map(cls => (\n                      <SelectItem key={cls.id} value={cls.id}>\n                        {cls.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className="space-y-2">\n                <Label>Section</Label>\n                <Select\n                  value={formData.sectionId}\n                  onValueChange={value => setFormData({ ...formData, sectionId: value })}\n                  disabled={!formData.classId}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder="Select section" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {sections.map(section => (\n                      <SelectItem key={section.id} value={section.id}>\n                        {section.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Subject *</Label>\n              <Select value={formData.subjectId} onValueChange={value => setFormData({ ...formData, subjectId: value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder="Select subject" />\n                </SelectTrigger>\n                <SelectContent>\n                  {subjects.map(subject => (\n                    <SelectItem key={subject.id} value={subject.id}>\n                      {subject.name} ({subject.code})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className="grid grid-cols-3 gap-4">\n              <div className="space-y-2">\n                <Label>Exam Date *</Label>\n                <Input\n                  type="date"\n                  value={formData.examDate}\n                  onChange={e => setFormData({ ...formData, examDate: e.target.value })}\n                  min={exam?.startDate}\n                  max={exam?.endDate}\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label>Start Time *</Label>\n                <Input\n                  type="time"\n                  value={formData.startTime}\n                  onChange={e => setFormData({ ...formData, startTime: e.target.value })}\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label>End Time *</Label>\n                <Input\n                  type="time"\n                  value={formData.endTime}\n                  onChange={e => setFormData({ ...formData, endTime: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div className="grid grid-cols-3 gap-4">\n              <div className="space-y-2">\n                <Label>Duration (minutes) *</Label>\n                <Input\n                  type="number"\n                  value={formData.duration}\n                  onChange={e => setFormData({ ...formData, duration: parseInt(e.target.value) })}\n                  min="15"\n                  step="15"\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label>Total Marks *</Label>\n                <Input\n                  type="number"\n                  value={formData.totalMarks}\n                  onChange={e => setFormData({ ...formData, totalMarks: parseInt(e.target.value) })}\n                  min="1"\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label>Passing Marks *</Label>\n                <Input\n                  type="number"\n                  value={formData.passingMarks}\n                  onChange={e => setFormData({ ...formData, passingMarks: parseInt(e.target.value) })}\n                  min="1"\n                  max={formData.totalMarks}\n                />\n              </div>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Room Number</Label>\n              <Input\n                placeholder="e.g., 101, Lab 1"\n                value={formData.roomNumber}\n                onChange={e => setFormData({ ...formData, roomNumber: e.target.value })}\n              />\n            </div>\n\n            <div className="space-y-2">\n              <Label>Instructions</Label>\n              <Textarea\n                placeholder="Special instructions for this exam"\n                value={formData.instructions}\n                onChange={e => setFormData({ ...formData, instructions: e.target.value })}\n                rows={3}\n              />\n            </div>\n\n            <div className="flex gap-2 justify-end pt-4">\n              <Button variant="outline" onClick={() => setDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={saveExamSubject}\n                disabled={\n                  !formData.classId ||\n                  !formData.subjectId ||\n                  !formData.examDate ||\n                  !formData.startTime ||\n                  !formData.endTime\n                }\n              >\n                {editingSubject ? \'Update\' : \'Schedule\'} Subject\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}