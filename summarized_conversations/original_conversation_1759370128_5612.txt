{'role': 'assistant', 'content': 'Now let\'s create the routes for both modules:\n\n<function_calls>\n<create-file file_path="server/src/routes/hostel.routes.ts">\nimport { Router } from \'express\';\nimport { authenticate, authorize } from \'../middleware/auth\';\nimport * as hostelController from \'../controllers/hostel.controller\';\n\nconst router = Router();\n\n// All routes require authentication\nrouter.use(authenticate);\n\n// Hostel routes\nrouter.get(\'/hostels\', hostelController.getHostels);\nrouter.get(\'/hostels/statistics\', hostelController.getHostelStatistics);\nrouter.get(\'/hostels/:id\', hostelController.getHostelById);\nrouter.post(\'/hostels\', authorize([\'superadmin\', \'admin\', \'hostel_manager\']), hostelController.createHostel);\nrouter.put(\'/hostels/:id\', authorize([\'superadmin\', \'admin\', \'hostel_manager\']), hostelController.updateHostel);\nrouter.delete(\'/hostels/:id\', authorize([\'superadmin\', \'admin\']), hostelController.deleteHostel);\n\n// Room routes\nrouter.get(\'/hostels/:hostelId/rooms\', hostelController.getRoomsByHostel);\nrouter.post(\'/rooms\', authorize([\'superadmin\', \'admin\', \'hostel_manager\']), hostelController.createRoom);\nrouter.put(\'/rooms/:id\', authorize([\'superadmin\', \'admin\', \'hostel_manager\']), hostelController.updateRoom);\nrouter.delete(\'/rooms/:id\', authorize([\'superadmin\', \'admin\']), hostelController.deleteRoom);\n\n// Allocation routes\nrouter.get(\'/allocations\', hostelController.getAllocations);\nrouter.post(\'/allocations\', authorize([\'superadmin\', \'admin\', \'hostel_manager\']), hostelController.allocateRoom);\nrouter.patch(\'/allocations/:id/vacate\', authorize([\'superadmin\', \'admin\', \'hostel_manager\']), hostelController.vacateRoom);\nrouter.get(\'/students/:studentId/hostel\', hostelController.getStudentHostel);\n\nexport default router;\n</create-file>\n</function_calls>'}