{'role': 'assistant', 'content': '## Step 7: Create Backend API for User Management\n\n<function_calls>\n<create-file file_path="server/src/controllers/users.controller.ts">\nimport { Request, Response } from \'express\';\nimport { eq, or, ilike, desc } from \'drizzle-orm\';\nimport { db } from \'../db\';\nimport { users } from \'../db/schema\';\nimport { hashPassword } from \'../utils/password\';\nimport { successResponse, errorResponse, notFoundResponse } from \'../utils/response\';\n\nexport class UsersController {\n  // Get all users with pagination and search\n  async getAllUsers(req: Request, res: Response) {\n    try {\n      const { \n        page = 1, \n        limit = 10, \n        search = \'\', \n        role = \'\',\n        status = \'\' \n      } = req.query;\n\n      const pageNum = parseInt(page as string, 10);\n      const limitNum = parseInt(limit as string, 10);\n      const offset = (pageNum - 1) * limitNum;\n\n      // Build where conditions\n      let whereConditions: any[] = [];\n\n      if (search) {\n        whereConditions.push(\n          or(\n            ilike(users.email, `%${search}%`),\n            ilike(users.firstName, `%${search}%`),\n            ilike(users.lastName, `%${search}%`)\n          )\n        );\n      }\n\n      if (role) {\n        whereConditions.push(eq(users.role, role as string));\n      }\n\n      if (status === \'active\') {\n        whereConditions.push(eq(users.isActive, true));\n      } else if (status === \'inactive\') {\n        whereConditions.push(eq(users.isActive, false));\n      }\n\n      // Get total count\n      const totalResult = await db\n        .select()\n        .from(users)\n        .where(whereConditions.length > 0 ? whereConditions[0] : undefined);\n\n      const total = totalResult.length;\n\n      // Get paginated users\n      const usersList = await db\n        .select({\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          role: users.role,\n          phone: users.phone,\n          isActive: users.isActive,\n          createdAt: users.createdAt,\n        })\n        .from(users)\n        .where(whereConditions.length > 0 ? whereConditions[0] : undefined)\n        .orderBy(desc(users.createdAt))\n        .limit(limitNum)\n        .offset(offset);\n\n      return successResponse(res, {\n        users: usersList,\n        pagination: {\n          page: pageNum,\n          limit: limitNum,\n          total,\n          totalPages: Math.ceil(total / limitNum),\n        },\n      });\n    } catch (error) {\n      console.error(\'Get all users error:\', error);\n      return errorResponse(res, \'Failed to fetch users\', 500);\n    }\n  }\n\n  // Get user by ID\n  async getUserById(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, id),\n      });\n\n      if (!user) {\n        return notFoundResponse(res, \'User not found\');\n      }\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n\n      return successResponse(res, userWithoutPassword);\n    } catch (error) {\n      console.error(\'Get user by ID error:\', error);\n      return errorResponse(res, \'Failed to fetch user\', 500);\n    }\n  }\n\n  // Create new user\n  async createUser(req: Request, res: Response) {\n    try {\n      const {\n        email,\n        password,\n        firstName,\n        lastName,\n        role,\n        phone,\n        address,\n        dateOfBirth,\n        gender,\n        bloodGroup,\n      } = req.body;\n\n      // Check if user already exists\n      const existingUser = await db.query.users.findFirst({\n        where: eq(users.email, email),\n      });\n\n      if (existingUser) {\n        return errorResponse(res, \'User with this email already exists\', 409);\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(password);\n\n      // Create user\n      const [newUser] = await db\n        .insert(users)\n        .values({\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          role: role || \'student\',\n          phone,\n          address,\n          dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : undefined,\n          gender,\n          bloodGroup,\n          isActive: true,\n        })\n        .returning();\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = newUser;\n\n      return successResponse(\n        res,\n        userWithoutPassword,\n        \'User created successfully\',\n        201\n      );\n    } catch (error) {\n      console.error(\'Create user error:\', error);\n      return errorResponse(res, \'Failed to create user\', 500);\n    }\n  }\n\n  // Update user\n  async updateUser(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const {\n        firstName,\n        lastName,\n        phone,\n        address,\n        dateOfBirth,\n        gender,\n        bloodGroup,\n        isActive,\n      } = req.body;\n\n      // Check if user exists\n      const existingUser = await db.query.users.findFirst({\n        where: eq(users.id, id),\n      });\n\n      if (!existingUser) {\n        return notFoundResponse(res, \'User not found\');\n      }\n\n      // Update user\n      const [updatedUser] = await db\n        .update(users)\n        .set({\n          firstName: firstName || existingUser.firstName,\n          lastName: lastName || existingUser.lastName,\n          phone: phone || existingUser.phone,\n          address: address || existingUser.address,\n          dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : existingUser.dateOfBirth,\n          gender: gender || existingUser.gender,\n          bloodGroup: bloodGroup || existingUser.bloodGroup,\n          isActive: isActive !== undefined ? isActive : existingUser.isActive,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, id))\n        .returning();\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = updatedUser;\n\n      return successResponse(res, userWithoutPassword, \'User updated successfully\');\n    } catch (error) {\n      console.error(\'Update user error:\', error);\n      return errorResponse(res, \'Failed to update user\', 500);\n    }\n  }\n\n  // Delete user (soft delete)\n  async deleteUser(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n\n      // Check if user exists\n      const existingUser = await db.query.users.findFirst({\n        where: eq(users.id, id),\n      });\n\n      if (!existingUser) {\n        return notFoundResponse(res, \'User not found\');\n      }\n\n      // Soft delete by setting isActive to false\n      await db\n        .update(users)\n        .set({\n          isActive: false,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, id));\n\n      return successResponse(res, null, \'User deleted successfully\');\n    } catch (error) {\n      console.error(\'Delete user error:\', error);\n      return errorResponse(res, \'Failed to delete user\', 500);\n    }\n  }\n\n  // Get user statistics\n  async getUserStats(req: Request, res: Response) {\n    try {\n      const allUsers = await db.select().from(users);\n\n      const stats = {\n        total: allUsers.length,\n        active: allUsers.filter(u => u.isActive).length,\n        inactive: allUsers.filter(u => !u.isActive).length,\n        byRole: {\n          superadmin: allUsers.filter(u => u.role === \'superadmin\').length,\n          admin: allUsers.filter(u => u.role === \'admin\').length,\n          teacher: allUsers.filter(u => u.role === \'teacher\').length,\n          student: allUsers.filter(u => u.role === \'student\').length,\n          guardian: allUsers.filter(u => u.role === \'guardian\').length,\n          accountant: allUsers.filter(u => u.role === \'accountant\').length,\n          hostel_manager: allUsers.filter(u => u.role === \'hostel_manager\').length,\n        },\n      };\n\n      return successResponse(res, stats);\n    } catch (error) {\n      console.error(\'Get user stats error:\', error);\n      return errorResponse(res, \'Failed to fetch user statistics\', 500);\n    }\n  }\n}\n</create-file>\n</function_calls>'}