{'role': 'assistant', 'content': '<function_calls>\n<full-file-rewrite file_path="todo.md">\n# Core Academic Operations Phase - Implementation Checklist\n\n## üéØ PHASE OVERVIEW\nBuild three interconnected modules: Attendance, Timetable, and Examinations as a cohesive system.\n\n---\n\n## üìä MODULE 1: ATTENDANCE SYSTEM\n\n### Database & Backend\n- [ ] Create attendance schema (attendance table with proper relationships)\n- [ ] Create attendance statistics table for caching\n- [ ] Implement attendance controller with CRUD operations\n- [ ] Create API endpoints for marking attendance\n- [ ] Create API endpoints for attendance reports\n- [ ] Add attendance statistics endpoints\n- [ ] Implement date range filtering\n- [ ] Add bulk attendance marking capability\n\n### Frontend - Teacher Interface\n- [ ] Create "Take Attendance" page with class/section selector\n- [ ] Build student list component with Present/Absent/Late toggles\n- [ ] Implement quick-mark functionality (default Present)\n- [ ] Add date selector for attendance marking\n- [ ] Create attendance submission with validation\n- [ ] Add success/error toast notifications\n- [ ] Implement attendance history view for teachers\n\n### Frontend - Admin Interface\n- [ ] Create attendance reports dashboard\n- [ ] Build date range filter component\n- [ ] Add class/section filter\n- [ ] Implement student-specific attendance view\n- [ ] Create attendance statistics cards\n- [ ] Build attendance trend charts (using recharts)\n- [ ] Add export functionality (CSV/PDF)\n\n### Integration\n- [ ] Update Student Profile page with attendance tab (real data)\n- [ ] Add attendance widget to Teacher dashboard\n- [ ] Add attendance overview to Admin dashboard\n- [ ] Update Student dashboard with personal attendance\n\n---\n\n## üìÖ MODULE 2: TIMETABLE/ROUTINE SYSTEM\n\n### Database & Backend\n- [ ] Create periods table (period definitions)\n- [ ] Create timetable_entries table (schedule entries)\n- [ ] Add conflict detection logic\n- [ ] Implement timetable controller\n- [ ] Create API for routine creation/editing\n- [ ] Add endpoints for fetching routines (by class, teacher, student)\n- [ ] Implement conflict checking endpoint\n- [ ] Add routine templates functionality\n\n### Frontend - Admin Interface\n- [ ] Create routine builder page with grid layout\n- [ ] Build period configuration interface\n- [ ] Implement drag-and-drop routine assignment\n- [ ] Add conflict detection UI warnings\n- [ ] Create teacher assignment dropdown\n- [ ] Build subject assignment interface\n- [ ] Add routine preview/print view\n- [ ] Implement routine templates management\n\n### Frontend - Views\n- [ ] Create class-wise routine view\n- [ ] Build teacher-wise routine view\n- [ ] Implement master routine view (all classes)\n- [ ] Add routine filtering and search\n- [ ] Create printable routine format\n\n### Integration\n- [ ] Add personal timetable to Teacher dashboard\n- [ ] Add personal timetable to Student dashboard\n- [ ] Create timetable widget for dashboards\n- [ ] Update navigation with timetable links\n\n---\n\n## üìù MODULE 3: EXAMINATION & RESULTS SYSTEM\n\n### Database & Backend\n- [ ] Create exam_types table (Midterm, Final, etc.)\n- [ ] Create exams table (exam instances)\n- [ ] Create exam_schedules table (subject-wise schedule)\n- [ ] Create marks table (student marks)\n- [ ] Create grading_system table (grade configuration)\n- [ ] Create result_cards table (processed results)\n- [ ] Implement exam controller with CRUD\n- [ ] Create marks entry controller\n- [ ] Build result processing logic (GPA calculation)\n- [ ] Implement merit position calculation\n- [ ] Add grade assignment logic\n- [ ] Create report card generation endpoint\n\n### Frontend - Admin Interface\n- [ ] Create exam types management page\n- [ ] Build exam creation form (multi-step)\n- [ ] Implement exam schedule builder\n- [ ] Add subject-wise exam configuration\n- [ ] Create grading system configuration page\n- [ ] Build exam list with filters\n\n### Frontend - Marks Entry (Masterpiece Feature)\n- [ ] Create Excel-like marks entry grid\n- [ ] Implement keyboard navigation (Tab, Enter, Arrow keys)\n- [ ] Add real-time validation (max marks, numeric only)\n- [ ] Build auto-save functionality\n- [ ] Add bulk import from CSV\n- [ ] Create marks entry progress indicator\n- [ ] Implement undo/redo functionality\n- [ ] Add marks statistics (class average, highest, lowest)\n\n### Frontend - Results & Report Cards\n- [ ] Create result processing page\n- [ ] Build automatic GPA calculation\n- [ ] Implement merit position assignment\n- [ ] Design beautiful report card template\n- [ ] Add report card preview\n- [ ] Implement PDF generation for report cards\n- [ ] Create bulk report card generation\n- [ ] Add result publication controls\n\n### Integration\n- [ ] Add exam schedule to Student dashboard\n- [ ] Add marks entry link to Teacher dashboard\n- [ ] Update Student Profile with results tab (real data)\n- [ ] Add report card access to Student portal\n- [ ] Add report card access to Guardian portal\n- [ ] Create exam notifications system\n- [ ] Add result announcement notifications\n\n---\n\n## üîó CROSS-MODULE INTEGRATION\n\n- [ ] Ensure attendance data flows to student profiles\n- [ ] Link timetable with attendance (pre-fill based on schedule)\n- [ ] Connect exam schedules with timetable\n- [ ] Add attendance requirements for exam eligibility\n- [ ] Create unified academic calendar view\n- [ ] Build comprehensive academic reports combining all three modules\n\n---\n\n## üé® UI/UX POLISH\n\n- [ ] Ensure consistent Shadcn UI usage across all pages\n- [ ] Add loading states and skeletons\n- [ ] Implement proper error boundaries\n- [ ] Add empty states with helpful messages\n- [ ] Create smooth transitions and animations\n- [ ] Ensure mobile responsiveness for all pages\n- [ ] Add keyboard shortcuts for power users\n- [ ] Implement dark mode support\n\n---\n\n## üß™ TESTING & VALIDATION\n\n- [ ] Test all API endpoints with various scenarios\n- [ ] Verify role-based access control\n- [ ] Test data validation (frontend and backend)\n- [ ] Verify database relationships and constraints\n- [ ] Test conflict detection in timetable\n- [ ] Validate GPA calculation accuracy\n- [ ] Test report card generation\n- [ ] Verify cross-module data flow\n\n---\n\n## üìö DOCUMENTATION\n\n- [ ] Update API documentation with new endpoints\n- [ ] Document database schema changes\n- [ ] Create user guides for each module\n- [ ] Add inline code comments\n- [ ] Update README with new features\n\n---\n\n## üöÄ DEPLOYMENT PREPARATION\n\n- [ ] Run all database migrations\n- [ ] Seed sample data for testing\n- [ ] Verify environment variables\n- [ ] Test production build\n- [ ] Update deployment documentation\n\n---\n\n## ‚úÖ COMPLETION CRITERIA\n\nAll tasks above must be marked [x] complete before using the \'complete\' tool.\nEach module must be fully functional, integrated, and tested.\n</full-file-rewrite>\n</function_calls>'}