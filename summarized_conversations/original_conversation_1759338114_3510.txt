{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/index.ts">\nimport express, { Express } from \'express\';\nimport cors from \'cors\';\nimport session from \'express-session\';\nimport connectPgSimple from \'connect-pg-simple\';\nimport path from \'path\';\nimport { config } from \'./config\';\nimport { pool, testConnection } from \'./db\';\nimport routes from \'./routes\';\nimport { errorHandler, notFoundHandler } from \'./middleware/errorHandler\';\n\nconst app: Express = express();\nconst PgSession = connectPgSimple(session);\n\n// Middleware\napp.use(cors({\n  origin: process.env.NODE_ENV === \'production\' \n    ? process.env.FRONTEND_URL \n    : \'http://localhost:5173\',\n  credentials: true,\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Session configuration\napp.use(\n  session({\n    store: new PgSession({\n      pool,\n      tableName: \'sessions\',\n      createTableIfMissing: true,\n    }),\n    secret: config.session.secret,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      maxAge: config.session.maxAge,\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \'production\',\n      sameSite: \'lax\',\n    },\n  })\n);\n\n// Static files (uploads)\napp.use(\'/uploads\', express.static(path.join(process.cwd(), config.upload.dir)));\n\n// API routes\napp.use(\'/api\', routes);\n\n// Serve frontend in production\nif (process.env.NODE_ENV === \'production\') {\n  app.use(express.static(path.join(process.cwd(), \'dist/client\')));\n  \n  app.get(\'*\', (req, res) => {\n    res.sendFile(path.join(process.cwd(), \'dist/client\', \'index.html\'));\n  });\n}\n\n// Error handling\napp.use(notFoundHandler);\napp.use(errorHandler);\n\n// Start server\nasync function startServer() {\n  try {\n    // Test database connection\n    const dbConnected = await testConnection();\n    \n    if (!dbConnected) {\n      console.error(\'❌ Failed to connect to database. Exiting...\');\n      process.exit(1);\n    }\n\n    // Create uploads directory if it doesn\'t exist\n    const fs = await import(\'fs\');\n    const uploadsDir = path.join(process.cwd(), config.upload.dir);\n    if (!fs.existsSync(uploadsDir)) {\n      fs.mkdirSync(uploadsDir, { recursive: true });\n      console.log(\'✅ Uploads directory created\');\n    }\n\n    // Start listening\n    app.listen(config.port, () => {\n      console.log(\'\\n🚀 EduPro Server Started\');\n      console.log(\'━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\');\n      console.log(`📍 Server: http://localhost:${config.port}`);\n      console.log(`🌍 Environment: ${config.nodeEnv}`);\n      console.log(`📊 Database: Connected`);\n      console.log(\'━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\');\n    });\n  } catch (error) {\n    console.error(\'❌ Failed to start server:\', error);\n    process.exit(1);\n  }\n}\n\nstartServer();\n\nexport default app;\n</create-file>\n</function_calls>'}