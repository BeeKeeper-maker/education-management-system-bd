{'role': 'assistant', 'content': '## Step 1: Create Backend API for Student Management\n\n<function_calls>\n<create-file file_path="server/src/controllers/students.controller.ts">\nimport { Request, Response } from \'express\';\nimport { eq, or, ilike, desc, and } from \'drizzle-orm\';\nimport { db } from \'../db\';\nimport { users, students, enrollments, classes, sections, academicSessions } from \'../db/schema\';\nimport { hashPassword } from \'../utils/password\';\nimport { successResponse, errorResponse, notFoundResponse } from \'../utils/response\';\n\nexport class StudentsController {\n  // Create new student (admission)\n  async createStudent(req: Request, res: Response) {\n    try {\n      const {\n        // User information\n        email,\n        password,\n        firstName,\n        lastName,\n        phone,\n        address,\n        dateOfBirth,\n        gender,\n        bloodGroup,\n        \n        // Student specific information\n        admissionNumber,\n        admissionDate,\n        rollNumber,\n        guardianName,\n        guardianPhone,\n        guardianEmail,\n        guardianRelation,\n        emergencyContact,\n        previousSchool,\n        medicalInfo,\n        \n        // Enrollment information\n        classId,\n        sectionId,\n        academicSessionId,\n      } = req.body;\n\n      // Check if email already exists\n      const existingUser = await db.query.users.findFirst({\n        where: eq(users.email, email),\n      });\n\n      if (existingUser) {\n        return errorResponse(res, \'User with this email already exists\', 409);\n      }\n\n      // Check if admission number already exists\n      if (admissionNumber) {\n        const existingStudent = await db.query.students.findFirst({\n          where: eq(students.admissionNumber, admissionNumber),\n        });\n\n        if (existingStudent) {\n          return errorResponse(res, \'Student with this admission number already exists\', 409);\n        }\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(password);\n\n      // Create user first\n      const [newUser] = await db\n        .insert(users)\n        .values({\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          role: \'student\',\n          phone,\n          address,\n          dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : undefined,\n          gender,\n          bloodGroup,\n          isActive: true,\n        })\n        .returning();\n\n      // Generate student ID\n      const studentIdPrefix = \'STU\';\n      const timestamp = Date.now().toString().slice(-6);\n      const studentId = `${studentIdPrefix}${timestamp}`;\n\n      // Create student record\n      const [newStudent] = await db\n        .insert(students)\n        .values({\n          userId: newUser.id,\n          studentId,\n          admissionNumber,\n          admissionDate: admissionDate ? new Date(admissionDate) : new Date(),\n          rollNumber,\n          guardianName,\n          guardianPhone,\n          guardianEmail,\n          guardianRelation,\n          emergencyContact,\n          previousSchool,\n          medicalInfo,\n          status: \'active\',\n        })\n        .returning();\n\n      // Create enrollment if class and section provided\n      if (classId && sectionId) {\n        // Get current academic session if not provided\n        let sessionId = academicSessionId;\n        if (!sessionId) {\n          const currentSession = await db.query.academicSessions.findFirst({\n            where: eq(academicSessions.isCurrent, true),\n          });\n          sessionId = currentSession?.id;\n        }\n\n        if (sessionId) {\n          await db.insert(enrollments).values({\n            studentId: newStudent.id,\n            classId,\n            sectionId,\n            academicSessionId: sessionId,\n            enrollmentDate: new Date(),\n            status: \'active\',\n          });\n        }\n      }\n\n      // Fetch complete student data\n      const completeStudent = await this.getStudentWithDetails(newStudent.id);\n\n      return successResponse(\n        res,\n        completeStudent,\n        \'Student admitted successfully\',\n        201\n      );\n    } catch (error) {\n      console.error(\'Create student error:\', error);\n      return errorResponse(res, \'Failed to admit student\', 500);\n    }\n  }\n\n  // Get all students with pagination, search, and filters\n  async getAllStudents(req: Request, res: Response) {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        search = \'\',\n        classId = \'\',\n        sectionId = \'\',\n        status = \'\',\n        academicSessionId = \'\',\n      } = req.query;\n\n      const pageNum = parseInt(page as string, 10);\n      const limitNum = parseInt(limit as string, 10);\n      const offset = (pageNum - 1) * limitNum;\n\n      // Build query\n      let query = db\n        .select({\n          student: students,\n          user: {\n            id: users.id,\n            email: users.email,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            phone: users.phone,\n            dateOfBirth: users.dateOfBirth,\n            gender: users.gender,\n            bloodGroup: users.bloodGroup,\n            isActive: users.isActive,\n          },\n        })\n        .from(students)\n        .innerJoin(users, eq(students.userId, users.id));\n\n      // Apply filters\n      const conditions: any[] = [];\n\n      if (search) {\n        conditions.push(\n          or(\n            ilike(users.firstName, `%${search}%`),\n            ilike(users.lastName, `%${search}%`),\n            ilike(users.email, `%${search}%`),\n            ilike(students.studentId, `%${search}%`),\n            ilike(students.admissionNumber, `%${search}%`)\n          )\n        );\n      }\n\n      if (status) {\n        conditions.push(eq(students.status, status as string));\n      }\n\n      // Get all students with filters\n      const allStudents = conditions.length > 0\n        ? await query.where(and(...conditions))\n        : await query;\n\n      // Filter by class/section if provided (from enrollments)\n      let filteredStudents = allStudents;\n      if (classId || sectionId || academicSessionId) {\n        const enrollmentConditions: any[] = [];\n        if (classId) enrollmentConditions.push(eq(enrollments.classId, classId as string));\n        if (sectionId) enrollmentConditions.push(eq(enrollments.sectionId, sectionId as string));\n        if (academicSessionId) enrollmentConditions.push(eq(enrollments.academicSessionId, academicSessionId as string));\n\n        const enrolledStudents = await db\n          .select({ studentId: enrollments.studentId })\n          .from(enrollments)\n          .where(and(...enrollmentConditions));\n\n        const enrolledStudentIds = new Set(enrolledStudents.map(e => e.studentId));\n        filteredStudents = allStudents.filter(s => enrolledStudentIds.has(s.student.id));\n      }\n\n      const total = filteredStudents.length;\n\n      // Apply pagination\n      const paginatedStudents = filteredStudents.slice(offset, offset + limitNum);\n\n      // Get enrollment details for each student\n      const studentsWithEnrollment = await Promise.all(\n        paginatedStudents.map(async (item) => {\n          const enrollment = await db.query.enrollments.findFirst({\n            where: eq(enrollments.studentId, item.student.id),\n            with: {\n              class: true,\n              section: true,\n            },\n            orderBy: desc(enrollments.enrollmentDate),\n          });\n\n          return {\n            ...item.student,\n            user: item.user,\n            currentEnrollment: enrollment,\n          };\n        })\n      );\n\n      return successResponse(res, {\n        students: studentsWithEnrollment,\n        pagination: {\n          page: pageNum,\n          limit: limitNum,\n          total,\n          totalPages: Math.ceil(total / limitNum),\n        },\n      });\n    } catch (error) {\n      console.error(\'Get all students error:\', error);\n      return errorResponse(res, \'Failed to fetch students\', 500);\n    }\n  }\n\n  // Get student by ID with complete details\n  async getStudentById(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n\n      const studentData = await this.getStudentWithDetails(id);\n\n      if (!studentData) {\n        return notFoundResponse(res, \'Student not found\');\n      }\n\n      return successResponse(res, studentData);\n    } catch (error) {\n      console.error(\'Get student by ID error:\', error);\n      return errorResponse(res, \'Failed to fetch student\', 500);\n    }\n  }\n\n  // Helper method to get student with all details\n  private async getStudentWithDetails(studentId: string) {\n    const student = await db.query.students.findFirst({\n      where: eq(students.id, studentId),\n      with: {\n        user: true,\n      },\n    });\n\n    if (!student) {\n      return null;\n    }\n\n    // Get enrollments\n    const studentEnrollments = await db.query.enrollments.findMany({\n      where: eq(enrollments.studentId, studentId),\n      with: {\n        class: true,\n        section: true,\n        academicSession: true,\n      },\n      orderBy: desc(enrollments.enrollmentDate),\n    });\n\n    // Get current enrollment\n    const currentEnrollment = studentEnrollments.find(e => e.status === \'active\');\n\n    // Remove password from user data\n    const { password: _, ...userWithoutPassword } = student.user;\n\n    return {\n      ...student,\n      user: userWithoutPassword,\n      enrollments: studentEnrollments,\n      currentEnrollment,\n    };\n  }\n\n  // Update student\n  async updateStudent(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const {\n        firstName,\n        lastName,\n        phone,\n        address,\n        dateOfBirth,\n        gender,\n        bloodGroup,\n        rollNumber,\n        guardianName,\n        guardianPhone,\n        guardianEmail,\n        guardianRelation,\n        emergencyContact,\n        medicalInfo,\n      } = req.body;\n\n      // Check if student exists\n      const existingStudent = await db.query.students.findFirst({\n        where: eq(students.id, id),\n      });\n\n      if (!existingStudent) {\n        return notFoundResponse(res, \'Student not found\');\n      }\n\n      // Update user information\n      await db\n        .update(users)\n        .set({\n          firstName: firstName || undefined,\n          lastName: lastName || undefined,\n          phone: phone || undefined,\n          address: address || undefined,\n          dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : undefined,\n          gender: gender || undefined,\n          bloodGroup: bloodGroup || undefined,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, existingStudent.userId));\n\n      // Update student information\n      await db\n        .update(students)\n        .set({\n          rollNumber: rollNumber || undefined,\n          guardianName: guardianName || undefined,\n          guardianPhone: guardianPhone || undefined,\n          guardianEmail: guardianEmail || undefined,\n          guardianRelation: guardianRelation || undefined,\n          emergencyContact: emergencyContact || undefined,\n          medicalInfo: medicalInfo || undefined,\n          updatedAt: new Date(),\n        })\n        .where(eq(students.id, id));\n\n      // Fetch updated student data\n      const updatedStudent = await this.getStudentWithDetails(id);\n\n      return successResponse(res, updatedStudent, \'Student updated successfully\');\n    } catch (error) {\n      console.error(\'Update student error:\', error);\n      return errorResponse(res, \'Failed to update student\', 500);\n    }\n  }\n\n  // Deactivate/Activate student\n  async toggleStudentStatus(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      const existingStudent = await db.query.students.findFirst({\n        where: eq(students.id, id),\n      });\n\n      if (!existingStudent) {\n        return notFoundResponse(res, \'Student not found\');\n      }\n\n      // Update student status\n      await db\n        .update(students)\n        .set({\n          status: status || \'inactive\',\n          updatedAt: new Date(),\n        })\n        .where(eq(students.id, id));\n\n      // Also update user active status\n      await db\n        .update(users)\n        .set({\n          isActive: status === \'active\',\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, existingStudent.userId));\n\n      return successResponse(res, null, `Student ${status === \'active\' ? \'activated\' : \'deactivated\'} successfully`);\n    } catch (error) {\n      console.error(\'Toggle student status error:\', error);\n      return errorResponse(res, \'Failed to update student status\', 500);\n    }\n  }\n\n  // Get student statistics\n  async getStudentStats(req: Request, res: Response) {\n    try {\n      const allStudents = await db.select().from(students);\n\n      const stats = {\n        total: allStudents.length,\n        active: allStudents.filter(s => s.status === \'active\').length,\n        inactive: allStudents.filter(s => s.status === \'inactive\').length,\n        graduated: allStudents.filter(s => s.status === \'graduated\').length,\n        transferred: allStudents.filter(s => s.status === \'transferred\').length,\n      };\n\n      return successResponse(res, stats);\n    } catch (error) {\n      console.error(\'Get student stats error:\', error);\n      return errorResponse(res, \'Failed to fetch student statistics\', 500);\n    }\n  }\n}\n</create-file>\n</function_calls>'}