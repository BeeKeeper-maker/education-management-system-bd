{'role': 'assistant', 'content': 'Perfect! Now let me transition to **Phase 2: Financial Management Module**. Let me start by creating the comprehensive database schema:\n\n<function_calls>\n<create-file file_path="server/src/db/schema/financial.ts">\nimport { pgTable, text, timestamp, uuid, varchar, integer, decimal, boolean, date } from \'drizzle-orm/pg-core\';\nimport { relations } from \'drizzle-orm\';\nimport { students } from \'./students\';\nimport { classes } from \'./academic\';\nimport { users } from \'./users\';\nimport { academicSessions } from \'./organization\';\n\n// Fee categories (Tuition, Exam, Admission, etc.)\nexport const feeCategories = pgTable(\'fee_categories\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  name: varchar(\'name\', { length: 100 }).notNull(),\n  description: text(\'description\'),\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Fee structure templates\nexport const feeStructures = pgTable(\'fee_structures\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  name: varchar(\'name\', { length: 255 }).notNull(),\n  academicSessionId: uuid(\'academic_session_id\').references(() => academicSessions.id).notNull(),\n  classId: uuid(\'class_id\').references(() => classes.id),\n  description: text(\'description\'),\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Fee structure items (breakdown of fees)\nexport const feeStructureItems = pgTable(\'fee_structure_items\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  feeStructureId: uuid(\'fee_structure_id\').references(() => feeStructures.id).notNull(),\n  feeCategoryId: uuid(\'fee_category_id\').references(() => feeCategories.id).notNull(),\n  amount: decimal(\'amount\', { precision: 10, scale: 2 }).notNull(),\n  dueDate: date(\'due_date\'),\n  isOptional: boolean(\'is_optional\').default(false).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n});\n\n// Student fee assignments\nexport const studentFees = pgTable(\'student_fees\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  studentId: uuid(\'student_id\').references(() => students.id).notNull(),\n  feeStructureId: uuid(\'fee_structure_id\').references(() => feeStructures.id).notNull(),\n  academicSessionId: uuid(\'academic_session_id\').references(() => academicSessions.id).notNull(),\n  totalAmount: decimal(\'total_amount\', { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\'paid_amount\', { precision: 10, scale: 2 }).default(\'0\').notNull(),\n  discountAmount: decimal(\'discount_amount\', { precision: 10, scale: 2 }).default(\'0\').notNull(),\n  waiverAmount: decimal(\'waiver_amount\', { precision: 10, scale: 2 }).default(\'0\').notNull(),\n  dueAmount: decimal(\'due_amount\', { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\'status\', { length: 20 }).default(\'pending\').notNull(), // pending, partial, paid, overdue\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Fee payments\nexport const feePayments = pgTable(\'fee_payments\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  studentFeeId: uuid(\'student_fee_id\').references(() => studentFees.id).notNull(),\n  studentId: uuid(\'student_id\').references(() => students.id).notNull(),\n  amount: decimal(\'amount\', { precision: 10, scale: 2 }).notNull(),\n  paymentDate: date(\'payment_date\').notNull(),\n  paymentMethod: varchar(\'payment_method\', { length: 50 }).notNull(), // cash, card, bank_transfer, cheque, online\n  transactionId: varchar(\'transaction_id\', { length: 255 }),\n  receiptNumber: varchar(\'receipt_number\', { length: 100 }).notNull().unique(),\n  remarks: text(\'remarks\'),\n  collectedBy: uuid(\'collected_by\').references(() => users.id).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Discounts and waivers\nexport const feeDiscounts = pgTable(\'fee_discounts\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  studentFeeId: uuid(\'student_fee_id\').references(() => studentFees.id).notNull(),\n  type: varchar(\'type\', { length: 20 }).notNull(), // discount, waiver\n  amount: decimal(\'amount\', { precision: 10, scale: 2 }).notNull(),\n  percentage: decimal(\'percentage\', { precision: 5, scale: 2 }),\n  reason: text(\'reason\').notNull(),\n  approvedBy: uuid(\'approved_by\').references(() => users.id).notNull(),\n  approvedAt: timestamp(\'approved_at\').defaultNow().notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n});\n\n// Expense categories\nexport const expenseCategories = pgTable(\'expense_categories\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  name: varchar(\'name\', { length: 100 }).notNull(),\n  description: text(\'description\'),\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Expenses\nexport const expenses = pgTable(\'expenses\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  categoryId: uuid(\'category_id\').references(() => expenseCategories.id).notNull(),\n  title: varchar(\'title\', { length: 255 }).notNull(),\n  description: text(\'description\'),\n  amount: decimal(\'amount\', { precision: 10, scale: 2 }).notNull(),\n  expenseDate: date(\'expense_date\').notNull(),\n  paymentMethod: varchar(\'payment_method\', { length: 50 }).notNull(),\n  invoiceNumber: varchar(\'invoice_number\', { length: 100 }),\n  vendorName: varchar(\'vendor_name\', { length: 255 }),\n  remarks: text(\'remarks\'),\n  recordedBy: uuid(\'recorded_by\').references(() => users.id).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Relations\nexport const feeCategoriesRelations = relations(feeCategories, ({ many }) => ({\n  feeStructureItems: many(feeStructureItems),\n}));\n\nexport const feeStructuresRelations = relations(feeStructures, ({ one, many }) => ({\n  academicSession: one(academicSessions, {\n    fields: [feeStructures.academicSessionId],\n    references: [academicSessions.id],\n  }),\n  class: one(classes, {\n    fields: [feeStructures.classId],\n    references: [classes.id],\n  }),\n  items: many(feeStructureItems),\n  studentFees: many(studentFees),\n}));\n\nexport const feeStructureItemsRelations = relations(feeStructureItems, ({ one }) => ({\n  feeStructure: one(feeStructures, {\n    fields: [feeStructureItems.feeStructureId],\n    references: [feeStructures.id],\n  }),\n  feeCategory: one(feeCategories, {\n    fields: [feeStructureItems.feeCategoryId],\n    references: [feeCategories.id],\n  }),\n}));\n\nexport const studentFeesRelations = relations(studentFees, ({ one, many }) => ({\n  student: one(students, {\n    fields: [studentFees.studentId],\n    references: [students.id],\n  }),\n  feeStructure: one(feeStructures, {\n    fields: [studentFees.feeStructureId],\n    references: [feeStructures.id],\n  }),\n  academicSession: one(academicSessions, {\n    fields: [studentFees.academicSessionId],\n    references: [academicSessions.id],\n  }),\n  payments: many(feePayments),\n  discounts: many(feeDiscounts),\n}));\n\nexport const feePaymentsRelations = relations(feePayments, ({ one }) => ({\n  studentFee: one(studentFees, {\n    fields: [feePayments.studentFeeId],\n    references: [studentFees.id],\n  }),\n  student: one(students, {\n    fields: [feePayments.studentId],\n    references: [students.id],\n  }),\n  collectedBy: one(users, {\n    fields: [feePayments.collectedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const feeDiscountsRelations = relations(feeDiscounts, ({ one }) => ({\n  studentFee: one(studentFees, {\n    fields: [feeDiscounts.studentFeeId],\n    references: [studentFees.id],\n  }),\n  approvedBy: one(users, {\n    fields: [feeDiscounts.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const expenseCategoriesRelations = relations(expenseCategories, ({ many }) => ({\n  expenses: many(expenses),\n}));\n\nexport const expensesRelations = relations(expenses, ({ one }) => ({\n  category: one(expenseCategories, {\n    fields: [expenses.categoryId],\n    references: [expenseCategories.id],\n  }),\n  recordedBy: one(users, {\n    fields: [expenses.recordedBy],\n    references: [users.id],\n  }),\n}));\n\n// Type exports\nexport type FeeCategory = typeof feeCategories.$inferSelect;\nexport type FeeStructure = typeof feeStructures.$inferSelect;\nexport type FeeStructureItem = typeof feeStructureItems.$inferSelect;\nexport type StudentFee = typeof studentFees.$inferSelect;\nexport type FeePayment = typeof feePayments.$inferSelect;\nexport type FeeDiscount = typeof feeDiscounts.$inferSelect;\nexport type ExpenseCategory = typeof expenseCategories.$inferSelect;\nexport type Expense = typeof expenses.$inferSelect;\n</create-file>\n</function_calls>'}