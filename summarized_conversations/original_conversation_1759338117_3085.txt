{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="client/src/lib/api.ts">\nimport axios, { AxiosInstance, AxiosError } from \'axios\';\n\nconst API_BASE_URL = import.meta.env.VITE_API_URL || \'/api\';\n\n// Create axios instance\nexport const api: AxiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \'Content-Type\': \'application/json\',\n  },\n  withCredentials: true,\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\'token\');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error: AxiosError) => {\n    if (error.response?.status === 401) {\n      // Clear token and redirect to login\n      localStorage.removeItem(\'token\');\n      window.location.href = \'/login\';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API response type\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  message?: string;\n  data?: T;\n  error?: string;\n  errors?: Record<string, string[]>;\n}\n\n// API helper functions\nexport const apiClient = {\n  get: <T = any>(url: string, params?: any) =>\n    api.get<ApiResponse<T>>(url, { params }).then((res) => res.data),\n\n  post: <T = any>(url: string, data?: any) =>\n    api.post<ApiResponse<T>>(url, data).then((res) => res.data),\n\n  put: <T = any>(url: string, data?: any) =>\n    api.put<ApiResponse<T>>(url, data).then((res) => res.data),\n\n  patch: <T = any>(url: string, data?: any) =>\n    api.patch<ApiResponse<T>>(url, data).then((res) => res.data),\n\n  delete: <T = any>(url: string) =>\n    api.delete<ApiResponse<T>>(url).then((res) => res.data),\n};\n</create-file>\n</function_calls>'}