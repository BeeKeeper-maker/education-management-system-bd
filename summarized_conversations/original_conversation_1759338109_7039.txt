{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/middleware/auth.ts">\nimport { Request, Response, NextFunction } from \'express\';\nimport { verifyToken, JWTPayload } from \'../utils/jwt\';\nimport { unauthorizedResponse, forbiddenResponse } from \'../utils/response\';\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: JWTPayload;\n    }\n  }\n}\n\nexport function authenticate(req: Request, res: Response, next: NextFunction) {\n  try {\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith(\'Bearer \')) {\n      return unauthorizedResponse(res, \'No token provided\');\n    }\n\n    const token = authHeader.substring(7); // Remove \'Bearer \' prefix\n    const payload = verifyToken(token);\n\n    req.user = payload;\n    next();\n  } catch (error) {\n    return unauthorizedResponse(res, \'Invalid or expired token\');\n  }\n}\n\nexport function authorize(...allowedRoles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return unauthorizedResponse(res, \'Authentication required\');\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return forbiddenResponse(\n        res,\n        \'You do not have permission to access this resource\'\n      );\n    }\n\n    next();\n  };\n}\n\n// Middleware to check if user is authenticated (for session-based auth)\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (req.session && req.session.userId) {\n    next();\n  } else {\n    return unauthorizedResponse(res, \'Please login to continue\');\n  }\n}\n</create-file>\n</function_calls>'}