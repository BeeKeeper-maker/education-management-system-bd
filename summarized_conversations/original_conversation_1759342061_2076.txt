{'role': 'assistant', 'content': 'Now let me create a Timetable View page for students and teachers to see their personal timetables:\n\n<function_calls>\n<create-file file_path="client/src/pages/MyTimetable.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'../contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'../components/ui/card\';\nimport { Badge } from \'../components/ui/badge\';\nimport { Calendar, Clock, MapPin, User } from \'lucide-react\';\n\ninterface Period {\n  id: string;\n  name: string;\n  startTime: string;\n  endTime: string;\n  orderIndex: number;\n  isBreak: boolean;\n}\n\ninterface TimetableEntry {\n  id: string;\n  dayOfWeek: number;\n  roomNumber?: string;\n  period: Period;\n  subject?: {\n    id: string;\n    name: string;\n    code: string;\n  };\n  teacher?: {\n    id: string;\n    name: string;\n  };\n  class?: {\n    id: string;\n    name: string;\n  };\n  section?: {\n    id: string;\n    name: string;\n  };\n}\n\nconst DAYS = [\n  { value: 1, label: \'Monday\' },\n  { value: 2, label: \'Tuesday\' },\n  { value: 3, label: \'Wednesday\' },\n  { value: 4, label: \'Thursday\' },\n  { value: 5, label: \'Friday\' },\n  { value: 6, label: \'Saturday\' },\n];\n\nexport default function MyTimetable() {\n  const { user } = useAuth();\n  const [timetable, setTimetable] = useState<Record<number, TimetableEntry[]>>({});\n  const [loading, setLoading] = useState(true);\n  const [selectedDay, setSelectedDay] = useState(new Date().getDay() || 1);\n\n  useEffect(() => {\n    fetchTimetable();\n  }, []);\n\n  const fetchTimetable = async () => {\n    setLoading(true);\n    try {\n      let url = \'\';\n      \n      if (user?.role === \'teacher\') {\n        url = `/api/timetable/teacher/${user.id}`;\n      } else if (user?.role === \'student\') {\n        // For students, we need to get their enrollment first\n        const enrollmentResponse = await fetch(\'/api/students/my-enrollment\', {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        });\n        const enrollmentData = await enrollmentResponse.json();\n        \n        if (enrollmentData.success && enrollmentData.data) {\n          url = `/api/timetable/class?classId=${enrollmentData.data.classId}&sectionId=${enrollmentData.data.sectionId}`;\n        }\n      }\n\n      if (url) {\n        const response = await fetch(url, {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        });\n        const data = await response.json();\n        \n        if (data.success) {\n          setTimetable(data.data);\n        }\n      }\n    } catch (error) {\n      console.error(\'Error fetching timetable:\', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDayEntries = (dayOfWeek: number): TimetableEntry[] => {\n    return (timetable[dayOfWeek] || []).sort((a, b) => \n      a.period.orderIndex - b.period.orderIndex\n    );\n  };\n\n  const getCurrentPeriod = () => {\n    const now = new Date();\n    const currentTime = `${now.getHours().toString().padStart(2, \'0\')}:${now.getMinutes().toString().padStart(2, \'0\')}`;\n    const currentDay = now.getDay() || 7; // Convert Sunday (0) to 7\n    \n    const todayEntries = getDayEntries(currentDay);\n    return todayEntries.find(entry => {\n      return currentTime >= entry.period.startTime && currentTime <= entry.period.endTime;\n    });\n  };\n\n  const currentPeriod = getCurrentPeriod();\n\n  if (loading) {\n    return (\n      <div className="space-y-6">\n        <div>\n          <h1 className="text-3xl font-bold">My Timetable</h1>\n          <p className="text-muted-foreground">Loading your schedule...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="space-y-6">\n      <div>\n        <h1 className="text-3xl font-bold">My Timetable</h1>\n        <p className="text-muted-foreground">Your weekly class schedule</p>\n      </div>\n\n      {/* Current Period Card */}\n      {currentPeriod && (\n        <Card className="border-primary">\n          <CardHeader>\n            <CardTitle className="flex items-center gap-2">\n              <Clock className="h-5 w-5" />\n              Current Period\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="space-y-2">\n              <div className="flex items-center justify-between">\n                <div>\n                  <p className="text-2xl font-bold">{currentPeriod.subject?.name || \'Break\'}</p>\n                  <p className="text-muted-foreground">\n                    {currentPeriod.period.startTime} - {currentPeriod.period.endTime}\n                  </p>\n                </div>\n                <Badge className="text-lg px-4 py-2">Now</Badge>\n              </div>\n              {currentPeriod.subject && (\n                <div className="flex flex-wrap gap-4 mt-4">\n                  {user?.role === \'student\' && currentPeriod.teacher && (\n                    <div className="flex items-center gap-2 text-sm">\n                      <User className="h-4 w-4 text-muted-foreground" />\n                      <span>{currentPeriod.teacher.name}</span>\n                    </div>\n                  )}\n                  {user?.role === \'teacher\' && currentPeriod.class && (\n                    <div className="flex items-center gap-2 text-sm">\n                      <User className="h-4 w-4 text-muted-foreground" />\n                      <span>{currentPeriod.class.name} - {currentPeriod.section?.name}</span>\n                    </div>\n                  )}\n                  {currentPeriod.roomNumber && (\n                    <div className="flex items-center gap-2 text-sm">\n                      <MapPin className="h-4 w-4 text-muted-foreground" />\n                      <span>Room {currentPeriod.roomNumber}</span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n      {/* Day Selector */}\n      <div className="flex gap-2 overflow-x-auto pb-2">\n        {DAYS.map(day => (\n          <button\n            key={day.value}\n            onClick={() => setSelectedDay(day.value)}\n            className={`px-4 py-2 rounded-lg font-medium whitespace-nowrap transition-colors ${\n              selectedDay === day.value\n                ? \'bg-primary text-primary-foreground\'\n                : \'bg-muted hover:bg-muted/80\'\n            }`}\n          >\n            {day.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Timetable for Selected Day */}\n      <div className="space-y-3">\n        {getDayEntries(selectedDay).length > 0 ? (\n          getDayEntries(selectedDay).map(entry => (\n            <Card key={entry.id} className={entry.period.isBreak ? \'bg-muted/50\' : \'\'}>\n              <CardContent className="pt-6">\n                <div className="flex items-start justify-between">\n                  <div className="flex-1">\n                    <div className="flex items-center gap-3 mb-2">\n                      <div className="flex items-center justify-center w-16 h-16 rounded-lg bg-primary/10 text-primary">\n                        <div className="text-center">\n                          <div className="text-xs font-medium">\n                            {entry.period.startTime.split(\':\')[0]}\n                          </div>\n                          <div className="text-xs">\n                            {entry.period.startTime.split(\':\')[1]}\n                          </div>\n                        </div>\n                      </div>\n                      <div className="flex-1">\n                        <h3 className="text-lg font-semibold">\n                          {entry.period.isBreak ? entry.period.name : entry.subject?.name || \'Free Period\'}\n                        </h3>\n                        <p className="text-sm text-muted-foreground">\n                          {entry.period.startTime} - {entry.period.endTime}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {!entry.period.isBreak && entry.subject && (\n                      <div className="flex flex-wrap gap-4 ml-[76px]">\n                        {user?.role === \'student\' && entry.teacher && (\n                          <div className="flex items-center gap-2 text-sm">\n                            <User className="h-4 w-4 text-muted-foreground" />\n                            <span>{entry.teacher.name}</span>\n                          </div>\n                        )}\n                        {user?.role === \'teacher\' && entry.class && (\n                          <div className="flex items-center gap-2 text-sm">\n                            <User className="h-4 w-4 text-muted-foreground" />\n                            <span>{entry.class.name} - {entry.section?.name}</span>\n                          </div>\n                        )}\n                        {entry.roomNumber && (\n                          <div className="flex items-center gap-2 text-sm">\n                            <MapPin className="h-4 w-4 text-muted-foreground" />\n                            <span>Room {entry.roomNumber}</span>\n                          </div>\n                        )}\n                        {entry.subject.code && (\n                          <Badge variant="outline">{entry.subject.code}</Badge>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {entry.period.isBreak && (\n                    <Badge variant="secondary">Break</Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className="pt-6">\n              <div className="text-center py-8">\n                <Calendar className="mx-auto h-12 w-12 text-muted-foreground mb-4" />\n                <p className="text-muted-foreground">No classes scheduled for this day</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}