{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/middleware/validation.ts">\nimport { Request, Response, NextFunction } from \'express\';\nimport { ZodSchema, ZodError } from \'zod\';\nimport { validationErrorResponse } from \'../utils/response\';\n\nexport function validateBody(schema: ZodSchema) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      req.body = await schema.parseAsync(req.body);\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const errors: Record<string, string[]> = {};\n        \n        error.errors.forEach((err) => {\n          const path = err.path.join(\'.\');\n          if (!errors[path]) {\n            errors[path] = [];\n          }\n          errors[path].push(err.message);\n        });\n\n        return validationErrorResponse(res, errors);\n      }\n      next(error);\n    }\n  };\n}\n\nexport function validateQuery(schema: ZodSchema) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      req.query = await schema.parseAsync(req.query);\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const errors: Record<string, string[]> = {};\n        \n        error.errors.forEach((err) => {\n          const path = err.path.join(\'.\');\n          if (!errors[path]) {\n            errors[path] = [];\n          }\n          errors[path].push(err.message);\n        });\n\n        return validationErrorResponse(res, errors);\n      }\n      next(error);\n    }\n  };\n}\n\nexport function validateParams(schema: ZodSchema) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      req.params = await schema.parseAsync(req.params);\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const errors: Record<string, string[]> = {};\n        \n        error.errors.forEach((err) => {\n          const path = err.path.join(\'.\');\n          if (!errors[path]) {\n            errors[path] = [];\n          }\n          errors[path].push(err.message);\n        });\n\n        return validationErrorResponse(res, errors);\n      }\n      next(error);\n    }\n  };\n}\n</create-file>\n</function_calls>'}