{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="client/src/contexts/AuthContext.tsx">\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from \'react\';\nimport { User, LoginCredentials, RegisterData, AuthResponse } from \'../types\';\nimport { apiClient } from \'../lib/api\';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => Promise<void>;\n  updateUser: (user: User) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem(\'token\');\n    if (token) {\n      fetchCurrentUser();\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const fetchCurrentUser = async () => {\n    try {\n      const response = await apiClient.get<User>(\'/auth/me\');\n      if (response.success && response.data) {\n        setUser(response.data);\n      }\n    } catch (error) {\n      console.error(\'Failed to fetch current user:\', error);\n      localStorage.removeItem(\'token\');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (credentials: LoginCredentials) => {\n    const response = await apiClient.post<AuthResponse>(\'/auth/login\', credentials);\n    if (response.success && response.data) {\n      localStorage.setItem(\'token\', response.data.token);\n      setUser(response.data.user);\n    } else {\n      throw new Error(response.error || \'Login failed\');\n    }\n  };\n\n  const register = async (data: RegisterData) => {\n    const response = await apiClient.post<AuthResponse>(\'/auth/register\', data);\n    if (response.success && response.data) {\n      localStorage.setItem(\'token\', response.data.token);\n      setUser(response.data.user);\n    } else {\n      throw new Error(response.error || \'Registration failed\');\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await apiClient.post(\'/auth/logout\');\n    } catch (error) {\n      console.error(\'Logout error:\', error);\n    } finally {\n      localStorage.removeItem(\'token\');\n      setUser(null);\n    }\n  };\n\n  const updateUser = (updatedUser: User) => {\n    setUser(updatedUser);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        isLoading,\n        login,\n        register,\n        logout,\n        updateUser,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\'useAuth must be used within an AuthProvider\');\n  }\n  return context;\n}\n</create-file>\n</function_calls>'}