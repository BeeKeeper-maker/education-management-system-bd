{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/routes/users.routes.ts">\nimport { Router } from \'express\';\nimport { UsersController } from \'../controllers/users.controller\';\nimport { validateBody } from \'../middleware/validation\';\nimport { authenticate, authorize } from \'../middleware/auth\';\nimport { z } from \'zod\';\n\nconst router = Router();\nconst usersController = new UsersController();\n\n// Validation schemas\nconst createUserSchema = z.object({\n  email: z.string().email(\'Invalid email address\'),\n  password: z.string().min(8, \'Password must be at least 8 characters\'),\n  firstName: z.string().min(1, \'First name is required\'),\n  lastName: z.string().min(1, \'Last name is required\'),\n  role: z.enum([\'student\', \'teacher\', \'guardian\', \'admin\', \'superadmin\', \'accountant\', \'hostel_manager\']),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  dateOfBirth: z.string().optional(),\n  gender: z.enum([\'male\', \'female\', \'other\']).optional(),\n  bloodGroup: z.string().optional(),\n});\n\nconst updateUserSchema = z.object({\n  firstName: z.string().min(1).optional(),\n  lastName: z.string().min(1).optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  dateOfBirth: z.string().optional(),\n  gender: z.enum([\'male\', \'female\', \'other\']).optional(),\n  bloodGroup: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\n// All routes require authentication\nrouter.use(authenticate);\n\n// Routes accessible only by superadmin and admin\nrouter.get(\n  \'/\',\n  authorize(\'superadmin\', \'admin\'),\n  usersController.getAllUsers.bind(usersController)\n);\n\nrouter.get(\n  \'/stats\',\n  authorize(\'superadmin\', \'admin\'),\n  usersController.getUserStats.bind(usersController)\n);\n\nrouter.post(\n  \'/\',\n  authorize(\'superadmin\', \'admin\'),\n  validateBody(createUserSchema),\n  usersController.createUser.bind(usersController)\n);\n\nrouter.get(\n  \'/:id\',\n  authorize(\'superadmin\', \'admin\'),\n  usersController.getUserById.bind(usersController)\n);\n\nrouter.put(\n  \'/:id\',\n  authorize(\'superadmin\', \'admin\'),\n  validateBody(updateUserSchema),\n  usersController.updateUser.bind(usersController)\n);\n\nrouter.delete(\n  \'/:id\',\n  authorize(\'superadmin\', \'admin\'),\n  usersController.deleteUser.bind(usersController)\n);\n\nexport default router;\n</create-file>\n</function_calls>'}