{'role': 'assistant', 'content': 'Now let me create a beautiful Report Card component and integrate it into the Student Profile page. First, let me create the Report Card component:\n\n<function_calls>\n<create-file file_path="client/src/components/ReportCard.tsx">\nimport { Card, CardContent, CardHeader, CardTitle } from \'./ui/card\';\nimport { Badge } from \'./ui/badge\';\nimport { Button } from \'./ui/button\';\nimport { Download, Award, TrendingUp } from \'lucide-react\';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \'recharts\';\n\ninterface SubjectResult {\n  subject: {\n    name: string;\n    code: string;\n  };\n  totalMarks: number;\n  marksObtained: number;\n  grade: string;\n  gradePoint: number;\n  isPassed: boolean;\n}\n\ninterface ReportCardProps {\n  result: {\n    id: string;\n    totalMarks: number;\n    marksObtained: number;\n    percentage: number;\n    grade: string;\n    gradePoint: number;\n    meritPosition?: number;\n    exam: {\n      name: string;\n      examType: string;\n    };\n    class: {\n      name: string;\n    };\n    section: {\n      name: string;\n    };\n    subjectResults: SubjectResult[];\n  };\n  student: {\n    name: string;\n    studentId: string;\n    rollNumber: string;\n  };\n}\n\nexport default function ReportCard({ result, student }: ReportCardProps) {\n  const COLORS = [\'#22c55e\', \'#3b82f6\', \'#f59e0b\', \'#ef4444\', \'#8b5cf6\'];\n\n  const getGradeColor = (grade: string) => {\n    if (grade === \'A+\' || grade === \'A\') return \'bg-green-600\';\n    if (grade === \'A-\' || grade === \'B\') return \'bg-blue-600\';\n    if (grade === \'C\') return \'bg-yellow-600\';\n    if (grade === \'D\') return \'bg-orange-600\';\n    return \'bg-red-600\';\n  };\n\n  const pieData = result.subjectResults.map(sr => ({\n    name: sr.subject.code,\n    value: parseFloat(sr.marksObtained.toString()),\n  }));\n\n  const barData = result.subjectResults.map(sr => ({\n    subject: sr.subject.code,\n    obtained: parseFloat(sr.marksObtained.toString()),\n    total: sr.totalMarks,\n    percentage: ((parseFloat(sr.marksObtained.toString()) / sr.totalMarks) * 100).toFixed(1),\n  }));\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className="space-y-6 print:space-y-4">\n      {/* Header */}\n      <Card className="print:shadow-none">\n        <CardHeader className="bg-gradient-to-r from-primary to-primary/80 text-primary-foreground print:bg-none print:text-foreground">\n          <div className="flex items-center justify-between">\n            <div>\n              <CardTitle className="text-2xl mb-2">Academic Report Card</CardTitle>\n              <p className="text-sm opacity-90">{result.exam.name} - {result.exam.examType}</p>\n            </div>\n            <Button variant="secondary" size="sm" onClick={handlePrint} className="print:hidden">\n              <Download className="mr-2 h-4 w-4" />\n              Download PDF\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className="pt-6">\n          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">\n            <div>\n              <p className="text-sm text-muted-foreground">Student Name</p>\n              <p className="font-semibold">{student.name}</p>\n            </div>\n            <div>\n              <p className="text-sm text-muted-foreground">Student ID</p>\n              <p className="font-semibold">{student.studentId}</p>\n            </div>\n            <div>\n              <p className="text-sm text-muted-foreground">Class</p>\n              <p className="font-semibold">{result.class.name} - {result.section.name}</p>\n            </div>\n            <div>\n              <p className="text-sm text-muted-foreground">Roll Number</p>\n              <p className="font-semibold">{student.rollNumber}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Overall Performance */}\n      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm text-muted-foreground mb-2">Total Marks</p>\n              <p className="text-3xl font-bold">{result.marksObtained}/{result.totalMarks}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm text-muted-foreground mb-2">Percentage</p>\n              <p className="text-3xl font-bold text-primary">{result.percentage.toFixed(2)}%</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm text-muted-foreground mb-2">Grade</p>\n              <Badge className={`text-2xl px-4 py-2 ${getGradeColor(result.grade)}`}>\n                {result.grade}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm text-muted-foreground mb-2">GPA</p>\n              <p className="text-3xl font-bold text-green-600">{result.gradePoint.toFixed(2)}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {result.meritPosition && (\n        <Card className="border-2 border-yellow-500 bg-yellow-50 dark:bg-yellow-950">\n          <CardContent className="pt-6">\n            <div className="flex items-center justify-center gap-3">\n              <Award className="h-8 w-8 text-yellow-600" />\n              <div className="text-center">\n                <p className="text-sm text-muted-foreground">Merit Position</p>\n                <p className="text-3xl font-bold text-yellow-600">#{result.meritPosition}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Subject-wise Performance */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Subject-wise Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className="overflow-x-auto">\n            <table className="w-full">\n              <thead>\n                <tr className="border-b">\n                  <th className="text-left p-3">Subject</th>\n                  <th className="text-center p-3">Total Marks</th>\n                  <th className="text-center p-3">Marks Obtained</th>\n                  <th className="text-center p-3">Percentage</th>\n                  <th className="text-center p-3">Grade</th>\n                  <th className="text-center p-3">GPA</th>\n                  <th className="text-center p-3">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {result.subjectResults.map((sr, index) => {\n                  const percentage = ((parseFloat(sr.marksObtained.toString()) / sr.totalMarks) * 100).toFixed(2);\n                  return (\n                    <tr key={index} className="border-b hover:bg-accent/50">\n                      <td className="p-3">\n                        <div>\n                          <p className="font-medium">{sr.subject.name}</p>\n                          <p className="text-sm text-muted-foreground">{sr.subject.code}</p>\n                        </div>\n                      </td>\n                      <td className="text-center p-3">{sr.totalMarks}</td>\n                      <td className="text-center p-3 font-semibold">{sr.marksObtained}</td>\n                      <td className="text-center p-3">{percentage}%</td>\n                      <td className="text-center p-3">\n                        <Badge className={getGradeColor(sr.grade)}>{sr.grade}</Badge>\n                      </td>\n                      <td className="text-center p-3 font-semibold">{sr.gradePoint.toFixed(2)}</td>\n                      <td className="text-center p-3">\n                        {sr.isPassed ? (\n                          <Badge className="bg-green-600">Pass</Badge>\n                        ) : (\n                          <Badge variant="destructive">Fail</Badge>\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Visual Analytics */}\n      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 print:hidden">\n        <Card>\n          <CardHeader>\n            <CardTitle className="flex items-center gap-2">\n              <TrendingUp className="h-5 w-5" />\n              Marks Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width="100%" height={300}>\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx="50%"\n                  cy="50%"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill="#8884d8"\n                  dataKey="value"\n                >\n                  {pieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className="flex items-center gap-2">\n              <TrendingUp className="h-5 w-5" />\n              Subject Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width="100%" height={300}>\n              <BarChart data={barData}>\n                <CartesianGrid strokeDasharray="3 3" />\n                <XAxis dataKey="subject" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey="obtained" fill="#22c55e" name="Marks Obtained" />\n                <Bar dataKey="total" fill="#e5e7eb" name="Total Marks" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Performance Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className="space-y-4">\n            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">\n              <div>\n                <p className="text-sm text-muted-foreground">Subjects Passed</p>\n                <p className="text-2xl font-bold text-green-600">\n                  {result.subjectResults.filter(sr => sr.isPassed).length}\n                </p>\n              </div>\n              <div>\n                <p className="text-sm text-muted-foreground">Subjects Failed</p>\n                <p className="text-2xl font-bold text-red-600">\n                  {result.subjectResults.filter(sr => !sr.isPassed).length}\n                </p>\n              </div>\n              <div>\n                <p className="text-sm text-muted-foreground">Highest Score</p>\n                <p className="text-2xl font-bold">\n                  {Math.max(...result.subjectResults.map(sr => parseFloat(sr.marksObtained.toString())))}\n                </p>\n              </div>\n              <div>\n                <p className="text-sm text-muted-foreground">Lowest Score</p>\n                <p className="text-2xl font-bold">\n                  {Math.min(...result.subjectResults.map(sr => parseFloat(sr.marksObtained.toString())))}\n                </p>\n              </div>\n            </div>\n\n            <div className="border-t pt-4">\n              <p className="text-sm text-muted-foreground mb-2">Overall Remarks</p>\n              <p className="text-base">\n                {result.percentage >= 90\n                  ? \'🌟 Outstanding performance! Keep up the excellent work.\'\n                  : result.percentage >= 80\n                  ? \'👏 Excellent performance! Continue your hard work.\'\n                  : result.percentage >= 70\n                  ? \'👍 Very good performance! Keep improving.\'\n                  : result.percentage >= 60\n                  ? \'✓ Good performance. Focus on weaker areas.\'\n                  : result.percentage >= 50\n                  ? \'⚠️ Satisfactory performance. More effort needed.\'\n                  : result.percentage >= 40\n                  ? \'⚠️ Needs improvement. Please work harder.\'\n                  : \'❌ Unsatisfactory performance. Immediate attention required.\'}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Footer */}\n      <Card className="print:shadow-none">\n        <CardContent className="pt-6">\n          <div className="flex items-center justify-between text-sm text-muted-foreground">\n            <p>Generated on: {new Date().toLocaleDateString(\'en-US\', { \n              year: \'numeric\', \n              month: \'long\', \n              day: \'numeric\' \n            })}</p>\n            <p>EduPro Education Management System</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}