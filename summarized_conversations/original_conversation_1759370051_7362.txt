{'role': 'assistant', 'content': 'Perfect! Now let\'s build **Page 3: Expense Management** - an intuitive interface for recording and tracking institutional expenses.\n\n<function_calls>\n<create-file file_path="client/src/pages/ExpenseManagement.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \'@/components/ui/dialog\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Download, \n  Calendar,\n  DollarSign,\n  TrendingUp,\n  FileText,\n  Filter\n} from \'lucide-react\';\nimport { format } from \'date-fns\';\n\ninterface ExpenseCategory {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface Expense {\n  id: string;\n  categoryId: string;\n  categoryName: string;\n  amount: number;\n  description: string;\n  expenseDate: string;\n  vendor?: string;\n  invoiceNumber?: string;\n  paymentMethod: string;\n  recordedBy: string;\n  createdAt: string;\n}\n\nexport default function ExpenseManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [categories, setCategories] = useState<ExpenseCategory[]>([]);\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [filteredExpenses, setFilteredExpenses] = useState<Expense[]>([]);\n  const [statistics, setStatistics] = useState<any>(null);\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedExpense, setSelectedExpense] = useState<Expense | null>(null);\n  \n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [filterCategory, setFilterCategory] = useState(\'all\');\n  const [filterDateFrom, setFilterDateFrom] = useState(\'\');\n  const [filterDateTo, setFilterDateTo] = useState(\'\');\n  \n  const [formData, setFormData] = useState({\n    categoryId: \'\',\n    amount: \'\',\n    description: \'\',\n    expenseDate: format(new Date(), \'yyyy-MM-dd\'),\n    vendor: \'\',\n    invoiceNumber: \'\',\n    paymentMethod: \'cash\',\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Load data\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  // Apply filters\n  useEffect(() => {\n    applyFilters();\n  }, [expenses, searchQuery, filterCategory, filterDateFrom, filterDateTo]);\n\n  const loadData = async () => {\n    setIsLoading(true);\n    try {\n      const [categoriesRes, expensesRes, statsRes] = await Promise.all([\n        fetch(\'/api/expenses/categories\', {\n          headers: { \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(\'/api/expenses\', {\n          headers: { \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(\'/api/expenses/reports/statistics\', {\n          headers: { \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n      ]);\n\n      if (!categoriesRes.ok || !expensesRes.ok) throw new Error(\'Failed to load data\');\n\n      const categoriesData = await categoriesRes.json();\n      const expensesData = await expensesRes.json();\n      const statsData = statsRes.ok ? await statsRes.json() : null;\n\n      setCategories(categoriesData.categories || []);\n      setExpenses(expensesData.expenses || []);\n      setStatistics(statsData);\n    } catch (error) {\n      console.error(\'Load data error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load expense data\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const applyFilters = () => {\n    let filtered = [...expenses];\n\n    // Search filter\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (expense) =>\n          expense.description.toLowerCase().includes(query) ||\n          expense.vendor?.toLowerCase().includes(query) ||\n          expense.invoiceNumber?.toLowerCase().includes(query) ||\n          expense.categoryName.toLowerCase().includes(query)\n      );\n    }\n\n    // Category filter\n    if (filterCategory !== \'all\') {\n      filtered = filtered.filter((expense) => expense.categoryId === filterCategory);\n    }\n\n    // Date range filter\n    if (filterDateFrom) {\n      filtered = filtered.filter(\n        (expense) => new Date(expense.expenseDate) >= new Date(filterDateFrom)\n      );\n    }\n    if (filterDateTo) {\n      filtered = filtered.filter(\n        (expense) => new Date(expense.expenseDate) <= new Date(filterDateTo)\n      );\n    }\n\n    setFilteredExpenses(filtered);\n  };\n\n  const handleCreateExpense = async () => {\n    if (!formData.categoryId || !formData.amount || !formData.description) {\n      toast({\n        title: \'Validation Error\',\n        description: \'Please fill in all required fields\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\'/api/expenses\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          ...formData,\n          amount: parseFloat(formData.amount),\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to create expense\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Expense recorded successfully\',\n      });\n\n      setIsCreateDialogOpen(false);\n      resetForm();\n      loadData();\n    } catch (error: any) {\n      console.error(\'Create expense error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to create expense\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleEditExpense = async () => {\n    if (!selectedExpense) return;\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`/api/expenses/${selectedExpense.id}`, {\n        method: \'PUT\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          ...formData,\n          amount: parseFloat(formData.amount),\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to update expense\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Expense updated successfully\',\n      });\n\n      setIsEditDialogOpen(false);\n      setSelectedExpense(null);\n      resetForm();\n      loadData();\n    } catch (error: any) {\n      console.error(\'Update expense error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to update expense\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleDeleteExpense = async (expenseId: string) => {\n    if (!confirm(\'Are you sure you want to delete this expense?\')) return;\n\n    try {\n      const response = await fetch(`/api/expenses/${expenseId}`, {\n        method: \'DELETE\',\n        headers: {\n          \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n      });\n\n      if (!response.ok) throw new Error(\'Failed to delete expense\');\n\n      toast({\n        title: \'Success\',\n        description: \'Expense deleted successfully\',\n      });\n\n      loadData();\n    } catch (error) {\n      console.error(\'Delete expense error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to delete expense\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const openEditDialog = (expense: Expense) => {\n    setSelectedExpense(expense);\n    setFormData({\n      categoryId: expense.categoryId,\n      amount: expense.amount.toString(),\n      description: expense.description,\n      expenseDate: format(new Date(expense.expenseDate), \'yyyy-MM-dd\'),\n      vendor: expense.vendor || \'\',\n      invoiceNumber: expense.invoiceNumber || \'\',\n      paymentMethod: expense.paymentMethod,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      categoryId: \'\',\n      amount: \'\',\n      description: \'\',\n      expenseDate: format(new Date(), \'yyyy-MM-dd\'),\n      vendor: \'\',\n      invoiceNumber: \'\',\n      paymentMethod: \'cash\',\n    });\n  };\n\n  const exportToCSV = () => {\n    const headers = [\'Date\', \'Category\', \'Description\', \'Amount\', \'Vendor\', \'Invoice\', \'Payment Method\'];\n    const rows = filteredExpenses.map((expense) => [\n      format(new Date(expense.expenseDate), \'yyyy-MM-dd\'),\n      expense.categoryName,\n      expense.description,\n      expense.amount.toFixed(2),\n      expense.vendor || \'\',\n      expense.invoiceNumber || \'\',\n      expense.paymentMethod,\n    ]);\n\n    const csvContent = [\n      headers.join(\',\'),\n      ...rows.map((row) => row.map((cell) => `"${cell}"`).join(\',\')),\n    ].join(\'\\n\');\n\n    const blob = new Blob([csvContent], { type: \'text/csv\' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\'a\');\n    a.href = url;\n    a.download = `expenses_${format(new Date(), \'yyyy-MM-dd\')}.csv`;\n    a.click();\n\n    toast({\n      title: \'Export Successful\',\n      description: \'Expenses exported to CSV\',\n    });\n  };\n\n  const totalExpenses = filteredExpenses.reduce((sum, exp) => sum + exp.amount, 0);\n\n  if (isLoading) {\n    return (\n      <div className="container mx-auto p-6">\n        <div className="flex items-center justify-center h-96">\n          <div className="text-center">\n            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n            <p className="text-muted-foreground">Loading expenses...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Expense Management</h1>\n          <p className="text-muted-foreground">Record and track institutional expenses</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className="h-4 w-4 mr-2" />\n              Add Expense\n            </Button>\n          </DialogTrigger>\n          <DialogContent className="max-w-2xl">\n            <DialogHeader>\n              <DialogTitle>Record New Expense</DialogTitle>\n              <DialogDescription>Enter expense details</DialogDescription>\n            </DialogHeader>\n            <ExpenseForm\n              formData={formData}\n              setFormData={setFormData}\n              categories={categories}\n              onSubmit={handleCreateExpense}\n              isSubmitting={isSubmitting}\n              onCancel={() => {\n                setIsCreateDialogOpen(false);\n                resetForm();\n              }}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Total Expenses</CardTitle>\n            <DollarSign className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">${totalExpenses.toFixed(2)}</div>\n            <p className="text-xs text-muted-foreground">\n              {filteredExpenses.length} transactions\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">This Month</CardTitle>\n            <Calendar className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">\n              ${filteredExpenses\n                .filter((exp) => {\n                  const expDate = new Date(exp.expenseDate);\n                  const now = new Date();\n                  return (\n                    expDate.getMonth() === now.getMonth() &&\n                    expDate.getFullYear() === now.getFullYear()\n                  );\n                })\n                .reduce((sum, exp) => sum + exp.amount, 0)\n                .toFixed(2)}\n            </div>\n            <p className="text-xs text-muted-foreground">Current month expenses</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Categories</CardTitle>\n            <FileText className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{categories.length}</div>\n            <p className="text-xs text-muted-foreground">Expense categories</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Average</CardTitle>\n            <TrendingUp className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">\n              ${filteredExpenses.length > 0\n                ? (totalExpenses / filteredExpenses.length).toFixed(2)\n                : \'0.00\'}\n            </div>\n            <p className="text-xs text-muted-foreground">Per transaction</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">\n            <div className="md:col-span-2">\n              <Label htmlFor="search">Search</Label>\n              <div className="relative">\n                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />\n                <Input\n                  id="search"\n                  placeholder="Search expenses..."\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className="pl-8"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor="category">Category</Label>\n              <Select value={filterCategory} onValueChange={setFilterCategory}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value="all">All Categories</SelectItem>\n                  {categories.map((cat) => (\n                    <SelectItem key={cat.id} value={cat.id}>\n                      {cat.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor="dateFrom">From Date</Label>\n              <Input\n                id="dateFrom"\n                type="date"\n                value={filterDateFrom}\n                onChange={(e) => setFilterDateFrom(e.target.value)}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor="dateTo">To Date</Label>\n              <Input\n                id="dateTo"\n                type="date"\n                value={filterDateTo}\n                onChange={(e) => setFilterDateTo(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className="flex gap-2 mt-4">\n            <Button\n              variant="outline"\n              size="sm"\n              onClick={() => {\n                setSearchQuery(\'\');\n                setFilterCategory(\'all\');\n                setFilterDateFrom(\'\');\n                setFilterDateTo(\'\');\n              }}\n            >\n              Clear Filters\n            </Button>\n            <Button variant="outline" size="sm" onClick={exportToCSV}>\n              <Download className="h-4 w-4 mr-2" />\n              Export CSV\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Expenses List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Expense Records</CardTitle>\n          <CardDescription>\n            Showing {filteredExpenses.length} of {expenses.length} expenses\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {filteredExpenses.length === 0 ? (\n            <div className="text-center py-12 text-muted-foreground">\n              <FileText className="h-16 w-16 mx-auto mb-4 opacity-50" />\n              <p className="font-medium">No expenses found</p>\n              <p className="text-sm">Try adjusting your filters or add a new expense</p>\n            </div>\n          ) : (\n            <div className="overflow-x-auto">\n              <table className="w-full text-sm">\n                <thead>\n                  <tr className="border-b">\n                    <th className="text-left p-2">Date</th>\n                    <th className="text-left p-2">Category</th>\n                    <th className="text-left p-2">Description</th>\n                    <th className="text-left p-2">Vendor</th>\n                    <th className="text-left p-2">Invoice</th>\n                    <th className="text-right p-2">Amount</th>\n                    <th className="text-center p-2">Payment</th>\n                    <th className="text-center p-2">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredExpenses.map((expense) => (\n                    <tr key={expense.id} className="border-b hover:bg-muted/50">\n                      <td className="p-2">\n                        {format(new Date(expense.expenseDate), \'MMM dd, yyyy\')}\n                      </td>\n                      <td className="p-2">\n                        <Badge variant="outline">{expense.categoryName}</Badge>\n                      </td>\n                      <td className="p-2 max-w-xs truncate">{expense.description}</td>\n                      <td className="p-2">{expense.vendor || \'-\'}</td>\n                      <td className="p-2">{expense.invoiceNumber || \'-\'}</td>\n                      <td className="text-right p-2 font-semibold">\n                        ${expense.amount.toFixed(2)}\n                      </td>\n                      <td className="text-center p-2">\n                        <Badge variant="secondary">{expense.paymentMethod}</Badge>\n                      </td>\n                      <td className="text-center p-2">\n                        <div className="flex items-center justify-center gap-2">\n                          <Button\n                            variant="ghost"\n                            size="sm"\n                            onClick={() => openEditDialog(expense)}\n                          >\n                            <Edit className="h-4 w-4" />\n                          </Button>\n                          <Button\n                            variant="ghost"\n                            size="sm"\n                            onClick={() => handleDeleteExpense(expense.id)}\n                          >\n                            <Trash2 className="h-4 w-4 text-red-600" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n                <tfoot>\n                  <tr className="font-bold bg-muted">\n                    <td colSpan={5} className="p-2 text-right">\n                      TOTAL:\n                    </td>\n                    <td className="text-right p-2">${totalExpenses.toFixed(2)}</td>\n                    <td colSpan={2}></td>\n                  </tr>\n                </tfoot>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className="max-w-2xl">\n          <DialogHeader>\n            <DialogTitle>Edit Expense</DialogTitle>\n            <DialogDescription>Update expense details</DialogDescription>\n          </DialogHeader>\n          <ExpenseForm\n            formData={formData}\n            setFormData={setFormData}\n            categories={categories}\n            onSubmit={handleEditExpense}\n            isSubmitting={isSubmitting}\n            onCancel={() => {\n              setIsEditDialogOpen(false);\n              setSelectedExpense(null);\n              resetForm();\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n// Expense Form Component\nfunction ExpenseForm({\n  formData,\n  setFormData,\n  categories,\n  onSubmit,\n  isSubmitting,\n  onCancel,\n}: any) {\n  return (\n    <div className="space-y-4">\n      <div className="grid grid-cols-2 gap-4">\n        <div className="space-y-2">\n          <Label htmlFor="category">Category *</Label>\n          <Select\n            value={formData.categoryId}\n            onValueChange={(value) => setFormData({ ...formData, categoryId: value })}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder="Select category" />\n            </SelectTrigger>\n            <SelectContent>\n              {categories.map((cat: ExpenseCategory) => (\n                <SelectItem key={cat.id} value={cat.id}>\n                  {cat.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className="space-y-2">\n          <Label htmlFor="amount">Amount *</Label>\n          <Input\n            id="amount"\n            type="number"\n            step="0.01"\n            placeholder="0.00"\n            value={formData.amount}\n            onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n          />\n        </div>\n      </div>\n\n      <div className="space-y-2">\n        <Label htmlFor="description">Description *</Label>\n        <Input\n          id="description"\n          placeholder="Enter expense description"\n          value={formData.description}\n          onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n        />\n      </div>\n\n      <div className="grid grid-cols-2 gap-4">\n        <div className="space-y-2">\n          <Label htmlFor="expenseDate">Expense Date *</Label>\n          <Input\n            id="expenseDate"\n            type="date"\n            value={formData.expenseDate}\n            onChange={(e) => setFormData({ ...formData, expenseDate: e.target.value })}\n          />\n        </div>\n\n        <div className="space-y-2">\n          <Label htmlFor="paymentMethod">Payment Method *</Label>\n          <Select\n            value={formData.paymentMethod}\n            onValueChange={(value) => setFormData({ ...formData, paymentMethod: value })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value="cash">Cash</SelectItem>\n              <SelectItem value="card">Card</SelectItem>\n              <SelectItem value="bank_transfer">Bank Transfer</SelectItem>\n              <SelectItem value="cheque">Cheque</SelectItem>\n              <SelectItem value="online">Online Payment</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className="grid grid-cols-2 gap-4">\n        <div className="space-y-2">\n          <Label htmlFor="vendor">Vendor/Payee</Label>\n          <Input\n            id="vendor"\n            placeholder="Enter vendor name"\n            value={formData.vendor}\n            onChange={(e) => setFormData({ ...formData, vendor: e.target.value })}\n          />\n        </div>\n\n        <div className="space-y-2">\n          <Label htmlFor="invoiceNumber">Invoice Number</Label>\n          <Input\n            id="invoiceNumber"\n            placeholder="Enter invoice number"\n            value={formData.invoiceNumber}\n            onChange={(e) => setFormData({ ...formData, invoiceNumber: e.target.value })}\n          />\n        </div>\n      </div>\n\n      <div className="flex gap-2 pt-4">\n        <Button onClick={onSubmit} disabled={isSubmitting} className="flex-1">\n          {isSubmitting ? \'Saving...\' : \'Save Expense\'}\n        </Button>\n        <Button variant="outline" onClick={onCancel} disabled={isSubmitting}>\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}