{'role': 'assistant', 'content': 'Now let me create the Attendance Reports page for admins:\n\n<function_calls>\n<create-file file_path="client/src/pages/AttendanceReports.tsx">\nimport { useState, useEffect } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'../components/ui/card\';\nimport { Button } from \'../components/ui/button\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'../components/ui/select\';\nimport { Label } from \'../components/ui/label\';\nimport { Input } from \'../components/ui/input\';\nimport { useToast } from \'../components/ui/use-toast\';\nimport { Calendar, TrendingUp, Users, Download } from \'lucide-react\';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \'recharts\';\n\ninterface Class {\n  id: string;\n  name: string;\n}\n\ninterface Section {\n  id: string;\n  name: string;\n}\n\ninterface AttendanceStats {\n  totalDays: number;\n  totalPresent: number;\n  totalAbsent: number;\n  totalLate: number;\n  totalExcused: number;\n  totalStudents: number;\n  averageAttendance: number;\n  dailyStats: Array<{\n    date: string;\n    presentCount: number;\n    absentCount: number;\n    lateCount: number;\n    excusedCount: number;\n  }>;\n}\n\nexport default function AttendanceReports() {\n  const { toast } = useToast();\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [selectedClass, setSelectedClass] = useState(\'\');\n  const [selectedSection, setSelectedSection] = useState(\'\');\n  const [startDate, setStartDate] = useState(\n    new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0]\n  );\n  const [endDate, setEndDate] = useState(new Date().toISOString().split(\'T\')[0]);\n  const [stats, setStats] = useState<AttendanceStats | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetchClasses();\n  }, []);\n\n  useEffect(() => {\n    if (selectedClass) {\n      fetchSections(selectedClass);\n    } else {\n      setSections([]);\n      setSelectedSection(\'\');\n    }\n  }, [selectedClass]);\n\n  useEffect(() => {\n    if (selectedClass && selectedSection && startDate && endDate) {\n      fetchStats();\n    }\n  }, [selectedClass, selectedSection, startDate, endDate]);\n\n  const fetchClasses = async () => {\n    try {\n      const response = await fetch(\'/api/academic/classes\', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setClasses(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching classes:\', error);\n    }\n  };\n\n  const fetchSections = async (classId: string) => {\n    try {\n      const response = await fetch(`/api/academic/classes/${classId}/sections`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setSections(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching sections:\', error);\n    }\n  };\n\n  const fetchStats = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `/api/attendance/stats?classId=${selectedClass}&sectionId=${selectedSection}&startDate=${startDate}&endDate=${endDate}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n          },\n        }\n      );\n      const data = await response.json();\n      if (data.success) {\n        setStats(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching stats:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to fetch attendance statistics\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportReport = () => {\n    toast({\n      title: \'Coming Soon\',\n      description: \'Export functionality will be available soon\',\n    });\n  };\n\n  const chartData = stats?.dailyStats.map(day => ({\n    date: new Date(day.date).toLocaleDateString(\'en-US\', { month: \'short\', day: \'numeric\' }),\n    Present: day.presentCount,\n    Absent: day.absentCount,\n    Late: day.lateCount,\n    Excused: day.excusedCount,\n  })) || [];\n\n  return (\n    <div className="space-y-6">\n      <div>\n        <h1 className="text-3xl font-bold">Attendance Reports</h1>\n        <p className="text-muted-foreground">View and analyze attendance statistics</p>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Report Filters</CardTitle>\n          <CardDescription>Select class, section, and date range</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n            <div className="space-y-2">\n              <Label>Class</Label>\n              <Select value={selectedClass} onValueChange={setSelectedClass}>\n                <SelectTrigger>\n                  <SelectValue placeholder="Select class" />\n                </SelectTrigger>\n                <SelectContent>\n                  {classes.map(cls => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Section</Label>\n              <Select\n                value={selectedSection}\n                onValueChange={setSelectedSection}\n                disabled={!selectedClass}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder="Select section" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sections.map(section => (\n                    <SelectItem key={section.id} value={section.id}>\n                      {section.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Start Date</Label>\n              <Input\n                type="date"\n                value={startDate}\n                onChange={e => setStartDate(e.target.value)}\n                max={endDate}\n              />\n            </div>\n\n            <div className="space-y-2">\n              <Label>End Date</Label>\n              <Input\n                type="date"\n                value={endDate}\n                onChange={e => setEndDate(e.target.value)}\n                min={startDate}\n                max={new Date().toISOString().split(\'T\')[0]}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {loading ? (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <p className="text-muted-foreground">Loading statistics...</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : stats ? (\n        <>\n          {/* Statistics Cards */}\n          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n            <Card>\n              <CardContent className="pt-6">\n                <div className="flex items-center justify-between">\n                  <div>\n                    <p className="text-sm font-medium text-muted-foreground">Total Days</p>\n                    <p className="text-2xl font-bold">{stats.totalDays}</p>\n                  </div>\n                  <Calendar className="h-8 w-8 text-muted-foreground" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className="pt-6">\n                <div className="flex items-center justify-between">\n                  <div>\n                    <p className="text-sm font-medium text-muted-foreground">Total Students</p>\n                    <p className="text-2xl font-bold">{stats.totalStudents}</p>\n                  </div>\n                  <Users className="h-8 w-8 text-muted-foreground" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className="pt-6">\n                <div className="flex items-center justify-between">\n                  <div>\n                    <p className="text-sm font-medium text-green-600">Average Attendance</p>\n                    <p className="text-2xl font-bold text-green-600">\n                      {stats.averageAttendance.toFixed(1)}%\n                    </p>\n                  </div>\n                  <TrendingUp className="h-8 w-8 text-green-600" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className="pt-6">\n                <Button onClick={exportReport} className="w-full">\n                  <Download className="mr-2 h-4 w-4" />\n                  Export Report\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Summary Statistics */}\n          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">\n            <Card>\n              <CardContent className="pt-6">\n                <div className="text-center">\n                  <p className="text-sm font-medium text-green-600">Total Present</p>\n                  <p className="text-3xl font-bold text-green-600">{stats.totalPresent}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className="pt-6">\n                <div className="text-center">\n                  <p className="text-sm font-medium text-red-600">Total Absent</p>\n                  <p className="text-3xl font-bold text-red-600">{stats.totalAbsent}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className="pt-6">\n                <div className="text-center">\n                  <p className="text-sm font-medium text-yellow-600">Total Late</p>\n                  <p className="text-3xl font-bold text-yellow-600">{stats.totalLate}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className="pt-6">\n                <div className="text-center">\n                  <p className="text-sm font-medium text-blue-600">Total Excused</p>\n                  <p className="text-3xl font-bold text-blue-600">{stats.totalExcused}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Attendance Trend Chart */}\n          {chartData.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Attendance Trend</CardTitle>\n                <CardDescription>Daily attendance breakdown over the selected period</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width="100%" height={300}>\n                  <LineChart data={chartData}>\n                    <CartesianGrid strokeDasharray="3 3" />\n                    <XAxis dataKey="date" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type="monotone" dataKey="Present" stroke="#22c55e" strokeWidth={2} />\n                    <Line type="monotone" dataKey="Absent" stroke="#ef4444" strokeWidth={2} />\n                    <Line type="monotone" dataKey="Late" stroke="#eab308" strokeWidth={2} />\n                    <Line type="monotone" dataKey="Excused" stroke="#3b82f6" strokeWidth={2} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Status Distribution Chart */}\n          {chartData.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Status Distribution</CardTitle>\n                <CardDescription>Comparison of attendance statuses</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width="100%" height={300}>\n                  <BarChart data={chartData}>\n                    <CartesianGrid strokeDasharray="3 3" />\n                    <XAxis dataKey="date" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey="Present" fill="#22c55e" />\n                    <Bar dataKey="Absent" fill="#ef4444" />\n                    <Bar dataKey="Late" fill="#eab308" />\n                    <Bar dataKey="Excused" fill="#3b82f6" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          )}\n        </>\n      ) : (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <Calendar className="mx-auto h-12 w-12 text-muted-foreground mb-4" />\n              <p className="text-muted-foreground">\n                Please select a class and section to view reports\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}