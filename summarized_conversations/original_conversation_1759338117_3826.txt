{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="client/src/lib/utils.ts">\nimport { type ClassValue, clsx } from \'clsx\';\nimport { twMerge } from \'tailwind-merge\';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDate(date: Date | string, locale: string = \'en\'): string {\n  const d = typeof date === \'string\' ? new Date(date) : date;\n  return new Intl.DateTimeFormat(locale, {\n    year: \'numeric\',\n    month: \'long\',\n    day: \'numeric\',\n  }).format(d);\n}\n\nexport function formatTime(time: string): string {\n  const [hours, minutes] = time.split(\':\');\n  const hour = parseInt(hours, 10);\n  const ampm = hour >= 12 ? \'PM\' : \'AM\';\n  const displayHour = hour % 12 || 12;\n  return `${displayHour}:${minutes} ${ampm}`;\n}\n\nexport function formatCurrency(amount: number, currency: string = \'USD\'): string {\n  return new Intl.NumberFormat(\'en-US\', {\n    style: \'currency\',\n    currency,\n  }).format(amount);\n}\n\nexport function getInitials(firstName: string, lastName: string): string {\n  return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n}\n\nexport function truncate(text: string, length: number): string {\n  if (text.length <= length) return text;\n  return text.substring(0, length) + \'...\';\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\nexport function downloadFile(data: Blob, filename: string) {\n  const url = window.URL.createObjectURL(data);\n  const link = document.createElement(\'a\');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n}\n\nexport function getErrorMessage(error: any): string {\n  if (error.response?.data?.error) {\n    return error.response.data.error;\n  }\n  if (error.message) {\n    return error.message;\n  }\n  return \'An unexpected error occurred\';\n}\n</create-file>\n</function_calls>'}