{'role': 'assistant', 'content': '# 🚀 Dual Mission: Examination UI Completion + Financial Management Module\n\nI\'m excited to tackle this ambitious dual mission! Let me start by completing the Examination System UI, then seamlessly transition to building the comprehensive Financial Management module.\n\n## 📋 Execution Plan\n\n### Phase 1: Examination UI Completion (Estimated: 2 hours)\n1. Excel-like Marks Entry Grid\n2. Visual Exam Scheduler\n3. Beautiful Digital Report Card\n\n### Phase 2: Financial Management Module (Estimated: 4 hours)\n1. Database schema design\n2. Backend APIs\n3. Frontend interfaces\n4. Integration and testing\n\nLet\'s begin! 🎯\n\n---\n\n## 🎯 PHASE 1: EXAMINATION UI COMPLETION\n\n### Step 1: Creating the Excel-Like Marks Entry Grid\n\nThis is the "masterpiece" feature - a spreadsheet-like interface with keyboard navigation and real-time saving.\n\n<function_calls>\n<create-file file_path="client/src/pages/MarksEntry.tsx">\nimport { useState, useEffect, useRef, useCallback } from \'react\';\nimport { useParams, useLocation } from \'wouter\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'../components/ui/card\';\nimport { Button } from \'../components/ui/button\';\nimport { Badge } from \'../components/ui/badge\';\nimport { useToast } from \'../components/ui/use-toast\';\nimport { Save, Download, Upload, CheckCircle, AlertCircle, ArrowLeft } from \'lucide-react\';\nimport { Input } from \'../components/ui/input\';\n\ninterface Student {\n  id: string;\n  studentId: string;\n  name: string;\n  rollNumber: string;\n  marksObtained: number | null;\n  isAbsent: boolean;\n  remarks: string;\n  markId?: string;\n}\n\ninterface ExamSubject {\n  id: string;\n  examDate: string;\n  startTime: string;\n  endTime: string;\n  totalMarks: number;\n  passingMarks: number;\n  subject: {\n    id: string;\n    name: string;\n    code: string;\n  };\n  class: {\n    id: string;\n    name: string;\n  };\n  section: {\n    id: string;\n    name: string;\n  };\n}\n\nexport default function MarksEntry() {\n  const { examSubjectId } = useParams<{ examSubjectId: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [examSubject, setExamSubject] = useState<ExamSubject | null>(null);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [selectedCell, setSelectedCell] = useState<{ row: number; col: string } | null>(null);\n  const [unsavedChanges, setUnsavedChanges] = useState(false);\n  const inputRefs = useRef<{ [key: string]: HTMLInputElement | null }>({});\n  const autoSaveTimeout = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    if (examSubjectId) {\n      fetchData();\n    }\n  }, [examSubjectId]);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/examinations/subjects/${examSubjectId}/students`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      \n      if (data.success) {\n        setExamSubject(data.data.examSubject);\n        setStudents(data.data.students.map((s: any) => ({\n          id: s.id,\n          studentId: s.studentId,\n          name: s.name,\n          rollNumber: s.rollNumber,\n          marksObtained: s.marks,\n          isAbsent: s.isAbsent || false,\n          remarks: s.remarks || \'\',\n          markId: s.markId,\n        })));\n      }\n    } catch (error) {\n      console.error(\'Error fetching data:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load marks entry data\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const autoSave = useCallback(() => {\n    if (autoSaveTimeout.current) {\n      clearTimeout(autoSaveTimeout.current);\n    }\n    \n    autoSaveTimeout.current = setTimeout(() => {\n      saveMarks(true);\n    }, 2000); // Auto-save after 2 seconds of inactivity\n  }, [students]);\n\n  const saveMarks = async (isAutoSave = false) => {\n    if (!isAutoSave) setSaving(true);\n    \n    try {\n      const marksData = students.map(student => ({\n        studentId: student.id,\n        marksObtained: student.isAbsent ? null : student.marksObtained,\n        isAbsent: student.isAbsent,\n        remarks: student.remarks,\n      }));\n\n      const response = await fetch(\'/api/examinations/marks\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          examSubjectId,\n          marksData,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setUnsavedChanges(false);\n        if (!isAutoSave) {\n          toast({\n            title: \'Success\',\n            description: \'Marks saved successfully\',\n          });\n        }\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to save marks\',\n        variant: \'destructive\',\n      });\n    } finally {\n      if (!isAutoSave) setSaving(false);\n    }\n  };\n\n  const updateStudent = (index: number, field: keyof Student, value: any) => {\n    setStudents(prev => {\n      const updated = [...prev];\n      updated[index] = { ...updated[index], [field]: value };\n      return updated;\n    });\n    setUnsavedChanges(true);\n    autoSave();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent, rowIndex: number, colName: string) => {\n    const totalRows = students.length;\n    const cols = [\'marks\', \'remarks\'];\n    const currentColIndex = cols.indexOf(colName);\n\n    switch (e.key) {\n      case \'ArrowUp\':\n        e.preventDefault();\n        if (rowIndex > 0) {\n          focusCell(rowIndex - 1, colName);\n        }\n        break;\n      case \'ArrowDown\':\n      case \'Enter\':\n        e.preventDefault();\n        if (rowIndex < totalRows - 1) {\n          focusCell(rowIndex + 1, colName);\n        }\n        break;\n      case \'ArrowLeft\':\n        e.preventDefault();\n        if (currentColIndex > 0) {\n          focusCell(rowIndex, cols[currentColIndex - 1]);\n        }\n        break;\n      case \'ArrowRight\':\n      case \'Tab\':\n        if (e.key === \'Tab\') e.preventDefault();\n        if (currentColIndex < cols.length - 1) {\n          focusCell(rowIndex, cols[currentColIndex + 1]);\n        } else if (rowIndex < totalRows - 1) {\n          focusCell(rowIndex + 1, cols[0]);\n        }\n        break;\n    }\n  };\n\n  const focusCell = (rowIndex: number, colName: string) => {\n    const key = `${rowIndex}-${colName}`;\n    const input = inputRefs.current[key];\n    if (input) {\n      input.focus();\n      input.select();\n      setSelectedCell({ row: rowIndex, col: colName });\n    }\n  };\n\n  const toggleAbsent = (index: number) => {\n    const student = students[index];\n    updateStudent(index, \'isAbsent\', !student.isAbsent);\n    if (!student.isAbsent) {\n      updateStudent(index, \'marksObtained\', null);\n    }\n  };\n\n  const calculateStatistics = () => {\n    const validMarks = students.filter(s => !s.isAbsent && s.marksObtained !== null);\n    const total = validMarks.length;\n    const sum = validMarks.reduce((acc, s) => acc + (s.marksObtained || 0), 0);\n    const average = total > 0 ? (sum / total).toFixed(2) : 0;\n    const highest = total > 0 ? Math.max(...validMarks.map(s => s.marksObtained || 0)) : 0;\n    const lowest = total > 0 ? Math.min(...validMarks.map(s => s.marksObtained || 0)) : 0;\n    const passed = validMarks.filter(s => (s.marksObtained || 0) >= (examSubject?.passingMarks || 0)).length;\n    const failed = validMarks.filter(s => (s.marksObtained || 0) < (examSubject?.passingMarks || 0)).length;\n    const absent = students.filter(s => s.isAbsent).length;\n\n    return { total, average, highest, lowest, passed, failed, absent };\n  };\n\n  const stats = calculateStatistics();\n\n  const exportToCSV = () => {\n    const headers = [\'Roll No\', \'Student ID\', \'Name\', \'Marks\', \'Status\', \'Remarks\'];\n    const rows = students.map(s => [\n      s.rollNumber,\n      s.studentId,\n      s.name,\n      s.isAbsent ? \'AB\' : s.marksObtained?.toString() || \'\',\n      s.isAbsent ? \'Absent\' : (s.marksObtained || 0) >= (examSubject?.passingMarks || 0) ? \'Pass\' : \'Fail\',\n      s.remarks,\n    ]);\n\n    const csv = [headers, ...rows].map(row => row.join(\',\')).join(\'\\n\');\n    const blob = new Blob([csv], { type: \'text/csv\' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\'a\');\n    a.href = url;\n    a.download = `marks_${examSubject?.subject.code}_${examSubject?.class.name}.csv`;\n    a.click();\n  };\n\n  if (loading) {\n    return (\n      <div className="flex items-center justify-center min-h-[60vh]">\n        <div className="text-center">\n          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n          <p className="text-muted-foreground">Loading marks entry...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!examSubject) {\n    return (\n      <div className="flex items-center justify-center min-h-[60vh]">\n        <div className="text-center">\n          <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />\n          <p className="text-muted-foreground">Exam subject not found</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <div className="flex items-center gap-2 mb-2">\n            <Button variant="ghost" size="sm" onClick={() => navigate(\'/exams\')}>\n              <ArrowLeft className="h-4 w-4 mr-2" />\n              Back to Exams\n            </Button>\n          </div>\n          <h1 className="text-3xl font-bold">{examSubject.subject.name} - Marks Entry</h1>\n          <p className="text-muted-foreground">\n            {examSubject.class.name} - {examSubject.section.name} | Total Marks: {examSubject.totalMarks} | Passing: {examSubject.passingMarks}\n          </p>\n        </div>\n        <div className="flex gap-2">\n          <Button variant="outline" onClick={exportToCSV}>\n            <Download className="mr-2 h-4 w-4" />\n            Export CSV\n          </Button>\n          <Button onClick={() => saveMarks(false)} disabled={saving || !unsavedChanges}>\n            <Save className="mr-2 h-4 w-4" />\n            {saving ? \'Saving...\' : unsavedChanges ? \'Save Changes\' : \'Saved\'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className="grid grid-cols-2 md:grid-cols-7 gap-4">\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Total</p>\n              <p className="text-2xl font-bold">{stats.total}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Average</p>\n              <p className="text-2xl font-bold">{stats.average}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-green-600">Highest</p>\n              <p className="text-2xl font-bold text-green-600">{stats.highest}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-red-600">Lowest</p>\n              <p className="text-2xl font-bold text-red-600">{stats.lowest}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-green-600">Passed</p>\n              <p className="text-2xl font-bold text-green-600">{stats.passed}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-red-600">Failed</p>\n              <p className="text-2xl font-bold text-red-600">{stats.failed}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-yellow-600">Absent</p>\n              <p className="text-2xl font-bold text-yellow-600">{stats.absent}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Marks Entry Grid */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Marks Entry Grid</CardTitle>\n          <CardDescription>\n            Use keyboard arrows or Tab to navigate. Changes are auto-saved.\n            {unsavedChanges && <Badge variant="outline" className="ml-2">Unsaved changes</Badge>}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="overflow-x-auto">\n            <table className="w-full border-collapse">\n              <thead>\n                <tr className="bg-muted">\n                  <th className="border p-2 text-left w-20">Roll No</th>\n                  <th className="border p-2 text-left w-32">Student ID</th>\n                  <th className="border p-2 text-left">Name</th>\n                  <th className="border p-2 text-center w-32">Marks (/{examSubject.totalMarks})</th>\n                  <th className="border p-2 text-center w-24">Absent</th>\n                  <th className="border p-2 text-center w-24">Status</th>\n                  <th className="border p-2 text-left w-48">Remarks</th>\n                </tr>\n              </thead>\n              <tbody>\n                {students.map((student, index) => {\n                  const isPassed = !student.isAbsent && (student.marksObtained || 0) >= examSubject.passingMarks;\n                  const isFailed = !student.isAbsent && student.marksObtained !== null && (student.marksObtained || 0) < examSubject.passingMarks;\n                  \n                  return (\n                    <tr key={student.id} className={selectedCell?.row === index ? \'bg-accent\' : \'\'}>\n                      <td className="border p-2 text-center font-medium">{student.rollNumber}</td>\n                      <td className="border p-2 text-sm text-muted-foreground">{student.studentId}</td>\n                      <td className="border p-2 font-medium">{student.name}</td>\n                      <td className="border p-2">\n                        <Input\n                          ref={el => inputRefs.current[`${index}-marks`] = el}\n                          type="number"\n                          min="0"\n                          max={examSubject.totalMarks}\n                          value={student.isAbsent ? \'\' : student.marksObtained?.toString() || \'\'}\n                          onChange={e => {\n                            const value = e.target.value === \'\' ? null : parseFloat(e.target.value);\n                            if (value !== null && (value < 0 || value > examSubject.totalMarks)) {\n                              toast({\n                                title: \'Invalid Marks\',\n                                description: `Marks must be between 0 and ${examSubject.totalMarks}`,\n                                variant: \'destructive\',\n                              });\n                              return;\n                            }\n                            updateStudent(index, \'marksObtained\', value);\n                          }}\n                          onKeyDown={e => handleKeyDown(e, index, \'marks\')}\n                          onFocus={() => setSelectedCell({ row: index, col: \'marks\' })}\n                          disabled={student.isAbsent}\n                          className="text-center"\n                        />\n                      </td>\n                      <td className="border p-2 text-center">\n                        <input\n                          type="checkbox"\n                          checked={student.isAbsent}\n                          onChange={() => toggleAbsent(index)}\n                          className="w-4 h-4 cursor-pointer"\n                        />\n                      </td>\n                      <td className="border p-2 text-center">\n                        {student.isAbsent ? (\n                          <Badge variant="secondary">AB</Badge>\n                        ) : student.marksObtained === null ? (\n                          <Badge variant="outline">-</Badge>\n                        ) : isPassed ? (\n                          <Badge className="bg-green-600">Pass</Badge>\n                        ) : isFailed ? (\n                          <Badge variant="destructive">Fail</Badge>\n                        ) : null}\n                      </td>\n                      <td className="border p-2">\n                        <Input\n                          ref={el => inputRefs.current[`${index}-remarks`] = el}\n                          type="text"\n                          value={student.remarks}\n                          onChange={e => updateStudent(index, \'remarks\', e.target.value)}\n                          onKeyDown={e => handleKeyDown(e, index, \'remarks\')}\n                          onFocus={() => setSelectedCell({ row: index, col: \'remarks\' })}\n                          placeholder="Optional remarks"\n                          className="text-sm"\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n\n          <div className="mt-4 flex items-center justify-between text-sm text-muted-foreground">\n            <div className="flex items-center gap-2">\n              <CheckCircle className="h-4 w-4 text-green-600" />\n              <span>Auto-save enabled</span>\n            </div>\n            <div>\n              <kbd className="px-2 py-1 bg-muted rounded text-xs">↑↓←→</kbd> Navigate |\n              <kbd className="px-2 py-1 bg-muted rounded text-xs ml-2">Tab</kbd> Next field |\n              <kbd className="px-2 py-1 bg-muted rounded text-xs ml-2">Enter</kbd> Next row\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}