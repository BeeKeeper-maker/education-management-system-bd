{'role': 'assistant', 'content': 'Excellent! Now let\'s build **Page 2: Student/Guardian Fee View** - a clean portal for students and guardians to view their fees and payment history.\n\n<function_calls>\n<create-file file_path="client/src/pages/StudentFeeView.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \'@/components/ui/tabs\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { \n  DollarSign, \n  Receipt, \n  Download, \n  Calendar, \n  AlertCircle, \n  CheckCircle,\n  Clock,\n  TrendingUp,\n  FileText\n} from \'lucide-react\';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \'recharts\';\n\ninterface FeeStructure {\n  id: string;\n  name: string;\n  totalAmount: number;\n  items: FeeStructureItem[];\n}\n\ninterface FeeStructureItem {\n  id: string;\n  categoryName: string;\n  amount: number;\n  dueDate: string;\n}\n\ninterface StudentFee {\n  id: string;\n  feeStructure: FeeStructure;\n  totalAmount: number;\n  paidAmount: number;\n  dueAmount: number;\n  status: string;\n  dueDate: string;\n  assignedDate: string;\n}\n\ninterface PaymentHistory {\n  id: string;\n  receiptNumber: string;\n  amount: number;\n  paymentDate: string;\n  paymentMethod: string;\n  collectedBy: string;\n  discountAmount?: number;\n  remarks?: string;\n}\n\nconst COLORS = [\'#10b981\', \'#f59e0b\', \'#ef4444\', \'#8b5cf6\', \'#06b6d4\'];\n\nexport default function StudentFeeView() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [studentFees, setStudentFees] = useState<StudentFee[]>([]);\n  const [paymentHistory, setPaymentHistory] = useState<PaymentHistory[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Calculate statistics\n  const totalFees = studentFees.reduce((sum, fee) => sum + fee.totalAmount, 0);\n  const totalPaid = studentFees.reduce((sum, fee) => sum + fee.paidAmount, 0);\n  const totalDue = studentFees.reduce((sum, fee) => sum + fee.dueAmount, 0);\n  const paymentPercentage = totalFees > 0 ? (totalPaid / totalFees) * 100 : 0;\n\n  // Prepare chart data\n  const chartData = studentFees\n    .filter(fee => fee.dueAmount > 0)\n    .map(fee => ({\n      name: fee.feeStructure.name,\n      value: fee.dueAmount,\n    }));\n\n  // Load student fees\n  useEffect(() => {\n    loadStudentFees();\n  }, []);\n\n  const loadStudentFees = async () => {\n    setIsLoading(true);\n    try {\n      const [feesResponse, paymentsResponse] = await Promise.all([\n        fetch(`/api/fees/student/${user?.id}`, {\n          headers: {\n            \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n          },\n        }),\n        fetch(`/api/fees/payments/${user?.id}`, {\n          headers: {\n            \'Authorization\': `Bearer ${localStorage.getItem(\'token\')}`,\n          },\n        }),\n      ]);\n\n      if (!feesResponse.ok) throw new Error(\'Failed to load fees\');\n\n      const feesData = await feesResponse.json();\n      const paymentsData = paymentsResponse.ok ? await paymentsResponse.json() : { payments: [] };\n\n      setStudentFees(feesData.fees || []);\n      setPaymentHistory(paymentsData.payments || []);\n    } catch (error) {\n      console.error(\'Load fees error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load fee information\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Download receipt\n  const handleDownloadReceipt = (receiptNumber: string) => {\n    toast({\n      title: \'Download Started\',\n      description: `Downloading receipt ${receiptNumber}`,\n    });\n    // TODO: Implement PDF download\n  };\n\n  if (isLoading) {\n    return (\n      <div className="container mx-auto p-6">\n        <div className="flex items-center justify-center h-96">\n          <div className="text-center">\n            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n            <p className="text-muted-foreground">Loading fee information...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div>\n        <h1 className="text-3xl font-bold">My Fees</h1>\n        <p className="text-muted-foreground">View your fee structures and payment history</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Total Fees</CardTitle>\n            <DollarSign className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">${totalFees.toFixed(2)}</div>\n            <p className="text-xs text-muted-foreground">All assigned fees</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Amount Paid</CardTitle>\n            <CheckCircle className="h-4 w-4 text-green-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">${totalPaid.toFixed(2)}</div>\n            <p className="text-xs text-muted-foreground">\n              {paymentPercentage.toFixed(1)}% of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Outstanding Dues</CardTitle>\n            <AlertCircle className="h-4 w-4 text-red-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-red-600">${totalDue.toFixed(2)}</div>\n            <p className="text-xs text-muted-foreground">\n              {(100 - paymentPercentage).toFixed(1)}% remaining\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Total Payments</CardTitle>\n            <Receipt className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{paymentHistory.length}</div>\n            <p className="text-xs text-muted-foreground">Transactions made</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue="fees" className="w-full">\n        <TabsList className="grid w-full grid-cols-3">\n          <TabsTrigger value="fees">Fee Structures</TabsTrigger>\n          <TabsTrigger value="payments">Payment History</TabsTrigger>\n          <TabsTrigger value="breakdown">Fee Breakdown</TabsTrigger>\n        </TabsList>\n\n        {/* Fee Structures Tab */}\n        <TabsContent value="fees" className="space-y-4">\n          {studentFees.length === 0 ? (\n            <Card>\n              <CardContent className="py-16">\n                <div className="text-center text-muted-foreground">\n                  <FileText className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                  <h3 className="text-lg font-semibold mb-2">No Fee Structures</h3>\n                  <p>No fees have been assigned to you yet</p>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n              {studentFees.map((fee) => (\n                <Card key={fee.id} className="relative overflow-hidden">\n                  <div className={`absolute top-0 left-0 w-1 h-full ${\n                    fee.status === \'paid\' ? \'bg-green-500\' :\n                    fee.status === \'partial\' ? \'bg-yellow-500\' :\n                    \'bg-red-500\'\n                  }`} />\n                  <CardHeader>\n                    <div className="flex items-center justify-between">\n                      <CardTitle className="text-lg">{fee.feeStructure.name}</CardTitle>\n                      <Badge\n                        variant={\n                          fee.status === \'paid\' ? \'default\' :\n                          fee.status === \'partial\' ? \'secondary\' :\n                          \'destructive\'\n                        }\n                      >\n                        {fee.status}\n                      </Badge>\n                    </div>\n                    <CardDescription className="flex items-center gap-1">\n                      <Calendar className="h-3 w-3" />\n                      Due: {new Date(fee.dueDate).toLocaleDateString()}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className="space-y-4">\n                    {/* Amount Summary */}\n                    <div className="grid grid-cols-3 gap-2 text-sm">\n                      <div className="text-center p-2 bg-muted rounded">\n                        <div className="text-xs text-muted-foreground">Total</div>\n                        <div className="font-semibold">${fee.totalAmount.toFixed(2)}</div>\n                      </div>\n                      <div className="text-center p-2 bg-green-50 rounded">\n                        <div className="text-xs text-muted-foreground">Paid</div>\n                        <div className="font-semibold text-green-600">\n                          ${fee.paidAmount.toFixed(2)}\n                        </div>\n                      </div>\n                      <div className="text-center p-2 bg-red-50 rounded">\n                        <div className="text-xs text-muted-foreground">Due</div>\n                        <div className="font-semibold text-red-600">\n                          ${fee.dueAmount.toFixed(2)}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar */}\n                    <div className="space-y-1">\n                      <div className="flex items-center justify-between text-xs text-muted-foreground">\n                        <span>Payment Progress</span>\n                        <span>{((fee.paidAmount / fee.totalAmount) * 100).toFixed(0)}%</span>\n                      </div>\n                      <div className="w-full bg-muted rounded-full h-2">\n                        <div\n                          className="bg-green-500 h-2 rounded-full transition-all"\n                          style={{ width: `${(fee.paidAmount / fee.totalAmount) * 100}%` }}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Fee Items */}\n                    <div className="space-y-2">\n                      <div className="text-sm font-medium">Fee Components:</div>\n                      <div className="space-y-1">\n                        {fee.feeStructure.items.map((item) => (\n                          <div\n                            key={item.id}\n                            className="flex items-center justify-between text-sm p-2 bg-muted/50 rounded"\n                          >\n                            <span className="text-muted-foreground">{item.categoryName}</span>\n                            <span className="font-medium">${item.amount.toFixed(2)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Status Message */}\n                    {fee.status === \'overdue\' && (\n                      <div className="flex items-center gap-2 text-sm text-red-600 bg-red-50 p-2 rounded">\n                        <AlertCircle className="h-4 w-4" />\n                        <span>Payment overdue. Please pay as soon as possible.</span>\n                      </div>\n                    )}\n                    {fee.status === \'paid\' && (\n                      <div className="flex items-center gap-2 text-sm text-green-600 bg-green-50 p-2 rounded">\n                        <CheckCircle className="h-4 w-4" />\n                        <span>All payments completed. Thank you!</span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Payment History Tab */}\n        <TabsContent value="payments" className="space-y-4">\n          {paymentHistory.length === 0 ? (\n            <Card>\n              <CardContent className="py-16">\n                <div className="text-center text-muted-foreground">\n                  <Receipt className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                  <h3 className="text-lg font-semibold mb-2">No Payment History</h3>\n                  <p>You haven\'t made any payments yet</p>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment History</CardTitle>\n                <CardDescription>All your fee payments</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className="space-y-3">\n                  {paymentHistory.map((payment, index) => (\n                    <Card key={payment.id} className="relative overflow-hidden">\n                      <div className="absolute top-0 left-0 w-1 h-full bg-green-500" />\n                      <CardContent className="p-4">\n                        <div className="flex items-start justify-between mb-3">\n                          <div className="flex items-center gap-3">\n                            <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">\n                              <Receipt className="h-5 w-5 text-green-600" />\n                            </div>\n                            <div>\n                              <div className="font-semibold">{payment.receiptNumber}</div>\n                              <div className="text-sm text-muted-foreground">\n                                {new Date(payment.paymentDate).toLocaleDateString(\'en-US\', {\n                                  year: \'numeric\',\n                                  month: \'long\',\n                                  day: \'numeric\',\n                                })}\n                              </div>\n                            </div>\n                          </div>\n                          <div className="text-right">\n                            <div className="text-2xl font-bold text-green-600">\n                              ${payment.amount.toFixed(2)}\n                            </div>\n                            <Badge variant="outline" className="mt-1">\n                              {payment.paymentMethod}\n                            </Badge>\n                          </div>\n                        </div>\n\n                        <div className="grid grid-cols-2 gap-4 text-sm pt-3 border-t">\n                          <div>\n                            <span className="text-muted-foreground">Collected By:</span>\n                            <div className="font-medium">{payment.collectedBy}</div>\n                          </div>\n                          {payment.discountAmount && payment.discountAmount > 0 && (\n                            <div>\n                              <span className="text-muted-foreground">Discount:</span>\n                              <div className="font-medium text-red-600">\n                                -${payment.discountAmount.toFixed(2)}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        {payment.remarks && (\n                          <div className="mt-3 text-sm text-muted-foreground italic">\n                            Note: {payment.remarks}\n                          </div>\n                        )}\n\n                        <Button\n                          variant="outline"\n                          size="sm"\n                          className="w-full mt-3"\n                          onClick={() => handleDownloadReceipt(payment.receiptNumber)}\n                        >\n                          <Download className="h-4 w-4 mr-2" />\n                          Download Receipt\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Fee Breakdown Tab */}\n        <TabsContent value="breakdown" className="space-y-4">\n          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n            {/* Pie Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Outstanding Dues by Category</CardTitle>\n                <CardDescription>Visual breakdown of pending payments</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {chartData.length === 0 ? (\n                  <div className="text-center py-12 text-muted-foreground">\n                    <CheckCircle className="h-16 w-16 mx-auto mb-4 text-green-500 opacity-50" />\n                    <p className="font-medium">All Fees Paid!</p>\n                    <p className="text-sm">You have no outstanding dues</p>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width="100%" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={chartData}\n                        cx="50%"\n                        cy="50%"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill="#8884d8"\n                        dataKey="value"\n                      >\n                        {chartData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value: number) => `$${value.toFixed(2)}`} />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Payment Timeline */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Timeline</CardTitle>\n                <CardDescription>Recent payment activities</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {paymentHistory.length === 0 ? (\n                  <div className="text-center py-12 text-muted-foreground">\n                    <Clock className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                    <p>No payment history available</p>\n                  </div>\n                ) : (\n                  <div className="space-y-4">\n                    {paymentHistory.slice(0, 5).map((payment, index) => (\n                      <div key={payment.id} className="flex items-center gap-4">\n                        <div className="flex-shrink-0">\n                          <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">\n                            <TrendingUp className="h-5 w-5 text-green-600" />\n                          </div>\n                        </div>\n                        <div className="flex-1 min-w-0">\n                          <div className="flex items-center justify-between">\n                            <p className="text-sm font-medium truncate">\n                              Payment #{paymentHistory.length - index}\n                            </p>\n                            <p className="text-sm font-semibold text-green-600">\n                              ${payment.amount.toFixed(2)}\n                            </p>\n                          </div>\n                          <p className="text-xs text-muted-foreground">\n                            {new Date(payment.paymentDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Summary Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Fee Summary</CardTitle>\n              <CardDescription>Complete overview of all fees</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className="overflow-x-auto">\n                <table className="w-full text-sm">\n                  <thead>\n                    <tr className="border-b">\n                      <th className="text-left p-2">Fee Structure</th>\n                      <th className="text-right p-2">Total Amount</th>\n                      <th className="text-right p-2">Paid Amount</th>\n                      <th className="text-right p-2">Due Amount</th>\n                      <th className="text-center p-2">Status</th>\n                      <th className="text-center p-2">Due Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {studentFees.map((fee) => (\n                      <tr key={fee.id} className="border-b hover:bg-muted/50">\n                        <td className="p-2 font-medium">{fee.feeStructure.name}</td>\n                        <td className="text-right p-2">${fee.totalAmount.toFixed(2)}</td>\n                        <td className="text-right p-2 text-green-600">\n                          ${fee.paidAmount.toFixed(2)}\n                        </td>\n                        <td className="text-right p-2 text-red-600">\n                          ${fee.dueAmount.toFixed(2)}\n                        </td>\n                        <td className="text-center p-2">\n                          <Badge\n                            variant={\n                              fee.status === \'paid\' ? \'default\' :\n                              fee.status === \'partial\' ? \'secondary\' :\n                              \'destructive\'\n                            }\n                          >\n                            {fee.status}\n                          </Badge>\n                        </td>\n                        <td className="text-center p-2 text-muted-foreground">\n                          {new Date(fee.dueDate).toLocaleDateString()}\n                        </td>\n                      </tr>\n                    ))}\n                    <tr className="font-bold bg-muted">\n                      <td className="p-2">TOTAL</td>\n                      <td className="text-right p-2">${totalFees.toFixed(2)}</td>\n                      <td className="text-right p-2 text-green-600">${totalPaid.toFixed(2)}</td>\n                      <td className="text-right p-2 text-red-600">${totalDue.toFixed(2)}</td>\n                      <td colSpan={2}></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}