{'role': 'user', 'content': 'Phenomenal work so far on the EduPro system. The foundation is incredibly strong. After analyzing your capabilities, we are ready to proceed with an accelerated, holistic approach.\n\nOur next mission is to build the entire **"Core Academic Operations"** phase in one comprehensive implementation. This phase includes three deeply interconnected modules: Attendance, Timetable, and Examinations.\n\nYour goal is to build these three modules as a single, cohesive system, ensuring a masterpiece-level of quality, user experience, and technical excellence.\n\n---\n\n### **Vision for the "Core Academic Operations" Phase**\n\n**1. The "Effortless" Attendance System:**\n*   **Vision:** A fast, intuitive system for daily attendance tracking that feels seamless for teachers and provides powerful insights for admins.\n*   **Implementation:**\n    *   **Teacher\'s Interface:** A "Take Attendance" page where teachers select a class/section, see the student list, and can mark Present/Absent/Late with minimal clicks. Default to "Present" for speed.\n    *   **Admin\'s Reporting:** A powerful reporting dashboard with filters (by date range, class, student) and visual charts showing attendance trends.\n    *   **Integration:** The data must automatically reflect on the 360° Student Profile page.\n\n**2. The "Intelligent" Timetable/Routine Builder:**\n*   **Vision:** A smart, drag-and-drop-style routine builder that prevents conflicts and makes scheduling a delight, not a chore.\n*   **Implementation:**\n    *   **Routine Creation:** A visual grid-based interface for admins to create class routines. The system should intelligently check for conflicts (e.g., a teacher assigned to two classes at the same time).\n    *   **Views:** Provide different views of the routine: by Class, by Teacher, and a master view for the entire institution.\n    *   **Student/Teacher Access:** Students and Teachers must see their personal, relevant timetable on their respective dashboards.\n\n**3. The "Comprehensive" Examination & Results System:**\n*   **Vision:** A complete, end-to-end examination management system, from creating exams to publishing beautiful, insightful digital report cards.\n*   **Implementation:**\n    *   **Exam Setup:** Admins can create different types of exams (e.g., Midterm, Final), set schedules, and assign subjects.\n    *   **"Excel-Like" Marks Entry:** A dedicated page for teachers to enter marks for an entire class in a spreadsheet-like grid, with keyboard navigation and real-time validation. This is a core "masterpiece" feature.\n    *   **Automatic Result Processing:** The system must automatically calculate GPA, grades, and merit positions based on the entered marks and the pre-configured grading system.\n    *   **Digital Report Cards:** Generate beautiful, printable, and insightful digital report cards for each student, accessible from the Student and Guardian portals.\n\n---\n\n### **Critical Guardrails & Technical Constraints (Non-Negotiable)**\n\nTo prevent any conflicts or disorganization, you MUST adhere to the following rules:\n\n1.  **Technological Consistency:** You MUST continue using our existing tech stack: **Vite + React + TypeScript** on the frontend, and **Node.js + Express.js** on the backend. The database ORM is **Drizzle ORM** with **PostgreSQL**. Do not introduce any major new libraries or frameworks without explicit instruction.\n2.  **Database Integrity:** All new features must be built upon our existing Drizzle schema. If new tables are required (e.g., for attendance, routines, exams), they must be created within the existing schema structure, maintaining proper relationships with existing tables like `users`, `students`, and `classes`.\n3.  **Code Organization:** Maintain the clean, modular folder structure we have already established. Place new components, pages, controllers, and routes in their appropriate directories (`/client`, `/server`).\n4.  **UI/UX Consistency:** All new interfaces MUST use our existing **Shadcn UI** component library and follow the established design language. Reuse existing components wherever possible to ensure a consistent look and feel.\n5.  **End-to-End Implementation:** For each module (Attendance, Timetable, Exams), you must implement the complete flow: the frontend UI (pages and components), the backend API (controllers and routes), and the database interactions (Drizzle queries). They must work together seamlessly.\n\n---\n\n**Final Instruction:**\n\nYour task is to bring this entire "Core Academic Operations" phase to life. Implement all three modules—Attendance, Timetable, and Examinations—following the vision and adhering strictly to the technical guardrails. I trust your expertise to deliver a fully functional, integrated, and polished result. Begin implementation now.'}