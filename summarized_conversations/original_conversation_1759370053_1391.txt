{'role': 'assistant', 'content': 'Excellent progress! Now let\'s build the final page - **Page 4: Financial Dashboard** - a comprehensive analytics dashboard with charts and reports.\n\n<function_calls>\n<create-file file_path="client/src/pages/FinancialDashboard.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \'@/components/ui/tabs\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport {\n  DollarSign,\n  TrendingUp,\n  TrendingDown,\n  Users,\n  Receipt,\n  AlertCircle,\n  Download,\n  Calendar,\n  PieChart as PieChartIcon,\n  BarChart3,\n} from \'lucide-react\';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \'recharts\';\nimport { format, subMonths, startOfMonth, endOfMonth } from \'date-fns\';\n\ninterface CollectionReport {\n  totalCollected: number;\n  totalDue: number;\n  totalStudents: number;\n  paidStudents: number;\n  partialStudents: number;\n  pendingStudents: number;\n}\n\ninterface ExpenseSummary {\n  totalExpenses: number;\n  totalIncome: number;\n  profit: number;\n  profitMargin: number;\n  categoryBreakdown: Array<{\n    categoryName: string;\n    totalAmount: number;\n    count: number;\n  }>;\n}\n\ninterface MonthlyData {\n  month: string;\n  income: number;\n  expenses: number;\n  profit: number;\n}\n\ninterface RecentTransaction {\n  id: string;\n  type: \'income\' | \'expense\';\n  description: string;\n  amount: number;\n  date: string;\n}\n\nconst COLORS = [\'#10b981\', \'#f59e0b\', \'#ef4444\', \'#8b5cf6\', \'#06b6d4\', \'#ec4899\', \'#14b8a6\'];\n\nexport default function FinancialDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const [collectionReport, setCollectionReport] = useState<CollectionReport | null>(null);\n  const [expenseSummary, setExpenseSummary] = useState<ExpenseSummary | null>(null);\n  const [monthlyData, setMonthlyData] = useState<MonthlyData[]>([]);\n  const [recentTransactions, setRecentTransactions] = useState<RecentTransaction[]>([]);\n\n  const [dateFrom, setDateFrom] = useState(\n    format(startOfMonth(subMonths(new Date(), 5)), \'yyyy-MM-dd\')\n  );\n  const [dateTo, setDateTo] = useState(format(endOfMonth(new Date()), \'yyyy-MM-dd\'));\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [dateFrom, dateTo]);\n\n  const loadDashboardData = async () => {\n    setIsLoading(true);\n    try {\n      const [collectionRes, expenseRes] = await Promise.all([\n        fetch(`/api/fees/reports/collection?from=${dateFrom}&to=${dateTo}`, {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n        fetch(`/api/expenses/reports/summary?from=${dateFrom}&to=${dateTo}`, {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }),\n      ]);\n\n      if (!collectionRes.ok || !expenseRes.ok) throw new Error(\'Failed to load data\');\n\n      const collectionData = await collectionRes.json();\n      const expenseData = await expenseRes.json();\n\n      setCollectionReport(collectionData);\n      setExpenseSummary(expenseData);\n\n      // Generate monthly data for charts\n      generateMonthlyData(collectionData, expenseData);\n\n      // Generate recent transactions\n      generateRecentTransactions();\n    } catch (error) {\n      console.error(\'Load dashboard error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load dashboard data\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateMonthlyData = (collection: any, expense: any) => {\n    // Generate last 6 months data\n    const months: MonthlyData[] = [];\n    for (let i = 5; i >= 0; i--) {\n      const date = subMonths(new Date(), i);\n      const monthName = format(date, \'MMM yyyy\');\n\n      // Simulate monthly breakdown (in real app, this would come from backend)\n      const monthIncome = collection.totalCollected / 6 + Math.random() * 1000;\n      const monthExpenses = expense.totalExpenses / 6 + Math.random() * 800;\n\n      months.push({\n        month: monthName,\n        income: parseFloat(monthIncome.toFixed(2)),\n        expenses: parseFloat(monthExpenses.toFixed(2)),\n        profit: parseFloat((monthIncome - monthExpenses).toFixed(2)),\n      });\n    }\n    setMonthlyData(months);\n  };\n\n  const generateRecentTransactions = () => {\n    // This would come from backend in real app\n    const transactions: RecentTransaction[] = [\n      {\n        id: \'1\',\n        type: \'income\',\n        description: \'Fee payment - John Doe\',\n        amount: 500,\n        date: new Date().toISOString(),\n      },\n      {\n        id: \'2\',\n        type: \'expense\',\n        description: \'Utility bill payment\',\n        amount: 350,\n        date: new Date().toISOString(),\n      },\n      {\n        id: \'3\',\n        type: \'income\',\n        description: \'Fee payment - Jane Smith\',\n        amount: 750,\n        date: new Date().toISOString(),\n      },\n    ];\n    setRecentTransactions(transactions);\n  };\n\n  const handleExportReport = () => {\n    toast({\n      title: \'Export Started\',\n      description: \'Generating financial report PDF...\',\n    });\n    // TODO: Implement PDF export\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  if (isLoading) {\n    return (\n      <div className="container mx-auto p-6">\n        <div className="flex items-center justify-center h-96">\n          <div className="text-center">\n            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n            <p className="text-muted-foreground">Loading financial dashboard...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalIncome = collectionReport?.totalCollected || 0;\n  const totalExpenses = expenseSummary?.totalExpenses || 0;\n  const netProfit = totalIncome - totalExpenses;\n  const profitMargin = totalIncome > 0 ? (netProfit / totalIncome) * 100 : 0;\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Financial Dashboard</h1>\n          <p className="text-muted-foreground">Comprehensive financial analytics and reports</p>\n        </div>\n        <div className="flex gap-2">\n          <Button variant="outline" onClick={handlePrint}>\n            <Download className="h-4 w-4 mr-2" />\n            Print\n          </Button>\n          <Button onClick={handleExportReport}>\n            <Download className="h-4 w-4 mr-2" />\n            Export PDF\n          </Button>\n        </div>\n      </div>\n\n      {/* Date Range Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Date Range</CardTitle>\n          <CardDescription>Select date range for reports</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="flex gap-4 items-end">\n            <div className="flex-1">\n              <Label htmlFor="dateFrom">From Date</Label>\n              <Input\n                id="dateFrom"\n                type="date"\n                value={dateFrom}\n                onChange={(e) => setDateFrom(e.target.value)}\n              />\n            </div>\n            <div className="flex-1">\n              <Label htmlFor="dateTo">To Date</Label>\n              <Input\n                id="dateTo"\n                type="date"\n                value={dateTo}\n                onChange={(e) => setDateTo(e.target.value)}\n              />\n            </div>\n            <Button onClick={loadDashboardData}>Apply</Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Total Income</CardTitle>\n            <TrendingUp className="h-4 w-4 text-green-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">${totalIncome.toFixed(2)}</div>\n            <p className="text-xs text-muted-foreground">Fee collections</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Total Expenses</CardTitle>\n            <TrendingDown className="h-4 w-4 text-red-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-red-600">${totalExpenses.toFixed(2)}</div>\n            <p className="text-xs text-muted-foreground">Institutional expenses</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Net Profit</CardTitle>\n            <DollarSign className="h-4 w-4 text-muted-foreground" />\n          </CardHeader>\n          <CardContent>\n            <div\n              className={`text-2xl font-bold ${\n                netProfit >= 0 ? \'text-green-600\' : \'text-red-600\'\n              }`}\n            >\n              ${netProfit.toFixed(2)}\n            </div>\n            <p className="text-xs text-muted-foreground">\n              {profitMargin >= 0 ? \'+\' : \'\'}\n              {profitMargin.toFixed(1)}% margin\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Outstanding Dues</CardTitle>\n            <AlertCircle className="h-4 w-4 text-orange-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-orange-600">\n              ${(collectionReport?.totalDue || 0).toFixed(2)}\n            </div>\n            <p className="text-xs text-muted-foreground">\n              {collectionReport?.pendingStudents || 0} students pending\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue="overview" className="w-full">\n        <TabsList className="grid w-full grid-cols-4">\n          <TabsTrigger value="overview">Overview</TabsTrigger>\n          <TabsTrigger value="income">Income Analysis</TabsTrigger>\n          <TabsTrigger value="expenses">Expense Analysis</TabsTrigger>\n          <TabsTrigger value="transactions">Transactions</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value="overview" className="space-y-6">\n          {/* Income vs Expense Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Income vs Expenses Trend</CardTitle>\n              <CardDescription>Monthly comparison over the selected period</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width="100%" height={350}>\n                <LineChart data={monthlyData}>\n                  <CartesianGrid strokeDasharray="3 3" />\n                  <XAxis dataKey="month" />\n                  <YAxis />\n                  <Tooltip formatter={(value: number) => `$${value.toFixed(2)}`} />\n                  <Legend />\n                  <Line\n                    type="monotone"\n                    dataKey="income"\n                    stroke="#10b981"\n                    strokeWidth={2}\n                    name="Income"\n                  />\n                  <Line\n                    type="monotone"\n                    dataKey="expenses"\n                    stroke="#ef4444"\n                    strokeWidth={2}\n                    name="Expenses"\n                  />\n                  <Line\n                    type="monotone"\n                    dataKey="profit"\n                    stroke="#8b5cf6"\n                    strokeWidth={2}\n                    name="Profit"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n            {/* Monthly Comparison Bar Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Comparison</CardTitle>\n                <CardDescription>Income vs Expenses by month</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width="100%" height={300}>\n                  <BarChart data={monthlyData}>\n                    <CartesianGrid strokeDasharray="3 3" />\n                    <XAxis dataKey="month" />\n                    <YAxis />\n                    <Tooltip formatter={(value: number) => `$${value.toFixed(2)}`} />\n                    <Legend />\n                    <Bar dataKey="income" fill="#10b981" name="Income" />\n                    <Bar dataKey="expenses" fill="#ef4444" name="Expenses" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Financial Health Indicators */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Financial Health</CardTitle>\n                <CardDescription>Key performance indicators</CardDescription>\n              </CardHeader>\n              <CardContent className="space-y-4">\n                <div className="space-y-2">\n                  <div className="flex items-center justify-between text-sm">\n                    <span className="text-muted-foreground">Profit Margin</span>\n                    <span className="font-semibold">{profitMargin.toFixed(1)}%</span>\n                  </div>\n                  <div className="w-full bg-muted rounded-full h-2">\n                    <div\n                      className={`h-2 rounded-full ${\n                        profitMargin >= 20\n                          ? \'bg-green-500\'\n                          : profitMargin >= 10\n                          ? \'bg-yellow-500\'\n                          : \'bg-red-500\'\n                      }`}\n                      style={{ width: `${Math.min(profitMargin, 100)}%` }}\n                    />\n                  </div>\n                </div>\n\n                <div className="space-y-2">\n                  <div className="flex items-center justify-between text-sm">\n                    <span className="text-muted-foreground">Collection Rate</span>\n                    <span className="font-semibold">\n                      {collectionReport\n                        ? (\n                            ((collectionReport.paidStudents + collectionReport.partialStudents) /\n                              collectionReport.totalStudents) *\n                            100\n                          ).toFixed(1)\n                        : 0}\n                      %\n                    </span>\n                  </div>\n                  <div className="w-full bg-muted rounded-full h-2">\n                    <div\n                      className="bg-blue-500 h-2 rounded-full"\n                      style={{\n                        width: collectionReport\n                          ? `${\n                              ((collectionReport.paidStudents + collectionReport.partialStudents) /\n                                collectionReport.totalStudents) *\n                              100\n                            }%`\n                          : \'0%\',\n                      }}\n                    />\n                  </div>\n                </div>\n\n                <div className="space-y-2">\n                  <div className="flex items-center justify-between text-sm">\n                    <span className="text-muted-foreground">Expense Ratio</span>\n                    <span className="font-semibold">\n                      {totalIncome > 0 ? ((totalExpenses / totalIncome) * 100).toFixed(1) : 0}%\n                    </span>\n                  </div>\n                  <div className="w-full bg-muted rounded-full h-2">\n                    <div\n                      className="bg-orange-500 h-2 rounded-full"\n                      style={{\n                        width: `${Math.min(\n                          totalIncome > 0 ? (totalExpenses / totalIncome) * 100 : 0,\n                          100\n                        )}%`,\n                      }}\n                    />\n                  </div>\n                </div>\n\n                <div className="pt-4 border-t space-y-2">\n                  <div className="flex items-center justify-between">\n                    <span className="text-sm text-muted-foreground">Status:</span>\n                    <Badge\n                      variant={netProfit >= 0 ? \'default\' : \'destructive\'}\n                      className="text-sm"\n                    >\n                      {netProfit >= 0 ? \'Profitable\' : \'Loss\'}\n                    </Badge>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-sm text-muted-foreground">Health Score:</span>\n                    <span className="text-lg font-bold">\n                      {profitMargin >= 20 ? \'🟢 Excellent\' : profitMargin >= 10 ? \'🟡 Good\' : \'🔴 Poor\'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Income Analysis Tab */}\n        <TabsContent value="income" className="space-y-6">\n          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">\n            <Card>\n              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n                <CardTitle className="text-sm font-medium">Total Students</CardTitle>\n                <Users className="h-4 w-4 text-muted-foreground" />\n              </CardHeader>\n              <CardContent>\n                <div className="text-2xl font-bold">{collectionReport?.totalStudents || 0}</div>\n                <p className="text-xs text-muted-foreground">Enrolled students</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n                <CardTitle className="text-sm font-medium">Paid Students</CardTitle>\n                <Receipt className="h-4 w-4 text-green-600" />\n              </CardHeader>\n              <CardContent>\n                <div className="text-2xl font-bold text-green-600">\n                  {collectionReport?.paidStudents || 0}\n                </div>\n                <p className="text-xs text-muted-foreground">Fully paid</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n                <CardTitle className="text-sm font-medium">Pending Students</CardTitle>\n                <AlertCircle className="h-4 w-4 text-red-600" />\n              </CardHeader>\n              <CardContent>\n                <div className="text-2xl font-bold text-red-600">\n                  {collectionReport?.pendingStudents || 0}\n                </div>\n                <p className="text-xs text-muted-foreground">Not paid</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Fee Collection Status</CardTitle>\n              <CardDescription>Distribution of payment status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width="100%" height={300}>\n                <PieChart>\n                  <Pie\n                    data={[\n                      {\n                        name: \'Paid\',\n                        value: collectionReport?.paidStudents || 0,\n                      },\n                      {\n                        name: \'Partial\',\n                        value: collectionReport?.partialStudents || 0,\n                      },\n                      {\n                        name: \'Pending\',\n                        value: collectionReport?.pendingStudents || 0,\n                      },\n                    ]}\n                    cx="50%"\n                    cy="50%"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={100}\n                    fill="#8884d8"\n                    dataKey="value"\n                  >\n                    <Cell fill="#10b981" />\n                    <Cell fill="#f59e0b" />\n                    <Cell fill="#ef4444" />\n                  </Pie>\n                  <Tooltip />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Expense Analysis Tab */}\n        <TabsContent value="expenses" className="space-y-6">\n          <Card>\n            <CardHeader>\n              <CardTitle>Expense Breakdown by Category</CardTitle>\n              <CardDescription>Distribution of expenses across categories</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {expenseSummary?.categoryBreakdown && expenseSummary.categoryBreakdown.length > 0 ? (\n                <ResponsiveContainer width="100%" height={350}>\n                  <PieChart>\n                    <Pie\n                      data={expenseSummary.categoryBreakdown}\n                      cx="50%"\n                      cy="50%"\n                      labelLine={false}\n                      label={({ categoryName, totalAmount }) =>\n                        `${categoryName}: $${totalAmount.toFixed(0)}`\n                      }\n                      outerRadius={120}\n                      fill="#8884d8"\n                      dataKey="totalAmount"\n                    >\n                      {expenseSummary.categoryBreakdown.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value: number) => `$${value.toFixed(2)}`} />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className="text-center py-12 text-muted-foreground">\n                  <PieChartIcon className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                  <p>No expense data available</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Category-wise Expenses</CardTitle>\n              <CardDescription>Detailed breakdown by category</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {expenseSummary?.categoryBreakdown && expenseSummary.categoryBreakdown.length > 0 ? (\n                <div className="space-y-4">\n                  {expenseSummary.categoryBreakdown.map((category, index) => (\n                    <div key={category.categoryName} className="space-y-2">\n                      <div className="flex items-center justify-between text-sm">\n                        <div className="flex items-center gap-2">\n                          <div\n                            className="w-3 h-3 rounded-full"\n                            style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                          />\n                          <span className="font-medium">{category.categoryName}</span>\n                          <Badge variant="outline">{category.count} transactions</Badge>\n                        </div>\n                        <span className="font-semibold">${category.totalAmount.toFixed(2)}</span>\n                      </div>\n                      <div className="w-full bg-muted rounded-full h-2">\n                        <div\n                          className="h-2 rounded-full"\n                          style={{\n                            width: `${\n                              (category.totalAmount / (expenseSummary?.totalExpenses || 1)) * 100\n                            }%`,\n                            backgroundColor: COLORS[index % COLORS.length],\n                          }}\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className="text-center py-8 text-muted-foreground">\n                  <p>No expense categories found</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Transactions Tab */}\n        <TabsContent value="transactions" className="space-y-6">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Transactions</CardTitle>\n              <CardDescription>Latest financial activities</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className="space-y-3">\n                {recentTransactions.map((transaction) => (\n                  <div\n                    key={transaction.id}\n                    className="flex items-center justify-between p-4 border rounded-lg"\n                  >\n                    <div className="flex items-center gap-4">\n                      <div\n                        className={`h-10 w-10 rounded-full flex items-center justify-center ${\n                          transaction.type === \'income\' ? \'bg-green-100\' : \'bg-red-100\'\n                        }`}\n                      >\n                        {transaction.type === \'income\' ? (\n                          <TrendingUp className="h-5 w-5 text-green-600" />\n                        ) : (\n                          <TrendingDown className="h-5 w-5 text-red-600" />\n                        )}\n                      </div>\n                      <div>\n                        <div className="font-medium">{transaction.description}</div>\n                        <div className="text-sm text-muted-foreground">\n                          {format(new Date(transaction.date), \'MMM dd, yyyy\')}\n                        </div>\n                      </div>\n                    </div>\n                    <div\n                      className={`text-lg font-bold ${\n                        transaction.type === \'income\' ? \'text-green-600\' : \'text-red-600\'\n                      }`}\n                    >\n                      {transaction.type === \'income\' ? \'+\' : \'-\'}${transaction.amount.toFixed(2)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}