{'role': 'assistant', 'content': '## Step 5: Create Students List Page\n\n<function_calls>\n<create-file file_path="client/src/pages/StudentsList.tsx">\nimport { useState } from \'react\';\nimport { useQuery } from \'@tanstack/react-query\';\nimport { apiClient } from \'@/lib/api\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \'@/components/ui/table\';\nimport { Badge } from \'@/components/ui/badge\';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \'@/components/ui/select\';\nimport { Plus, Search, Eye, Edit, UserX, UserCheck } from \'lucide-react\';\nimport { useLocation } from \'wouter\';\nimport { formatDate } from \'@/lib/utils\';\n\nexport default function StudentsList() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [classFilter, setClassFilter] = useState(\'\');\n  const [sectionFilter, setSectionFilter] = useState(\'\');\n  const [statusFilter, setStatusFilter] = useState(\'\');\n  const [page, setPage] = useState(1);\n  const limit = 10;\n\n  // Fetch students\n  const { data: studentsData, isLoading } = useQuery({\n    queryKey: [\'students\', page, searchQuery, classFilter, sectionFilter, statusFilter],\n    queryFn: async () => {\n      const response = await apiClient.get(\'/students\', {\n        page,\n        limit,\n        search: searchQuery,\n        classId: classFilter,\n        sectionId: sectionFilter,\n        status: statusFilter,\n      });\n      return response.data;\n    },\n  });\n\n  // Fetch student stats\n  const { data: statsData } = useQuery({\n    queryKey: [\'student-stats\'],\n    queryFn: async () => {\n      const response = await apiClient.get(\'/students/stats\');\n      return response.data;\n    },\n  });\n\n  // Fetch classes for filter\n  const { data: classesData } = useQuery({\n    queryKey: [\'classes\'],\n    queryFn: async () => {\n      const response = await apiClient.get(\'/academic/classes\');\n      return response.data;\n    },\n  });\n\n  // Fetch sections for filter\n  const { data: sectionsData } = useQuery({\n    queryKey: [\'sections\', classFilter],\n    queryFn: async () => {\n      if (!classFilter) return [];\n      const response = await apiClient.get(`/academic/classes/${classFilter}/sections`);\n      return response.data;\n    },\n    enabled: !!classFilter,\n  });\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \'active\':\n        return \'success\';\n      case \'inactive\':\n        return \'outline\';\n      case \'graduated\':\n        return \'secondary\';\n      case \'transferred\':\n        return \'default\';\n      default:\n        return \'outline\';\n    }\n  };\n\n  const stats = statsData || { total: 0, active: 0, inactive: 0, graduated: 0, transferred: 0 };\n  const students = studentsData?.students || [];\n  const pagination = studentsData?.pagination || { page: 1, totalPages: 1, total: 0 };\n  const classes = classesData || [];\n  const sections = sectionsData || [];\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Students</h1>\n          <p className="text-muted-foreground mt-2">\n            Manage all students in the institution\n          </p>\n        </div>\n        <Button onClick={() => setLocation(\'/students/admission\')}>\n          <Plus className="h-4 w-4 mr-2" />\n          Admit Student\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className="grid gap-4 md:grid-cols-5">\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Total Students</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{stats.total}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Active</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">{stats.active}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Inactive</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-gray-600">{stats.inactive}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Graduated</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-blue-600">{stats.graduated}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className="pb-3">\n            <CardTitle className="text-sm font-medium">Transferred</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-orange-600">{stats.transferred}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Students List</CardTitle>\n          <CardDescription>View and manage all enrolled students</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="flex flex-col md:flex-row gap-4 mb-4">\n            <div className="flex-1 relative">\n              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />\n              <Input\n                placeholder="Search by name, email, or student ID..."\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className="pl-10"\n              />\n            </div>\n            <Select value={classFilter} onValueChange={(value) => {\n              setClassFilter(value);\n              setSectionFilter(\'\'); // Reset section when class changes\n            }}>\n              <SelectTrigger className="w-full md:w-[180px]">\n                <SelectValue placeholder="Filter by class" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value="">All Classes</SelectItem>\n                {classes.map((cls: any) => (\n                  <SelectItem key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select \n              value={sectionFilter} \n              onValueChange={setSectionFilter}\n              disabled={!classFilter}\n            >\n              <SelectTrigger className="w-full md:w-[180px]">\n                <SelectValue placeholder="Filter by section" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value="">All Sections</SelectItem>\n                {sections.map((section: any) => (\n                  <SelectItem key={section.id} value={section.id}>\n                    Section {section.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className="w-full md:w-[180px]">\n                <SelectValue placeholder="Filter by status" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value="">All Status</SelectItem>\n                <SelectItem value="active">Active</SelectItem>\n                <SelectItem value="inactive">Inactive</SelectItem>\n                <SelectItem value="graduated">Graduated</SelectItem>\n                <SelectItem value="transferred">Transferred</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Students Table */}\n          <div className="border rounded-lg">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Student ID</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Class</TableHead>\n                  <TableHead>Roll No.</TableHead>\n                  <TableHead>Guardian</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className="text-right">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className="text-center py-8">\n                      Loading...\n                    </TableCell>\n                  </TableRow>\n                ) : students.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className="text-center py-8">\n                      No students found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  students.map((student: any) => (\n                    <TableRow key={student.id}>\n                      <TableCell className="font-medium">\n                        {student.studentId}\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <p className="font-medium">\n                            {student.user.firstName} {student.user.lastName}\n                          </p>\n                          <p className="text-xs text-muted-foreground">\n                            {student.user.email}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {student.currentEnrollment ? (\n                          <div>\n                            <p className="font-medium">\n                              {student.currentEnrollment.class?.name}\n                            </p>\n                            <p className="text-xs text-muted-foreground">\n                              Section {student.currentEnrollment.section?.name}\n                            </p>\n                          </div>\n                        ) : (\n                          <span className="text-muted-foreground">-</span>\n                        )}\n                      </TableCell>\n                      <TableCell>{student.rollNumber || \'-\'}</TableCell>\n                      <TableCell>\n                        <div>\n                          <p className="text-sm">{student.guardianName}</p>\n                          <p className="text-xs text-muted-foreground">\n                            {student.guardianPhone}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getStatusBadgeVariant(student.status)} className="capitalize">\n                          {student.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className="text-right">\n                        <div className="flex items-center justify-end space-x-2">\n                          <Button \n                            variant="ghost" \n                            size="icon"\n                            onClick={() => setLocation(`/students/${student.id}`)}\n                          >\n                            <Eye className="h-4 w-4" />\n                          </Button>\n                          <Button variant="ghost" size="icon">\n                            <Edit className="h-4 w-4" />\n                          </Button>\n                          <Button variant="ghost" size="icon">\n                            {student.status === \'active\' ? (\n                              <UserX className="h-4 w-4 text-red-600" />\n                            ) : (\n                              <UserCheck className="h-4 w-4 text-green-600" />\n                            )}\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className="flex items-center justify-between mt-4">\n            <p className="text-sm text-muted-foreground">\n              Showing {students.length} of {pagination.total} students\n            </p>\n            <div className="flex items-center space-x-2">\n              <Button\n                variant="outline"\n                size="sm"\n                onClick={() => setPage(page - 1)}\n                disabled={page === 1}\n              >\n                Previous\n              </Button>\n              <span className="text-sm">\n                Page {pagination.page} of {pagination.totalPages}\n              </span>\n              <Button\n                variant="outline"\n                size="sm"\n                onClick={() => setPage(page + 1)}\n                disabled={page === pagination.totalPages}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}