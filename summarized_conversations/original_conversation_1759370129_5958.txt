{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/routes/library.routes.ts">\nimport { Router } from \'express\';\nimport { authenticate, authorize } from \'../middleware/auth\';\nimport * as libraryController from \'../controllers/library.controller\';\n\nconst router = Router();\n\n// All routes require authentication\nrouter.use(authenticate);\n\n// Book routes\nrouter.get(\'/books\', libraryController.getBooks);\nrouter.get(\'/books/categories\', libraryController.getBookCategories);\nrouter.get(\'/books/statistics\', libraryController.getLibraryStatistics);\nrouter.get(\'/books/:id\', libraryController.getBookById);\nrouter.post(\'/books\', authorize([\'superadmin\', \'admin\']), libraryController.createBook);\nrouter.put(\'/books/:id\', authorize([\'superadmin\', \'admin\']), libraryController.updateBook);\nrouter.delete(\'/books/:id\', authorize([\'superadmin\', \'admin\']), libraryController.deleteBook);\n\n// Issue/Return routes\nrouter.get(\'/issues\', libraryController.getBookIssues);\nrouter.post(\'/issues\', authorize([\'superadmin\', \'admin\']), libraryController.issueBook);\nrouter.patch(\'/issues/:id/return\', authorize([\'superadmin\', \'admin\']), libraryController.returnBook);\nrouter.get(\'/students/:studentId/books\', libraryController.getStudentBooks);\n\n// Maintenance routes\nrouter.post(\'/maintenance/update-overdue\', authorize([\'superadmin\', \'admin\']), libraryController.updateOverdueStatus);\n\nexport default router;\n</create-file>\n</function_calls>'}