{'role': 'assistant', 'content': 'Now let\'s create the library schema:\n\n<function_calls>\n<create-file file_path="server/src/db/schema/library.ts">\nimport { pgTable, uuid, varchar, integer, timestamp, text, boolean, date } from \'drizzle-orm/pg-core\';\nimport { relations } from \'drizzle-orm\';\nimport { students } from \'./students\';\nimport { users } from \'./users\';\n\n// Books table\nexport const books = pgTable(\'books\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  title: varchar(\'title\', { length: 255 }).notNull(),\n  author: varchar(\'author\', { length: 255 }).notNull(),\n  isbn: varchar(\'isbn\', { length: 20 }),\n  publisher: varchar(\'publisher\', { length: 255 }),\n  publicationYear: integer(\'publication_year\'),\n  category: varchar(\'category\', { length: 100 }).notNull(), // \'Fiction\', \'Science\', \'Mathematics\', etc.\n  language: varchar(\'language\', { length: 50 }).default(\'English\'),\n  edition: varchar(\'edition\', { length: 50 }),\n  pages: integer(\'pages\'),\n  totalQuantity: integer(\'total_quantity\').notNull(),\n  availableQuantity: integer(\'available_quantity\').notNull(),\n  shelfLocation: varchar(\'shelf_location\', { length: 50 }),\n  description: text(\'description\'),\n  coverImage: varchar(\'cover_image\', { length: 255 }),\n  price: integer(\'price\').default(0),\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Book Issues table\nexport const bookIssues = pgTable(\'book_issues\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  bookId: uuid(\'book_id\').references(() => books.id, { onDelete: \'cascade\' }).notNull(),\n  studentId: uuid(\'student_id\').references(() => students.id, { onDelete: \'cascade\' }).notNull(),\n  issueDate: date(\'issue_date\').notNull(),\n  dueDate: date(\'due_date\').notNull(),\n  returnDate: date(\'return_date\'),\n  status: varchar(\'status\', { length: 20 }).default(\'issued\').notNull(), // \'issued\', \'returned\', \'overdue\', \'lost\'\n  fineAmount: integer(\'fine_amount\').default(0),\n  remarks: text(\'remarks\'),\n  issuedBy: uuid(\'issued_by\').references(() => users.id),\n  returnedBy: uuid(\'returned_by\').references(() => users.id),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Relations\nexport const booksRelations = relations(books, ({ many }) => ({\n  issues: many(bookIssues),\n}));\n\nexport const bookIssuesRelations = relations(bookIssues, ({ one }) => ({\n  book: one(books, {\n    fields: [bookIssues.bookId],\n    references: [books.id],\n  }),\n  student: one(students, {\n    fields: [bookIssues.studentId],\n    references: [students.id],\n  }),\n  issuedByUser: one(users, {\n    fields: [bookIssues.issuedBy],\n    references: [users.id],\n  }),\n  returnedByUser: one(users, {\n    fields: [bookIssues.returnedBy],\n    references: [users.id],\n  }),\n}));\n</create-file>\n</function_calls>'}