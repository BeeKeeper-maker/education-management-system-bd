{'role': 'assistant', 'content': 'Now let me create the Timetable/Routine Builder page for admins. This will be a comprehensive page with a grid-based interface:\n\n<function_calls>\n<create-file file_path="client/src/pages/TimetableBuilder.tsx">\nimport { useState, useEffect } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'../components/ui/card\';\nimport { Button } from \'../components/ui/button\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'../components/ui/select\';\nimport { Label } from \'../components/ui/label\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \'../components/ui/dialog\';\nimport { useToast } from \'../components/ui/use-toast\';\nimport { Calendar, Plus, Edit, Trash2, AlertCircle } from \'lucide-react\';\nimport { Badge } from \'../components/ui/badge\';\n\ninterface Period {\n  id: string;\n  name: string;\n  startTime: string;\n  endTime: string;\n  orderIndex: number;\n  isBreak: boolean;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n}\n\ninterface Section {\n  id: string;\n  name: string;\n}\n\ninterface Subject {\n  id: string;\n  name: string;\n  code: string;\n}\n\ninterface Teacher {\n  id: string;\n  name: string;\n}\n\ninterface TimetableEntry {\n  id: string;\n  dayOfWeek: number;\n  roomNumber?: string;\n  period: Period;\n  subject?: Subject;\n  teacher?: Teacher;\n}\n\nconst DAYS = [\n  { value: 1, label: \'Monday\' },\n  { value: 2, label: \'Tuesday\' },\n  { value: 3, label: \'Wednesday\' },\n  { value: 4, label: \'Thursday\' },\n  { value: 5, label: \'Friday\' },\n  { value: 6, label: \'Saturday\' },\n];\n\nexport default function TimetableBuilder() {\n  const { toast } = useToast();\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [subjects, setSubjects] = useState<Subject[]>([]);\n  const [teachers, setTeachers] = useState<Teacher[]>([]);\n  const [periods, setPeriods] = useState<Period[]>([]);\n  const [selectedClass, setSelectedClass] = useState(\'\');\n  const [selectedSection, setSelectedSection] = useState(\'\');\n  const [timetable, setTimetable] = useState<Record<number, TimetableEntry[]>>({});\n  const [loading, setLoading] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<{\n    dayOfWeek: number;\n    periodId: string;\n    entry?: TimetableEntry;\n  } | null>(null);\n  const [formData, setFormData] = useState({\n    subjectId: \'\',\n    teacherId: \'\',\n    roomNumber: \'\',\n  });\n\n  useEffect(() => {\n    fetchClasses();\n    fetchSubjects();\n    fetchTeachers();\n    fetchPeriods();\n  }, []);\n\n  useEffect(() => {\n    if (selectedClass) {\n      fetchSections(selectedClass);\n    } else {\n      setSections([]);\n      setSelectedSection(\'\');\n    }\n  }, [selectedClass]);\n\n  useEffect(() => {\n    if (selectedClass && selectedSection) {\n      fetchTimetable();\n    }\n  }, [selectedClass, selectedSection]);\n\n  const fetchClasses = async () => {\n    try {\n      const response = await fetch(\'/api/academic/classes\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setClasses(data.data);\n    } catch (error) {\n      console.error(\'Error fetching classes:\', error);\n    }\n  };\n\n  const fetchSections = async (classId: string) => {\n    try {\n      const response = await fetch(`/api/academic/classes/${classId}/sections`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setSections(data.data);\n    } catch (error) {\n      console.error(\'Error fetching sections:\', error);\n    }\n  };\n\n  const fetchSubjects = async () => {\n    try {\n      const response = await fetch(\'/api/academic/subjects\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setSubjects(data.data);\n    } catch (error) {\n      console.error(\'Error fetching subjects:\', error);\n    }\n  };\n\n  const fetchTeachers = async () => {\n    try {\n      const response = await fetch(\'/api/users?role=teacher\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setTeachers(data.data.users.map((u: any) => ({\n          id: u.id,\n          name: `${u.firstName} ${u.lastName}`,\n        })));\n      }\n    } catch (error) {\n      console.error(\'Error fetching teachers:\', error);\n    }\n  };\n\n  const fetchPeriods = async () => {\n    try {\n      const response = await fetch(\'/api/timetable/periods\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) setPeriods(data.data);\n    } catch (error) {\n      console.error(\'Error fetching periods:\', error);\n    }\n  };\n\n  const fetchTimetable = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `/api/timetable/class?classId=${selectedClass}&sectionId=${selectedSection}`,\n        {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n        }\n      );\n      const data = await response.json();\n      if (data.success) {\n        setTimetable(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching timetable:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to fetch timetable\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const openEntryDialog = (dayOfWeek: number, periodId: string, entry?: TimetableEntry) => {\n    setEditingEntry({ dayOfWeek, periodId, entry });\n    if (entry) {\n      setFormData({\n        subjectId: entry.subject?.id || \'\',\n        teacherId: entry.teacher?.id || \'\',\n        roomNumber: entry.roomNumber || \'\',\n      });\n    } else {\n      setFormData({ subjectId: \'\', teacherId: \'\', roomNumber: \'\' });\n    }\n    setDialogOpen(true);\n  };\n\n  const saveEntry = async () => {\n    if (!editingEntry) return;\n\n    try {\n      const response = await fetch(\'/api/timetable/entries\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          classId: selectedClass,\n          sectionId: selectedSection,\n          subjectId: formData.subjectId || null,\n          teacherId: formData.teacherId || null,\n          periodId: editingEntry.periodId,\n          dayOfWeek: editingEntry.dayOfWeek,\n          roomNumber: formData.roomNumber || null,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        toast({\n          title: \'Success\',\n          description: \'Timetable entry saved successfully\',\n        });\n        setDialogOpen(false);\n        fetchTimetable();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to save entry\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const deleteEntry = async (entryId: string) => {\n    try {\n      const response = await fetch(`/api/timetable/entries/${entryId}`, {\n        method: \'DELETE\',\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        toast({\n          title: \'Success\',\n          description: \'Entry deleted successfully\',\n        });\n        fetchTimetable();\n      }\n    } catch (error) {\n      toast({\n        title: \'Error\',\n        description: \'Failed to delete entry\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const getEntryForCell = (dayOfWeek: number, periodId: string): TimetableEntry | undefined => {\n    const dayEntries = timetable[dayOfWeek] || [];\n    return dayEntries.find(entry => entry.period.id === periodId);\n  };\n\n  return (\n    <div className="space-y-6">\n      <div>\n        <h1 className="text-3xl font-bold">Timetable Builder</h1>\n        <p className="text-muted-foreground">Create and manage class timetables</p>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Select Class & Section</CardTitle>\n          <CardDescription>Choose the class and section to manage timetable</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n            <div className="space-y-2">\n              <Label>Class</Label>\n              <Select value={selectedClass} onValueChange={setSelectedClass}>\n                <SelectTrigger>\n                  <SelectValue placeholder="Select class" />\n                </SelectTrigger>\n                <SelectContent>\n                  {classes.map(cls => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Section</Label>\n              <Select\n                value={selectedSection}\n                onValueChange={setSelectedSection}\n                disabled={!selectedClass}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder="Select section" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sections.map(section => (\n                    <SelectItem key={section.id} value={section.id}>\n                      {section.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Timetable Grid */}\n      {loading ? (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <p className="text-muted-foreground">Loading timetable...</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : selectedClass && selectedSection ? (\n        <Card>\n          <CardHeader>\n            <CardTitle>Weekly Timetable</CardTitle>\n            <CardDescription>Click on any cell to add or edit an entry</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className="overflow-x-auto">\n              <table className="w-full border-collapse">\n                <thead>\n                  <tr>\n                    <th className="border p-2 bg-muted font-semibold text-left min-w-[120px]">\n                      Period / Day\n                    </th>\n                    {DAYS.map(day => (\n                      <th key={day.value} className="border p-2 bg-muted font-semibold text-center min-w-[150px]">\n                        {day.label}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {periods.map(period => (\n                    <tr key={period.id}>\n                      <td className="border p-2 bg-muted/50">\n                        <div className="font-medium">{period.name}</div>\n                        <div className="text-xs text-muted-foreground">\n                          {period.startTime} - {period.endTime}\n                        </div>\n                        {period.isBreak && (\n                          <Badge variant="secondary" className="mt-1 text-xs">\n                            Break\n                          </Badge>\n                        )}\n                      </td>\n                      {DAYS.map(day => {\n                        const entry = getEntryForCell(day.value, period.id);\n                        return (\n                          <td\n                            key={`${day.value}-${period.id}`}\n                            className={`border p-2 cursor-pointer hover:bg-accent/50 transition-colors ${\n                              period.isBreak ? \'bg-gray-50\' : \'\'\n                            }`}\n                            onClick={() => !period.isBreak && openEntryDialog(day.value, period.id, entry)}\n                          >\n                            {!period.isBreak && entry ? (\n                              <div className="space-y-1">\n                                <div className="font-medium text-sm">{entry.subject?.name || \'No Subject\'}</div>\n                                <div className="text-xs text-muted-foreground">\n                                  {entry.teacher?.name || \'No Teacher\'}\n                                </div>\n                                {entry.roomNumber && (\n                                  <Badge variant="outline" className="text-xs">\n                                    Room {entry.roomNumber}\n                                  </Badge>\n                                )}\n                                <div className="flex gap-1 mt-2">\n                                  <Button\n                                    size="sm"\n                                    variant="ghost"\n                                    className="h-6 px-2"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      openEntryDialog(day.value, period.id, entry);\n                                    }}\n                                  >\n                                    <Edit className="h-3 w-3" />\n                                  </Button>\n                                  <Button\n                                    size="sm"\n                                    variant="ghost"\n                                    className="h-6 px-2 text-red-600 hover:text-red-700"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      if (confirm(\'Delete this entry?\')) {\n                                        deleteEntry(entry.id);\n                                      }\n                                    }}\n                                  >\n                                    <Trash2 className="h-3 w-3" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : !period.isBreak ? (\n                              <div className="text-center text-muted-foreground text-sm">\n                                <Plus className="h-4 w-4 mx-auto mb-1" />\n                                <span className="text-xs">Add Entry</span>\n                              </div>\n                            ) : (\n                              <div className="text-center text-muted-foreground text-sm">\n                                {period.name}\n                              </div>\n                            )}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <Calendar className="mx-auto h-12 w-12 text-muted-foreground mb-4" />\n              <p className="text-muted-foreground">Please select a class and section to begin</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Entry Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {editingEntry?.entry ? \'Edit\' : \'Add\'} Timetable Entry\n            </DialogTitle>\n            <DialogDescription>\n              {editingEntry && (\n                <>\n                  {DAYS.find(d => d.value === editingEntry.dayOfWeek)?.label} -{\' \'}\n                  {periods.find(p => p.id === editingEntry.periodId)?.name}\n                </>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          <div className="space-y-4">\n            <div className="space-y-2">\n              <Label>Subject</Label>\n              <Select\n                value={formData.subjectId}\n                onValueChange={value => setFormData({ ...formData, subjectId: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder="Select subject" />\n                </SelectTrigger>\n                <SelectContent>\n                  {subjects.map(subject => (\n                    <SelectItem key={subject.id} value={subject.id}>\n                      {subject.name} ({subject.code})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Teacher</Label>\n              <Select\n                value={formData.teacherId}\n                onValueChange={value => setFormData({ ...formData, teacherId: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder="Select teacher" />\n                </SelectTrigger>\n                <SelectContent>\n                  {teachers.map(teacher => (\n                    <SelectItem key={teacher.id} value={teacher.id}>\n                      {teacher.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Room Number (Optional)</Label>\n              <input\n                type="text"\n                className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm"\n                placeholder="e.g., 101, Lab 1"\n                value={formData.roomNumber}\n                onChange={e => setFormData({ ...formData, roomNumber: e.target.value })}\n              />\n            </div>\n\n            <div className="flex gap-2 justify-end">\n              <Button variant="outline" onClick={() => setDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={saveEntry}>Save Entry</Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}