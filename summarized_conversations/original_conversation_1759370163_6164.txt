{'role': 'assistant', 'content': 'Perfect! Now let\'s create the final critical page - **Book Issue/Return Page**:\n\n<function_calls>\n<create-file file_path="client/src/pages/IssueReturn.tsx">\nimport { useState, useEffect } from \'react\';\nimport { useAuth } from \'@/contexts/AuthContext\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Badge } from \'@/components/ui/badge\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \'@/components/ui/dialog\';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \'@/components/ui/tabs\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { Search, BookOpen, UserCheck, RotateCcw, AlertCircle, CheckCircle, Calendar } from \'lucide-react\';\nimport { format, addDays } from \'date-fns\';\n\ninterface Student {\n  id: string;\n  studentId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\ninterface Book {\n  id: string;\n  title: string;\n  author: string;\n  isbn: string;\n  category: string;\n  availableQuantity: number;\n  totalQuantity: number;\n  shelfLocation: string;\n}\n\ninterface BookIssue {\n  issue: {\n    id: string;\n    issueDate: string;\n    dueDate: string;\n    returnDate: string | null;\n    status: string;\n    fineAmount: number;\n  };\n  book: Book;\n  student: Student;\n}\n\nexport default function IssueReturn() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const [studentSearch, setStudentSearch] = useState(\'\');\n  const [bookSearch, setBookSearch] = useState(\'\');\n  const [students, setStudents] = useState<Student[]>([]);\n  const [books, setBooks] = useState<Book[]>([]);\n  const [issuedBooks, setIssuedBooks] = useState<BookIssue[]>([]);\n\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [selectedBook, setSelectedBook] = useState<Book | null>(null);\n\n  const [isIssueDialogOpen, setIsIssueDialogOpen] = useState(false);\n  const [isReturnDialogOpen, setIsReturnDialogOpen] = useState(false);\n  const [selectedIssue, setSelectedIssue] = useState<BookIssue | null>(null);\n\n  const [issueForm, setIssueForm] = useState({\n    issueDate: format(new Date(), \'yyyy-MM-dd\'),\n    dueDate: format(addDays(new Date(), 14), \'yyyy-MM-dd\'),\n    remarks: \'\',\n  });\n\n  const [returnForm, setReturnForm] = useState({\n    returnDate: format(new Date(), \'yyyy-MM-dd\'),\n    fineAmount: \'\',\n    remarks: \'\',\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    loadIssuedBooks();\n  }, []);\n\n  const loadIssuedBooks = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\'/api/library/issues?status=issued\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) throw new Error(\'Failed to load issued books\');\n\n      const data = await response.json();\n      setIssuedBooks(data.issues || []);\n    } catch (error) {\n      console.error(\'Load issued books error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to load issued books\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const searchStudents = async (query: string) => {\n    if (!query.trim()) {\n      setStudents([]);\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/students?search=${encodeURIComponent(query)}`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) throw new Error(\'Failed to search students\');\n\n      const data = await response.json();\n      setStudents(data.students || []);\n    } catch (error) {\n      console.error(\'Search students error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to search students\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const searchBooks = async (query: string) => {\n    if (!query.trim()) {\n      setBooks([]);\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/library/books?search=${encodeURIComponent(query)}`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n\n      if (!response.ok) throw new Error(\'Failed to search books\');\n\n      const data = await response.json();\n      // Filter only available books\n      const availableBooks = (data.books || []).filter((book: Book) => book.availableQuantity > 0);\n      setBooks(availableBooks);\n    } catch (error) {\n      console.error(\'Search books error:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to search books\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const handleIssueBook = async () => {\n    if (!selectedStudent || !selectedBook) {\n      toast({\n        title: \'Validation Error\',\n        description: \'Please select both a student and a book\',\n        variant: \'destructive\',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\'/api/library/issues\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          bookId: selectedBook.id,\n          studentId: selectedStudent.id,\n          issueDate: issueForm.issueDate,\n          dueDate: issueForm.dueDate,\n          remarks: issueForm.remarks || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to issue book\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Book issued successfully\',\n      });\n\n      setIsIssueDialogOpen(false);\n      resetIssueForm();\n      loadIssuedBooks();\n    } catch (error: any) {\n      console.error(\'Issue book error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to issue book\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleReturnBook = async () => {\n    if (!selectedIssue) return;\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`/api/library/issues/${selectedIssue.issue.id}/return`, {\n        method: \'PATCH\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify({\n          returnDate: returnForm.returnDate,\n          fineAmount: returnForm.fineAmount ? parseInt(returnForm.fineAmount) : 0,\n          remarks: returnForm.remarks || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \'Failed to return book\');\n      }\n\n      toast({\n        title: \'Success\',\n        description: \'Book returned successfully\',\n      });\n\n      setIsReturnDialogOpen(false);\n      resetReturnForm();\n      loadIssuedBooks();\n    } catch (error: any) {\n      console.error(\'Return book error:\', error);\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to return book\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const openIssueDialog = (student: Student, book: Book) => {\n    setSelectedStudent(student);\n    setSelectedBook(book);\n    setIsIssueDialogOpen(true);\n  };\n\n  const openReturnDialog = (issue: BookIssue) => {\n    setSelectedIssue(issue);\n    \n    // Calculate fine if overdue\n    const dueDate = new Date(issue.issue.dueDate);\n    const today = new Date();\n    const daysOverdue = Math.max(0, Math.floor((today.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24)));\n    const fine = daysOverdue * 5; // $5 per day\n\n    setReturnForm({\n      returnDate: format(new Date(), \'yyyy-MM-dd\'),\n      fineAmount: fine.toString(),\n      remarks: daysOverdue > 0 ? `${daysOverdue} days overdue` : \'\',\n    });\n    setIsReturnDialogOpen(true);\n  };\n\n  const resetIssueForm = () => {\n    setIssueForm({\n      issueDate: format(new Date(), \'yyyy-MM-dd\'),\n      dueDate: format(addDays(new Date(), 14), \'yyyy-MM-dd\'),\n      remarks: \'\',\n    });\n    setSelectedStudent(null);\n    setSelectedBook(null);\n    setStudentSearch(\'\');\n    setBookSearch(\'\');\n    setStudents([]);\n    setBooks([]);\n  };\n\n  const resetReturnForm = () => {\n    setReturnForm({\n      returnDate: format(new Date(), \'yyyy-MM-dd\'),\n      fineAmount: \'\',\n      remarks: \'\',\n    });\n    setSelectedIssue(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className="container mx-auto p-6">\n        <div className="flex items-center justify-center h-96">\n          <div className="text-center">\n            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>\n            <p className="text-muted-foreground">Loading library data...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="container mx-auto p-6 space-y-6">\n      {/* Header */}\n      <div>\n        <h1 className="text-3xl font-bold">Issue & Return Books</h1>\n        <p className="text-muted-foreground">Manage book circulation</p>\n      </div>\n\n      {/* Statistics */}\n      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Currently Issued</CardTitle>\n            <BookOpen className="h-4 w-4 text-orange-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-orange-600">{issuedBooks.length}</div>\n            <p className="text-xs text-muted-foreground">Books in circulation</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">Overdue</CardTitle>\n            <AlertCircle className="h-4 w-4 text-red-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-red-600">\n              {issuedBooks.filter((issue) => new Date(issue.issue.dueDate) < new Date()).length}\n            </div>\n            <p className="text-xs text-muted-foreground">Books past due date</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">\n            <CardTitle className="text-sm font-medium">On Time</CardTitle>\n            <CheckCircle className="h-4 w-4 text-green-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">\n              {issuedBooks.filter((issue) => new Date(issue.issue.dueDate) >= new Date()).length}\n            </div>\n            <p className="text-xs text-muted-foreground">Books within due date</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue="issue" className="w-full">\n        <TabsList className="grid w-full grid-cols-2">\n          <TabsTrigger value="issue">Issue Book</TabsTrigger>\n          <TabsTrigger value="return">Return Book</TabsTrigger>\n        </TabsList>\n\n        {/* Issue Book Tab */}\n        <TabsContent value="issue" className="space-y-6">\n          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n            {/* Search Student */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Search Student</CardTitle>\n                <CardDescription>Find student by name or ID</CardDescription>\n              </CardHeader>\n              <CardContent className="space-y-4">\n                <div className="relative">\n                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />\n                  <Input\n                    placeholder="Enter student name or ID..."\n                    value={studentSearch}\n                    onChange={(e) => {\n                      setStudentSearch(e.target.value);\n                      searchStudents(e.target.value);\n                    }}\n                    className="pl-8"\n                  />\n                </div>\n\n                {selectedStudent ? (\n                  <Card className="border-primary">\n                    <CardContent className="p-4">\n                      <div className="flex items-center justify-between">\n                        <div>\n                          <div className="font-medium">\n                            {selectedStudent.firstName} {selectedStudent.lastName}\n                          </div>\n                          <div className="text-sm text-muted-foreground">{selectedStudent.studentId}</div>\n                        </div>\n                        <Badge variant="default">Selected</Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : students.length > 0 ? (\n                  <div className="space-y-2 max-h-64 overflow-y-auto">\n                    {students.map((student) => (\n                      <Card\n                        key={student.id}\n                        className="cursor-pointer hover:border-primary transition-colors"\n                        onClick={() => {\n                          setSelectedStudent(student);\n                          setStudents([]);\n                          setStudentSearch(\'\');\n                        }}\n                      >\n                        <CardContent className="p-4">\n                          <div className="font-medium">\n                            {student.firstName} {student.lastName}\n                          </div>\n                          <div className="text-sm text-muted-foreground">{student.studentId}</div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : null}\n              </CardContent>\n            </Card>\n\n            {/* Search Book */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Search Book</CardTitle>\n                <CardDescription>Find available book by title or author</CardDescription>\n              </CardHeader>\n              <CardContent className="space-y-4">\n                <div className="relative">\n                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />\n                  <Input\n                    placeholder="Enter book title or author..."\n                    value={bookSearch}\n                    onChange={(e) => {\n                      setBookSearch(e.target.value);\n                      searchBooks(e.target.value);\n                    }}\n                    className="pl-8"\n                  />\n                </div>\n\n                {selectedBook ? (\n                  <Card className="border-primary">\n                    <CardContent className="p-4">\n                      <div className="flex items-center justify-between mb-2">\n                        <div>\n                          <div className="font-medium">{selectedBook.title}</div>\n                          <div className="text-sm text-muted-foreground">{selectedBook.author}</div>\n                        </div>\n                        <Badge variant="default">Selected</Badge>\n                      </div>\n                      <div className="text-sm text-muted-foreground">\n                        Available: {selectedBook.availableQuantity}/{selectedBook.totalQuantity}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : books.length > 0 ? (\n                  <div className="space-y-2 max-h-64 overflow-y-auto">\n                    {books.map((book) => (\n                      <Card\n                        key={book.id}\n                        className="cursor-pointer hover:border-primary transition-colors"\n                        onClick={() => {\n                          setSelectedBook(book);\n                          setBooks([]);\n                          setBookSearch(\'\');\n                        }}\n                      >\n                        <CardContent className="p-4">\n                          <div className="font-medium">{book.title}</div>\n                          <div className="text-sm text-muted-foreground">{book.author}</div>\n                          <div className="text-sm text-muted-foreground">\n                            Available: {book.availableQuantity}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : null}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Issue Button */}\n          {selectedStudent && selectedBook && (\n            <Card>\n              <CardContent className="p-6">\n                <div className="flex items-center justify-between">\n                  <div>\n                    <h3 className="font-semibold mb-1">Ready to Issue</h3>\n                    <p className="text-sm text-muted-foreground">\n                      Issue "{selectedBook.title}" to {selectedStudent.firstName} {selectedStudent.lastName}\n                    </p>\n                  </div>\n                  <Button size="lg" onClick={() => setIsIssueDialogOpen(true)}>\n                    <BookOpen className="h-4 w-4 mr-2" />\n                    Issue Book\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Return Book Tab */}\n        <TabsContent value="return">\n          <Card>\n            <CardHeader>\n              <CardTitle>Currently Issued Books</CardTitle>\n              <CardDescription>{issuedBooks.length} books to return</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {issuedBooks.length === 0 ? (\n                <div className="text-center py-12 text-muted-foreground">\n                  <CheckCircle className="h-16 w-16 mx-auto mb-4 opacity-50" />\n                  <p>No books currently issued</p>\n                </div>\n              ) : (\n                <div className="overflow-x-auto">\n                  <table className="w-full text-sm">\n                    <thead>\n                      <tr className="border-b">\n                        <th className="text-left p-2">Book</th>\n                        <th className="text-left p-2">Student</th>\n                        <th className="text-left p-2">Issue Date</th>\n                        <th className="text-left p-2">Due Date</th>\n                        <th className="text-center p-2">Status</th>\n                        <th className="text-center p-2">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {issuedBooks.map((issue) => {\n                        const isOverdue = new Date(issue.issue.dueDate) < new Date();\n                        return (\n                          <tr key={issue.issue.id} className="border-b hover:bg-muted/50">\n                            <td className="p-2">\n                              <div className="font-medium">{issue.book.title}</div>\n                              <div className="text-xs text-muted-foreground">{issue.book.author}</div>\n                            </td>\n                            <td className="p-2">\n                              <div>{issue.student.firstName} {issue.student.lastName}</div>\n                              <div className="text-xs text-muted-foreground">{issue.student.studentId}</div>\n                            </td>\n                            <td className="p-2">{format(new Date(issue.issue.issueDate), \'MMM dd, yyyy\')}</td>\n                            <td className="p-2">{format(new Date(issue.issue.dueDate), \'MMM dd, yyyy\')}</td>\n                            <td className="text-center p-2">\n                              <Badge variant={isOverdue ? \'destructive\' : \'default\'}>\n                                {isOverdue ? \'Overdue\' : \'On Time\'}\n                              </Badge>\n                            </td>\n                            <td className="text-center p-2">\n                              <Button\n                                variant="outline"\n                                size="sm"\n                                onClick={() => openReturnDialog(issue)}\n                              >\n                                <RotateCcw className="h-4 w-4 mr-2" />\n                                Return\n                              </Button>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Issue Book Dialog */}\n      <Dialog open={isIssueDialogOpen} onOpenChange={setIsIssueDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Issue Book</DialogTitle>\n            <DialogDescription>\n              Issue "{selectedBook?.title}" to {selectedStudent?.firstName} {selectedStudent?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className="space-y-4">\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-2">\n                <Label htmlFor="issueDate">Issue Date *</Label>\n                <Input\n                  id="issueDate"\n                  type="date"\n                  value={issueForm.issueDate}\n                  onChange={(e) => setIssueForm({ ...issueForm, issueDate: e.target.value })}\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="dueDate">Due Date *</Label>\n                <Input\n                  id="dueDate"\n                  type="date"\n                  value={issueForm.dueDate}\n                  onChange={(e) => setIssueForm({ ...issueForm, dueDate: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div className="space-y-2">\n              <Label htmlFor="issueRemarks">Remarks</Label>\n              <Input\n                id="issueRemarks"\n                placeholder="Additional notes..."\n                value={issueForm.remarks}\n                onChange={(e) => setIssueForm({ ...issueForm, remarks: e.target.value })}\n              />\n            </div>\n\n            <div className="flex gap-2 pt-4">\n              <Button onClick={handleIssueBook} disabled={isSubmitting} className="flex-1">\n                {isSubmitting ? \'Issuing...\' : \'Issue Book\'}\n              </Button>\n              <Button\n                variant="outline"\n                onClick={() => {\n                  setIsIssueDialogOpen(false);\n                  resetIssueForm();\n                }}\n                disabled={isSubmitting}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Return Book Dialog */}\n      <Dialog open={isReturnDialogOpen} onOpenChange={setIsReturnDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Return Book</DialogTitle>\n            <DialogDescription>\n              Return "{selectedIssue?.book.title}" from {selectedIssue?.student.firstName}{\' \'}\n              {selectedIssue?.student.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className="space-y-4">\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-2">\n                <Label htmlFor="returnDate">Return Date *</Label>\n                <Input\n                  id="returnDate"\n                  type="date"\n                  value={returnForm.returnDate}\n                  onChange={(e) => setReturnForm({ ...returnForm, returnDate: e.target.value })}\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label htmlFor="fineAmount">Fine Amount</Label>\n                <Input\n                  id="fineAmount"\n                  type="number"\n                  value={returnForm.fineAmount}\n                  onChange={(e) => setReturnForm({ ...returnForm, fineAmount: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div className="space-y-2">\n              <Label htmlFor="returnRemarks">Remarks</Label>\n              <Input\n                id="returnRemarks"\n                placeholder="Additional notes..."\n                value={returnForm.remarks}\n                onChange={(e) => setReturnForm({ ...returnForm, remarks: e.target.value })}\n              />\n            </div>\n\n            <div className="flex gap-2 pt-4">\n              <Button onClick={handleReturnBook} disabled={isSubmitting} className="flex-1">\n                {isSubmitting ? \'Processing...\' : \'Return Book\'}\n              </Button>\n              <Button\n                variant="outline"\n                onClick={() => {\n                  setIsReturnDialogOpen(false);\n                  resetReturnForm();\n                }}\n                disabled={isSubmitting}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}