{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/routes/students.routes.ts">\nimport { Router } from \'express\';\nimport { StudentsController } from \'../controllers/students.controller\';\nimport { validateBody } from \'../middleware/validation\';\nimport { authenticate, authorize } from \'../middleware/auth\';\nimport { z } from \'zod\';\n\nconst router = Router();\nconst studentsController = new StudentsController();\n\n// Validation schemas\nconst createStudentSchema = z.object({\n  // User information\n  email: z.string().email(\'Invalid email address\'),\n  password: z.string().min(8, \'Password must be at least 8 characters\'),\n  firstName: z.string().min(1, \'First name is required\'),\n  lastName: z.string().min(1, \'Last name is required\'),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  dateOfBirth: z.string().optional(),\n  gender: z.enum([\'male\', \'female\', \'other\']).optional(),\n  bloodGroup: z.string().optional(),\n  \n  // Student specific information\n  admissionNumber: z.string().optional(),\n  admissionDate: z.string().optional(),\n  rollNumber: z.string().optional(),\n  guardianName: z.string().min(1, \'Guardian name is required\'),\n  guardianPhone: z.string().min(1, \'Guardian phone is required\'),\n  guardianEmail: z.string().email().optional(),\n  guardianRelation: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  previousSchool: z.string().optional(),\n  medicalInfo: z.string().optional(),\n  \n  // Enrollment information\n  classId: z.string().min(1, \'Class is required\'),\n  sectionId: z.string().min(1, \'Section is required\'),\n  academicSessionId: z.string().optional(),\n});\n\nconst updateStudentSchema = z.object({\n  firstName: z.string().min(1).optional(),\n  lastName: z.string().min(1).optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  dateOfBirth: z.string().optional(),\n  gender: z.enum([\'male\', \'female\', \'other\']).optional(),\n  bloodGroup: z.string().optional(),\n  rollNumber: z.string().optional(),\n  guardianName: z.string().optional(),\n  guardianPhone: z.string().optional(),\n  guardianEmail: z.string().email().optional(),\n  guardianRelation: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  medicalInfo: z.string().optional(),\n});\n\nconst toggleStatusSchema = z.object({\n  status: z.enum([\'active\', \'inactive\', \'graduated\', \'transferred\']),\n});\n\n// All routes require authentication\nrouter.use(authenticate);\n\n// Routes accessible by superadmin, admin, and teacher (read-only for teacher)\nrouter.get(\n  \'/\',\n  authorize(\'superadmin\', \'admin\', \'teacher\'),\n  studentsController.getAllStudents.bind(studentsController)\n);\n\nrouter.get(\n  \'/stats\',\n  authorize(\'superadmin\', \'admin\'),\n  studentsController.getStudentStats.bind(studentsController)\n);\n\nrouter.get(\n  \'/:id\',\n  authorize(\'superadmin\', \'admin\', \'teacher\'),\n  studentsController.getStudentById.bind(studentsController)\n);\n\n// Routes accessible only by superadmin and admin\nrouter.post(\n  \'/\',\n  authorize(\'superadmin\', \'admin\'),\n  validateBody(createStudentSchema),\n  studentsController.createStudent.bind(studentsController)\n);\n\nrouter.put(\n  \'/:id\',\n  authorize(\'superadmin\', \'admin\'),\n  validateBody(updateStudentSchema),\n  studentsController.updateStudent.bind(studentsController)\n);\n\nrouter.patch(\n  \'/:id/status\',\n  authorize(\'superadmin\', \'admin\'),\n  validateBody(toggleStatusSchema),\n  studentsController.toggleStudentStatus.bind(studentsController)\n);\n\nexport default router;\n</create-file>\n</function_calls>'}