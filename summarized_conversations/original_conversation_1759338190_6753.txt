{'role': 'assistant', 'content': '## Step 4: Create Multi-Step Student Admission Form\n\n<function_calls>\n<create-file file_path="client/src/pages/StudentAdmission.tsx">\nimport { useState } from \'react\';\nimport { useForm } from \'react-hook-form\';\nimport { zodResolver } from \'@hookform/resolvers/zod\';\nimport { z } from \'zod\';\nimport { useMutation, useQuery, useQueryClient } from \'@tanstack/react-query\';\nimport { apiClient } from \'@/lib/api\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\nimport { useToast } from \'@/hooks/use-toast\';\nimport { useLocation } from \'wouter\';\nimport { ArrowLeft, ArrowRight, Check, UserPlus } from \'lucide-react\';\nimport { cn } from \'@/lib/utils\';\n\nconst studentAdmissionSchema = z.object({\n  // Personal Information\n  firstName: z.string().min(1, \'First name is required\'),\n  lastName: z.string().min(1, \'Last name is required\'),\n  email: z.string().email(\'Invalid email address\'),\n  password: z.string().min(8, \'Password must be at least 8 characters\'),\n  dateOfBirth: z.string().min(1, \'Date of birth is required\'),\n  gender: z.enum([\'male\', \'female\', \'other\']),\n  bloodGroup: z.string().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  \n  // Guardian Information\n  guardianName: z.string().min(1, \'Guardian name is required\'),\n  guardianPhone: z.string().min(1, \'Guardian phone is required\'),\n  guardianEmail: z.string().email().optional().or(z.literal(\'\')),\n  guardianRelation: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  \n  // Academic Information\n  classId: z.string().min(1, \'Class is required\'),\n  sectionId: z.string().min(1, \'Section is required\'),\n  admissionNumber: z.string().optional(),\n  admissionDate: z.string().optional(),\n  rollNumber: z.string().optional(),\n  previousSchool: z.string().optional(),\n  \n  // Medical Information\n  medicalInfo: z.string().optional(),\n});\n\ntype StudentAdmissionFormData = z.infer<typeof studentAdmissionSchema>;\n\nconst steps = [\n  { id: 1, name: \'Personal Information\', description: \'Basic student details\' },\n  { id: 2, name: \'Guardian Information\', description: \'Parent/Guardian details\' },\n  { id: 3, name: \'Academic Information\', description: \'Class and enrollment details\' },\n  { id: 4, name: \'Additional Information\', description: \'Medical and other details\' },\n];\n\nexport default function StudentAdmission() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    setValue,\n    trigger,\n  } = useForm<StudentAdmissionFormData>({\n    resolver: zodResolver(studentAdmissionSchema),\n    defaultValues: {\n      admissionDate: new Date().toISOString().split(\'T\')[0],\n    },\n  });\n\n  const selectedGender = watch(\'gender\');\n  const selectedClassId = watch(\'classId\');\n  const selectedSectionId = watch(\'sectionId\');\n\n  // Fetch classes\n  const { data: classesData } = useQuery({\n    queryKey: [\'classes\'],\n    queryFn: async () => {\n      const response = await apiClient.get(\'/academic/classes\');\n      return response.data;\n    },\n  });\n\n  // Fetch sections based on selected class\n  const { data: sectionsData } = useQuery({\n    queryKey: [\'sections\', selectedClassId],\n    queryFn: async () => {\n      if (!selectedClassId) return [];\n      const response = await apiClient.get(`/academic/classes/${selectedClassId}/sections`);\n      return response.data;\n    },\n    enabled: !!selectedClassId,\n  });\n\n  // Create student mutation\n  const createStudentMutation = useMutation({\n    mutationFn: async (data: StudentAdmissionFormData) => {\n      return await apiClient.post(\'/students\', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\'students\'] });\n      toast({\n        title: \'Success\',\n        description: \'Student admitted successfully\',\n      });\n      setLocation(\'/students\');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \'Error\',\n        description: error.response?.data?.error || \'Failed to admit student\',\n        variant: \'destructive\',\n      });\n    },\n  });\n\n  const onSubmit = (data: StudentAdmissionFormData) => {\n    createStudentMutation.mutate(data);\n  };\n\n  const nextStep = async () => {\n    let fieldsToValidate: any[] = [];\n    \n    if (currentStep === 1) {\n      fieldsToValidate = [\'firstName\', \'lastName\', \'email\', \'password\', \'dateOfBirth\', \'gender\'];\n    } else if (currentStep === 2) {\n      fieldsToValidate = [\'guardianName\', \'guardianPhone\'];\n    } else if (currentStep === 3) {\n      fieldsToValidate = [\'classId\', \'sectionId\'];\n    }\n\n    const isValid = await trigger(fieldsToValidate as any);\n    \n    if (isValid && currentStep < steps.length) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const classes = classesData || [];\n  const sections = sectionsData || [];\n\n  return (\n    <div className="max-w-4xl mx-auto space-y-6">\n      {/* Header */}\n      <div>\n        <h1 className="text-3xl font-bold">Student Admission</h1>\n        <p className="text-muted-foreground mt-2">\n          Enroll a new student into the institution\n        </p>\n      </div>\n\n      {/* Progress Steps */}\n      <Card>\n        <CardContent className="pt-6">\n          <nav aria-label="Progress">\n            <ol className="flex items-center justify-between">\n              {steps.map((step, stepIdx) => (\n                <li key={step.id} className={cn(\n                  \'relative\',\n                  stepIdx !== steps.length - 1 ? \'pr-8 sm:pr-20 flex-1\' : \'\'\n                )}>\n                  {currentStep > step.id ? (\n                    <>\n                      <div className="absolute inset-0 flex items-center" aria-hidden="true">\n                        <div className="h-0.5 w-full bg-primary" />\n                      </div>\n                      <div className="relative flex h-8 w-8 items-center justify-center rounded-full bg-primary">\n                        <Check className="h-5 w-5 text-primary-foreground" />\n                      </div>\n                    </>\n                  ) : currentStep === step.id ? (\n                    <>\n                      {stepIdx !== 0 && (\n                        <div className="absolute inset-0 flex items-center" aria-hidden="true">\n                          <div className="h-0.5 w-full bg-muted" />\n                        </div>\n                      )}\n                      <div className="relative flex h-8 w-8 items-center justify-center rounded-full border-2 border-primary bg-background">\n                        <span className="text-primary font-semibold">{step.id}</span>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      {stepIdx !== 0 && (\n                        <div className="absolute inset-0 flex items-center" aria-hidden="true">\n                          <div className="h-0.5 w-full bg-muted" />\n                        </div>\n                      )}\n                      <div className="relative flex h-8 w-8 items-center justify-center rounded-full border-2 border-muted bg-background">\n                        <span className="text-muted-foreground">{step.id}</span>\n                      </div>\n                    </>\n                  )}\n                  <div className="mt-2 hidden sm:block">\n                    <p className="text-sm font-medium">{step.name}</p>\n                    <p className="text-xs text-muted-foreground">{step.description}</p>\n                  </div>\n                </li>\n              ))}\n            </ol>\n          </nav>\n        </CardContent>\n      </Card>\n\n      {/* Form */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card>\n          <CardHeader>\n            <CardTitle>{steps[currentStep - 1].name}</CardTitle>\n            <CardDescription>{steps[currentStep - 1].description}</CardDescription>\n          </CardHeader>\n          <CardContent className="space-y-6">\n            {/* Step 1: Personal Information */}\n            {currentStep === 1 && (\n              <div className="space-y-4">\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="firstName">First Name *</Label>\n                    <Input id="firstName" {...register(\'firstName\')} placeholder="John" />\n                    {errors.firstName && (\n                      <p className="text-xs text-red-600">{errors.firstName.message}</p>\n                    )}\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="lastName">Last Name *</Label>\n                    <Input id="lastName" {...register(\'lastName\')} placeholder="Doe" />\n                    {errors.lastName && (\n                      <p className="text-xs text-red-600">{errors.lastName.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className="space-y-2">\n                  <Label htmlFor="email">Email *</Label>\n                  <Input id="email" type="email" {...register(\'email\')} placeholder="john.doe@example.com" />\n                  {errors.email && (\n                    <p className="text-xs text-red-600">{errors.email.message}</p>\n                  )}\n                </div>\n\n                <div className="space-y-2">\n                  <Label htmlFor="password">Password *</Label>\n                  <Input id="password" type="password" {...register(\'password\')} placeholder="••••••••" />\n                  {errors.password && (\n                    <p className="text-xs text-red-600">{errors.password.message}</p>\n                  )}\n                  <p className="text-xs text-muted-foreground">\n                    This will be the student\'s login password\n                  </p>\n                </div>\n\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="dateOfBirth">Date of Birth *</Label>\n                    <Input id="dateOfBirth" type="date" {...register(\'dateOfBirth\')} />\n                    {errors.dateOfBirth && (\n                      <p className="text-xs text-red-600">{errors.dateOfBirth.message}</p>\n                    )}\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="gender">Gender *</Label>\n                    <Select value={selectedGender} onValueChange={(value) => setValue(\'gender\', value as any)}>\n                      <SelectTrigger>\n                        <SelectValue placeholder="Select gender" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value="male">Male</SelectItem>\n                        <SelectItem value="female">Female</SelectItem>\n                        <SelectItem value="other">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {errors.gender && (\n                      <p className="text-xs text-red-600">{errors.gender.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="bloodGroup">Blood Group</Label>\n                    <Input id="bloodGroup" {...register(\'bloodGroup\')} placeholder="A+" />\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="phone">Phone</Label>\n                    <Input id="phone" {...register(\'phone\')} placeholder="+1234567890" />\n                  </div>\n                </div>\n\n                <div className="space-y-2">\n                  <Label htmlFor="address">Address</Label>\n                  <Input id="address" {...register(\'address\')} placeholder="123 Main St, City, Country" />\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Guardian Information */}\n            {currentStep === 2 && (\n              <div className="space-y-4">\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="guardianName">Guardian Name *</Label>\n                    <Input id="guardianName" {...register(\'guardianName\')} placeholder="Robert Smith" />\n                    {errors.guardianName && (\n                      <p className="text-xs text-red-600">{errors.guardianName.message}</p>\n                    )}\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="guardianRelation">Relation</Label>\n                    <Input id="guardianRelation" {...register(\'guardianRelation\')} placeholder="Father" />\n                  </div>\n                </div>\n\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="guardianPhone">Guardian Phone *</Label>\n                    <Input id="guardianPhone" {...register(\'guardianPhone\')} placeholder="+1234567890" />\n                    {errors.guardianPhone && (\n                      <p className="text-xs text-red-600">{errors.guardianPhone.message}</p>\n                    )}\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="guardianEmail">Guardian Email</Label>\n                    <Input id="guardianEmail" type="email" {...register(\'guardianEmail\')} placeholder="guardian@example.com" />\n                    {errors.guardianEmail && (\n                      <p className="text-xs text-red-600">{errors.guardianEmail.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className="space-y-2">\n                  <Label htmlFor="emergencyContact">Emergency Contact</Label>\n                  <Input id="emergencyContact" {...register(\'emergencyContact\')} placeholder="+1234567890" />\n                  <p className="text-xs text-muted-foreground">\n                    Alternative contact number in case of emergency\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Academic Information */}\n            {currentStep === 3 && (\n              <div className="space-y-4">\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="classId">Class *</Label>\n                    <Select value={selectedClassId} onValueChange={(value) => {\n                      setValue(\'classId\', value);\n                      setValue(\'sectionId\', \'\'); // Reset section when class changes\n                    }}>\n                      <SelectTrigger>\n                        <SelectValue placeholder="Select class" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {classes.map((cls: any) => (\n                          <SelectItem key={cls.id} value={cls.id}>\n                            {cls.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {errors.classId && (\n                      <p className="text-xs text-red-600">{errors.classId.message}</p>\n                    )}\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="sectionId">Section *</Label>\n                    <Select \n                      value={selectedSectionId} \n                      onValueChange={(value) => setValue(\'sectionId\', value)}\n                      disabled={!selectedClassId}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder="Select section" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {sections.map((section: any) => (\n                          <SelectItem key={section.id} value={section.id}>\n                            Section {section.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {errors.sectionId && (\n                      <p className="text-xs text-red-600">{errors.sectionId.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="admissionNumber">Admission Number</Label>\n                    <Input id="admissionNumber" {...register(\'admissionNumber\')} placeholder="ADM2024001" />\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="admissionDate">Admission Date</Label>\n                    <Input id="admissionDate" type="date" {...register(\'admissionDate\')} />\n                  </div>\n                </div>\n\n                <div className="grid grid-cols-2 gap-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="rollNumber">Roll Number</Label>\n                    <Input id="rollNumber" {...register(\'rollNumber\')} placeholder="001" />\n                  </div>\n                  <div className="space-y-2">\n                    <Label htmlFor="previousSchool">Previous School</Label>\n                    <Input id="previousSchool" {...register(\'previousSchool\')} placeholder="ABC School" />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 4: Additional Information */}\n            {currentStep === 4 && (\n              <div className="space-y-4">\n                <div className="space-y-2">\n                  <Label htmlFor="medicalInfo">Medical Information</Label>\n                  <textarea\n                    id="medicalInfo"\n                    {...register(\'medicalInfo\')}\n                    className="flex min-h-[120px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"\n                    placeholder="Any allergies, medical conditions, or special requirements..."\n                  />\n                  <p className="text-xs text-muted-foreground">\n                    Include any important medical information, allergies, or special needs\n                  </p>\n                </div>\n\n                <div className="bg-muted p-4 rounded-lg">\n                  <h4 className="font-medium mb-2">Review Information</h4>\n                  <p className="text-sm text-muted-foreground">\n                    Please review all the information before submitting. You can go back to previous steps to make changes.\n                  </p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Navigation Buttons */}\n        <div className="flex items-center justify-between mt-6">\n          <Button\n            type="button"\n            variant="outline"\n            onClick={prevStep}\n            disabled={currentStep === 1}\n          >\n            <ArrowLeft className="h-4 w-4 mr-2" />\n            Previous\n          </Button>\n\n          {currentStep < steps.length ? (\n            <Button type="button" onClick={nextStep}>\n              Next\n              <ArrowRight className="h-4 w-4 ml-2" />\n            </Button>\n          ) : (\n            <Button type="submit" disabled={createStudentMutation.isPending}>\n              {createStudentMutation.isPending ? (\n                \'Admitting...\'\n              ) : (\n                <>\n                  <UserPlus className="h-4 w-4 mr-2" />\n                  Admit Student\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </form>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}