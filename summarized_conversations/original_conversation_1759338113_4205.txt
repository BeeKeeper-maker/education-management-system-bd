{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="server/src/routes/auth.routes.ts">\nimport { Router } from \'express\';\nimport { AuthController } from \'../controllers/auth.controller\';\nimport { validateBody } from \'../middleware/validation\';\nimport { authenticate } from \'../middleware/auth\';\nimport { z } from \'zod\';\n\nconst router = Router();\nconst authController = new AuthController();\n\n// Validation schemas\nconst registerSchema = z.object({\n  email: z.string().email(\'Invalid email address\'),\n  password: z.string().min(8, \'Password must be at least 8 characters\'),\n  firstName: z.string().min(1, \'First name is required\'),\n  lastName: z.string().min(1, \'Last name is required\'),\n  role: z.enum([\'student\', \'teacher\', \'guardian\', \'admin\', \'superadmin\', \'accountant\', \'hostel_manager\']).optional(),\n  phone: z.string().optional(),\n});\n\nconst loginSchema = z.object({\n  email: z.string().email(\'Invalid email address\'),\n  password: z.string().min(1, \'Password is required\'),\n});\n\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \'Current password is required\'),\n  newPassword: z.string().min(8, \'New password must be at least 8 characters\'),\n});\n\n// Routes\nrouter.post(\'/register\', validateBody(registerSchema), authController.register.bind(authController));\nrouter.post(\'/login\', validateBody(loginSchema), authController.login.bind(authController));\nrouter.post(\'/logout\', authenticate, authController.logout.bind(authController));\nrouter.get(\'/me\', authenticate, authController.getCurrentUser.bind(authController));\nrouter.post(\'/change-password\', authenticate, validateBody(changePasswordSchema), authController.changePassword.bind(authController));\n\nexport default router;\n</create-file>\n</function_calls>'}