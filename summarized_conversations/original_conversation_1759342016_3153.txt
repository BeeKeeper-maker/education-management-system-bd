{'role': 'assistant', 'content': 'Good! I can see the basic schemas are already in place. Now let me create a comprehensive examination schema file:\n\n<function_calls>\n<create-file file_path="server/src/db/schema/examinations.ts">\nimport { pgTable, text, timestamp, uuid, varchar, integer, decimal, boolean, date } from \'drizzle-orm/pg-core\';\nimport { relations } from \'drizzle-orm\';\nimport { classes, sections, subjects, academicSessions } from \'./academic\';\nimport { students } from \'./students\';\nimport { users } from \'./users\';\n\n// Exam types (Midterm, Final, Quiz, etc.)\nexport const examTypes = pgTable(\'exam_types\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  name: varchar(\'name\', { length: 100 }).notNull(),\n  description: text(\'description\'),\n  weightage: integer(\'weightage\').notNull().default(100), // Percentage weightage in final grade\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Exams (instances of exam types)\nexport const exams = pgTable(\'exams\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  name: varchar(\'name\', { length: 255 }).notNull(),\n  examTypeId: uuid(\'exam_type_id\').references(() => examTypes.id).notNull(),\n  academicSessionId: uuid(\'academic_session_id\').references(() => academicSessions.id).notNull(),\n  startDate: date(\'start_date\').notNull(),\n  endDate: date(\'end_date\').notNull(),\n  description: text(\'description\'),\n  instructions: text(\'instructions\'),\n  isPublished: boolean(\'is_published\').default(false).notNull(),\n  resultsPublished: boolean(\'results_published\').default(false).notNull(),\n  createdBy: uuid(\'created_by\').references(() => users.id).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Exam schedules (subject-wise exam details)\nexport const examSubjects = pgTable(\'exam_subjects\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  examId: uuid(\'exam_id\').references(() => exams.id).notNull(),\n  classId: uuid(\'class_id\').references(() => classes.id).notNull(),\n  sectionId: uuid(\'section_id\').references(() => sections.id),\n  subjectId: uuid(\'subject_id\').references(() => subjects.id).notNull(),\n  examDate: date(\'exam_date\').notNull(),\n  startTime: varchar(\'start_time\', { length: 10 }).notNull(), // HH:MM format\n  endTime: varchar(\'end_time\', { length: 10 }).notNull(),\n  duration: integer(\'duration\').notNull(), // in minutes\n  totalMarks: integer(\'total_marks\').notNull(),\n  passingMarks: integer(\'passing_marks\').notNull(),\n  roomNumber: varchar(\'room_number\', { length: 50 }),\n  instructions: text(\'instructions\'),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Student marks\nexport const marks = pgTable(\'marks\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  examSubjectId: uuid(\'exam_subject_id\').references(() => examSubjects.id).notNull(),\n  studentId: uuid(\'student_id\').references(() => students.id).notNull(),\n  marksObtained: decimal(\'marks_obtained\', { precision: 5, scale: 2 }),\n  isAbsent: boolean(\'is_absent\').default(false).notNull(),\n  remarks: text(\'remarks\'),\n  enteredBy: uuid(\'entered_by\').references(() => users.id).notNull(),\n  enteredAt: timestamp(\'entered_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Grading system configuration\nexport const gradingSystem = pgTable(\'grading_system\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  name: varchar(\'name\', { length: 100 }).notNull(),\n  minPercentage: decimal(\'min_percentage\', { precision: 5, scale: 2 }).notNull(),\n  maxPercentage: decimal(\'max_percentage\', { precision: 5, scale: 2 }).notNull(),\n  grade: varchar(\'grade\', { length: 10 }).notNull(), // A+, A, B+, etc.\n  gradePoint: decimal(\'grade_point\', { precision: 3, scale: 2 }).notNull(),\n  description: text(\'description\'),\n  isActive: boolean(\'is_active\').default(true).notNull(),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Processed results (cached for performance)\nexport const results = pgTable(\'results\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  examId: uuid(\'exam_id\').references(() => exams.id).notNull(),\n  studentId: uuid(\'student_id\').references(() => students.id).notNull(),\n  classId: uuid(\'class_id\').references(() => classes.id).notNull(),\n  sectionId: uuid(\'section_id\').references(() => sections.id).notNull(),\n  totalMarks: integer(\'total_marks\').notNull(),\n  marksObtained: decimal(\'marks_obtained\', { precision: 6, scale: 2 }).notNull(),\n  percentage: decimal(\'percentage\', { precision: 5, scale: 2 }).notNull(),\n  grade: varchar(\'grade\', { length: 10 }).notNull(),\n  gradePoint: decimal(\'grade_point\', { precision: 3, scale: 2 }).notNull(),\n  meritPosition: integer(\'merit_position\'),\n  remarks: text(\'remarks\'),\n  isPublished: boolean(\'is_published\').default(false).notNull(),\n  publishedAt: timestamp(\'published_at\'),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n  updatedAt: timestamp(\'updated_at\').defaultNow().notNull(),\n});\n\n// Subject-wise results (detailed breakdown)\nexport const subjectResults = pgTable(\'subject_results\', {\n  id: uuid(\'id\').defaultRandom().primaryKey(),\n  resultId: uuid(\'result_id\').references(() => results.id).notNull(),\n  subjectId: uuid(\'subject_id\').references(() => subjects.id).notNull(),\n  totalMarks: integer(\'total_marks\').notNull(),\n  marksObtained: decimal(\'marks_obtained\', { precision: 5, scale: 2 }).notNull(),\n  grade: varchar(\'grade\', { length: 10 }).notNull(),\n  gradePoint: decimal(\'grade_point\', { precision: 3, scale: 2 }).notNull(),\n  isPassed: boolean(\'is_passed\').notNull(),\n  remarks: text(\'remarks\'),\n  createdAt: timestamp(\'created_at\').defaultNow().notNull(),\n});\n\n// Relations\nexport const examTypesRelations = relations(examTypes, ({ many }) => ({\n  exams: many(exams),\n}));\n\nexport const examsRelations = relations(exams, ({ one, many }) => ({\n  examType: one(examTypes, {\n    fields: [exams.examTypeId],\n    references: [examTypes.id],\n  }),\n  academicSession: one(academicSessions, {\n    fields: [exams.academicSessionId],\n    references: [academicSessions.id],\n  }),\n  examSubjects: many(examSubjects),\n  results: many(results),\n}));\n\nexport const examSubjectsRelations = relations(examSubjects, ({ one, many }) => ({\n  exam: one(exams, {\n    fields: [examSubjects.examId],\n    references: [exams.id],\n  }),\n  class: one(classes, {\n    fields: [examSubjects.classId],\n    references: [classes.id],\n  }),\n  section: one(sections, {\n    fields: [examSubjects.sectionId],\n    references: [sections.id],\n  }),\n  subject: one(subjects, {\n    fields: [examSubjects.subjectId],\n    references: [subjects.id],\n  }),\n  marks: many(marks),\n}));\n\nexport const marksRelations = relations(marks, ({ one }) => ({\n  examSubject: one(examSubjects, {\n    fields: [marks.examSubjectId],\n    references: [examSubjects.id],\n  }),\n  student: one(students, {\n    fields: [marks.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const resultsRelations = relations(results, ({ one, many }) => ({\n  exam: one(exams, {\n    fields: [results.examId],\n    references: [exams.id],\n  }),\n  student: one(students, {\n    fields: [results.studentId],\n    references: [students.id],\n  }),\n  class: one(classes, {\n    fields: [results.classId],\n    references: [classes.id],\n  }),\n  section: one(sections, {\n    fields: [results.sectionId],\n    references: [sections.id],\n  }),\n  subjectResults: many(subjectResults),\n}));\n\nexport const subjectResultsRelations = relations(subjectResults, ({ one }) => ({\n  result: one(results, {\n    fields: [subjectResults.resultId],\n    references: [results.id],\n  }),\n  subject: one(subjects, {\n    fields: [subjectResults.subjectId],\n    references: [subjects.id],\n  }),\n}));\n\n// Type exports\nexport type ExamType = typeof examTypes.$inferSelect;\nexport type Exam = typeof exams.$inferSelect;\nexport type ExamSubject = typeof examSubjects.$inferSelect;\nexport type Mark = typeof marks.$inferSelect;\nexport type GradingSystem = typeof gradingSystem.$inferSelect;\nexport type Result = typeof results.$inferSelect;\nexport type SubjectResult = typeof subjectResults.$inferSelect;\n</create-file>\n</function_calls>'}