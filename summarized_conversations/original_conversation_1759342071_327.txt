{'role': 'assistant', 'content': '<function_calls>\n<full-file-rewrite file_path="client/src/App.tsx">\nimport { Route, Switch, Redirect } from \'wouter\';\nimport { QueryClient, QueryClientProvider } from \'@tanstack/react-query\';\nimport { AuthProvider, useAuth } from \'./contexts/AuthContext\';\nimport { Toaster } from \'./components/ui/toaster\';\nimport MainLayout from \'./components/layout/MainLayout\';\nimport Login from \'./pages/Login\';\nimport Dashboard from \'./pages/Dashboard\';\nimport Users from \'./pages/Users\';\nimport StudentAdmission from \'./pages/StudentAdmission\';\nimport StudentsList from \'./pages/StudentsList\';\nimport StudentProfile from \'./pages/StudentProfile\';\nimport TakeAttendance from \'./pages/TakeAttendance\';\nimport AttendanceReports from \'./pages/AttendanceReports\';\nimport TimetableBuilder from \'./pages/TimetableBuilder\';\nimport MyTimetable from \'./pages/MyTimetable\';\nimport ExamManagement from \'./pages/ExamManagement\';\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: 1,\n    },\n  },\n});\n\n// Protected Route Component\nfunction ProtectedRoute({ \n  component: Component,\n  allowedRoles,\n}: { \n  component: React.ComponentType;\n  allowedRoles?: string[];\n}) {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className="flex items-center justify-center min-h-screen">\n        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Redirect to="/login" />;\n  }\n\n  // Check role-based access\n  if (allowedRoles && user && !allowedRoles.includes(user.role)) {\n    return (\n      <MainLayout>\n        <div className="flex items-center justify-center min-h-[60vh]">\n          <div className="text-center">\n            <h1 className="text-4xl font-bold mb-4">403</h1>\n            <p className="text-muted-foreground">You don\'t have permission to access this page</p>\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout>\n      <Component />\n    </MainLayout>\n  );\n}\n\n// Public Route Component\nfunction PublicRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className="flex items-center justify-center min-h-screen">\n        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated) {\n    return <Redirect to="/dashboard" />;\n  }\n\n  return <Component />;\n}\n\nfunction AppRoutes() {\n  return (\n    <Switch>\n      <Route path="/login">\n        <PublicRoute component={Login} />\n      </Route>\n      \n      <Route path="/dashboard">\n        <ProtectedRoute component={Dashboard} />\n      </Route>\n\n      <Route path="/users">\n        <ProtectedRoute \n          component={Users} \n          allowedRoles={[\'superadmin\', \'admin\']}\n        />\n      </Route>\n\n      <Route path="/students">\n        <ProtectedRoute \n          component={StudentsList}\n          allowedRoles={[\'superadmin\', \'admin\', \'teacher\']}\n        />\n      </Route>\n\n      <Route path="/students/admission">\n        <ProtectedRoute \n          component={StudentAdmission}\n          allowedRoles={[\'superadmin\', \'admin\']}\n        />\n      </Route>\n\n      <Route path="/students/:id">\n        <ProtectedRoute \n          component={StudentProfile}\n          allowedRoles={[\'superadmin\', \'admin\', \'teacher\']}\n        />\n      </Route>\n\n      <Route path="/attendance/take">\n        <ProtectedRoute \n          component={TakeAttendance}\n          allowedRoles={[\'superadmin\', \'admin\', \'teacher\']}\n        />\n      </Route>\n\n      <Route path="/attendance/reports">\n        <ProtectedRoute \n          component={AttendanceReports}\n          allowedRoles={[\'superadmin\', \'admin\']}\n        />\n      </Route>\n\n      <Route path="/timetable/builder">\n        <ProtectedRoute \n          component={TimetableBuilder}\n          allowedRoles={[\'superadmin\', \'admin\']}\n        />\n      </Route>\n\n      <Route path="/timetable/my">\n        <ProtectedRoute \n          component={MyTimetable}\n          allowedRoles={[\'teacher\', \'student\']}\n        />\n      </Route>\n\n      <Route path="/exams">\n        <ProtectedRoute \n          component={ExamManagement}\n          allowedRoles={[\'superadmin\', \'admin\']}\n        />\n      </Route>\n\n      <Route path="/teachers">\n        <ProtectedRoute component={() => <div>Teachers Page (Coming Soon)</div>} />\n      </Route>\n\n      <Route path="/classes">\n        <ProtectedRoute component={() => <div>Classes Page (Coming Soon)</div>} />\n      </Route>\n\n      <Route path="/notifications">\n        <ProtectedRoute component={() => <div>Notifications Page (Coming Soon)</div>} />\n      </Route>\n\n      <Route path="/settings">\n        <ProtectedRoute component={() => <div>Settings Page (Coming Soon)</div>} />\n      </Route>\n\n      <Route path="/">\n        <Redirect to="/dashboard" />\n      </Route>\n\n      <Route>\n        <div className="flex items-center justify-center min-h-screen">\n          <div className="text-center">\n            <h1 className="text-4xl font-bold mb-4">404</h1>\n            <p className="text-muted-foreground">Page not found</p>\n          </div>\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <AppRoutes />\n        <Toaster />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n</full-file-rewrite>\n</function_calls>'}