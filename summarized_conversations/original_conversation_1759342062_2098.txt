{'role': 'assistant', 'content': 'Now let me create the Examinations management page for admins. This will be a comprehensive page for creating and managing exams:\n\n<function_calls>\n<create-file file_path="client/src/pages/ExamManagement.tsx">\nimport { useState, useEffect } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'../components/ui/card\';\nimport { Button } from \'../components/ui/button\';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \'../components/ui/dialog\';\nimport { Input } from \'../components/ui/input\';\nimport { Label } from \'../components/ui/label\';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'../components/ui/select\';\nimport { Textarea } from \'../components/ui/textarea\';\nimport { Badge } from \'../components/ui/badge\';\nimport { useToast } from \'../components/ui/use-toast\';\nimport { Plus, Calendar, Edit, Eye, FileText, CheckCircle } from \'lucide-react\';\nimport { useNavigate } from \'wouter\';\n\ninterface ExamType {\n  id: string;\n  name: string;\n  weightage: number;\n}\n\ninterface Exam {\n  id: string;\n  name: string;\n  startDate: string;\n  endDate: string;\n  description?: string;\n  isPublished: boolean;\n  resultsPublished: boolean;\n  examType: {\n    id: string;\n    name: string;\n    weightage: number;\n  };\n  createdAt: string;\n}\n\ninterface AcademicSession {\n  id: string;\n  name: string;\n  isCurrent: boolean;\n}\n\nexport default function ExamManagement() {\n  const { toast } = useToast();\n  const [, navigate] = useNavigate();\n  const [exams, setExams] = useState<Exam[]>([]);\n  const [examTypes, setExamTypes] = useState<ExamType[]>([]);\n  const [sessions, setSessions] = useState<AcademicSession[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \'\',\n    examTypeId: \'\',\n    academicSessionId: \'\',\n    startDate: \'\',\n    endDate: \'\',\n    description: \'\',\n    instructions: \'\',\n  });\n\n  useEffect(() => {\n    fetchExams();\n    fetchExamTypes();\n    fetchSessions();\n  }, []);\n\n  const fetchExams = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\'/api/examinations\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setExams(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching exams:\', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchExamTypes = async () => {\n    try {\n      const response = await fetch(\'/api/examinations/types\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setExamTypes(data.data);\n      }\n    } catch (error) {\n      console.error(\'Error fetching exam types:\', error);\n    }\n  };\n\n  const fetchSessions = async () => {\n    try {\n      const response = await fetch(\'/api/academic/sessions\', {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\'token\')}` },\n      });\n      const data = await response.json();\n      if (data.success) {\n        setSessions(data.data);\n        // Set current session as default\n        const currentSession = data.data.find((s: AcademicSession) => s.isCurrent);\n        if (currentSession) {\n          setFormData(prev => ({ ...prev, academicSessionId: currentSession.id }));\n        }\n      }\n    } catch (error) {\n      console.error(\'Error fetching sessions:\', error);\n    }\n  };\n\n  const createExam = async () => {\n    try {\n      const response = await fetch(\'/api/examinations\', {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n          Authorization: `Bearer ${localStorage.getItem(\'token\')}`,\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        toast({\n          title: \'Success\',\n          description: \'Exam created successfully\',\n        });\n        setDialogOpen(false);\n        resetForm();\n        fetchExams();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \'Error\',\n        description: error.message || \'Failed to create exam\',\n        variant: \'destructive\',\n      });\n    }\n  };\n\n  const resetForm = () => {\n    const currentSession = sessions.find(s => s.isCurrent);\n    setFormData({\n      name: \'\',\n      examTypeId: \'\',\n      academicSessionId: currentSession?.id || \'\',\n      startDate: \'\',\n      endDate: \'\',\n      description: \'\',\n      instructions: \'\',\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\'en-US\', {\n      year: \'numeric\',\n      month: \'short\',\n      day: \'numeric\',\n    });\n  };\n\n  return (\n    <div className="space-y-6">\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold">Exam Management</h1>\n          <p className="text-muted-foreground">Create and manage examinations</p>\n        </div>\n        <Button onClick={() => setDialogOpen(true)}>\n          <Plus className="mr-2 h-4 w-4" />\n          Create Exam\n        </Button>\n      </div>\n\n      {/* Statistics */}\n      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-muted-foreground">Total Exams</p>\n              <p className="text-3xl font-bold">{exams.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-blue-600">Published</p>\n              <p className="text-3xl font-bold text-blue-600">\n                {exams.filter(e => e.isPublished).length}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-green-600">Results Published</p>\n              <p className="text-3xl font-bold text-green-600">\n                {exams.filter(e => e.resultsPublished).length}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center">\n              <p className="text-sm font-medium text-yellow-600">Pending</p>\n              <p className="text-3xl font-bold text-yellow-600">\n                {exams.filter(e => !e.isPublished).length}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Exams List */}\n      {loading ? (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <p className="text-muted-foreground">Loading exams...</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : exams.length > 0 ? (\n        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">\n          {exams.map(exam => (\n            <Card key={exam.id} className="hover:shadow-lg transition-shadow">\n              <CardHeader>\n                <div className="flex items-start justify-between">\n                  <div className="flex-1">\n                    <CardTitle className="text-lg">{exam.name}</CardTitle>\n                    <CardDescription className="mt-1">\n                      <Badge variant="outline">{exam.examType.name}</Badge>\n                    </CardDescription>\n                  </div>\n                  <div className="flex gap-1">\n                    {exam.isPublished && (\n                      <Badge variant="default" className="bg-blue-600">\n                        Published\n                      </Badge>\n                    )}\n                    {exam.resultsPublished && (\n                      <Badge variant="default" className="bg-green-600">\n                        <CheckCircle className="mr-1 h-3 w-3" />\n                        Results\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className="space-y-3">\n                  <div className="flex items-center gap-2 text-sm">\n                    <Calendar className="h-4 w-4 text-muted-foreground" />\n                    <span>\n                      {formatDate(exam.startDate)} - {formatDate(exam.endDate)}\n                    </span>\n                  </div>\n                  {exam.description && (\n                    <p className="text-sm text-muted-foreground line-clamp-2">\n                      {exam.description}\n                    </p>\n                  )}\n                  <div className="flex gap-2 pt-2">\n                    <Button\n                      size="sm"\n                      variant="outline"\n                      className="flex-1"\n                      onClick={() => navigate(`/exams/${exam.id}`)}\n                    >\n                      <Eye className="mr-1 h-4 w-4" />\n                      View\n                    </Button>\n                    <Button\n                      size="sm"\n                      variant="outline"\n                      className="flex-1"\n                      onClick={() => navigate(`/exams/${exam.id}/schedule`)}\n                    >\n                      <Calendar className="mr-1 h-4 w-4" />\n                      Schedule\n                    </Button>\n                    <Button\n                      size="sm"\n                      variant="outline"\n                      className="flex-1"\n                      onClick={() => navigate(`/exams/${exam.id}/marks`)}\n                    >\n                      <FileText className="mr-1 h-4 w-4" />\n                      Marks\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className="pt-6">\n            <div className="text-center py-8">\n              <FileText className="mx-auto h-12 w-12 text-muted-foreground mb-4" />\n              <p className="text-muted-foreground">No exams created yet</p>\n              <Button className="mt-4" onClick={() => setDialogOpen(true)}>\n                <Plus className="mr-2 h-4 w-4" />\n                Create Your First Exam\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Create Exam Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">\n          <DialogHeader>\n            <DialogTitle>Create New Exam</DialogTitle>\n            <DialogDescription>\n              Fill in the details to create a new examination\n            </DialogDescription>\n          </DialogHeader>\n          <div className="space-y-4">\n            <div className="space-y-2">\n              <Label>Exam Name *</Label>\n              <Input\n                placeholder="e.g., First Terminal Examination 2024"\n                value={formData.name}\n                onChange={e => setFormData({ ...formData, name: e.target.value })}\n              />\n            </div>\n\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-2">\n                <Label>Exam Type *</Label>\n                <Select\n                  value={formData.examTypeId}\n                  onValueChange={value => setFormData({ ...formData, examTypeId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder="Select type" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {examTypes.map(type => (\n                      <SelectItem key={type.id} value={type.id}>\n                        {type.name} ({type.weightage}%)\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className="space-y-2">\n                <Label>Academic Session *</Label>\n                <Select\n                  value={formData.academicSessionId}\n                  onValueChange={value => setFormData({ ...formData, academicSessionId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder="Select session" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {sessions.map(session => (\n                      <SelectItem key={session.id} value={session.id}>\n                        {session.name} {session.isCurrent && \'(Current)\'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-2">\n                <Label>Start Date *</Label>\n                <Input\n                  type="date"\n                  value={formData.startDate}\n                  onChange={e => setFormData({ ...formData, startDate: e.target.value })}\n                />\n              </div>\n\n              <div className="space-y-2">\n                <Label>End Date *</Label>\n                <Input\n                  type="date"\n                  value={formData.endDate}\n                  min={formData.startDate}\n                  onChange={e => setFormData({ ...formData, endDate: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div className="space-y-2">\n              <Label>Description</Label>\n              <Textarea\n                placeholder="Brief description of the exam"\n                value={formData.description}\n                onChange={e => setFormData({ ...formData, description: e.target.value })}\n                rows={3}\n              />\n            </div>\n\n            <div className="space-y-2">\n              <Label>Instructions</Label>\n              <Textarea\n                placeholder="General instructions for students"\n                value={formData.instructions}\n                onChange={e => setFormData({ ...formData, instructions: e.target.value })}\n                rows={4}\n              />\n            </div>\n\n            <div className="flex gap-2 justify-end pt-4">\n              <Button variant="outline" onClick={() => setDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={createExam}\n                disabled={\n                  !formData.name ||\n                  !formData.examTypeId ||\n                  !formData.academicSessionId ||\n                  !formData.startDate ||\n                  !formData.endDate\n                }\n              >\n                Create Exam\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}